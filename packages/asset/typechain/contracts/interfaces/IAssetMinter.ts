/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IAssetMinter {
  export type MintableAssetStruct = {
    creator: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    voxelHash: PromiseOrValue<BigNumberish>;
    tier: PromiseOrValue<BigNumberish>;
    creatorNonce: PromiseOrValue<BigNumberish>;
  };

  export type MintableAssetStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    creator: string;
    amount: BigNumber;
    voxelHash: BigNumber;
    tier: number;
    creatorNonce: number;
  };
}

export interface IAssetMinterInterface extends utils.Interface {
  functions: {
    "changeAssetContractAddress(address)": FunctionFragment;
    "changeCatalystContractAddress(address)": FunctionFragment;
    "mintAsset(bytes,(address,uint256,uint256,uint8,uint16))": FunctionFragment;
    "mintAssetBatch(bytes,(address,uint256,uint256,uint8,uint16)[])": FunctionFragment;
    "mintExclusive(address,address,uint256)": FunctionFragment;
    "recycleAssets(uint256[],uint256[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeAssetContractAddress"
      | "changeCatalystContractAddress"
      | "mintAsset"
      | "mintAssetBatch"
      | "mintExclusive"
      | "recycleAssets"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeAssetContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCatalystContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAsset",
    values: [PromiseOrValue<BytesLike>, IAssetMinter.MintableAssetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAssetBatch",
    values: [PromiseOrValue<BytesLike>, IAssetMinter.MintableAssetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintExclusive",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recycleAssets",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeAssetContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCatalystContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAssetBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintExclusive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recycleAssets",
    data: BytesLike
  ): Result;

  events: {
    "AssetContractAddressChanged(address)": EventFragment;
    "AssetRevealBurn(address,uint256,address,uint8,uint16,uint256)": EventFragment;
    "AssetsRevealed(address,address,uint256,uint256[])": EventFragment;
    "CatalystContractAddressChanged(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AssetContractAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRevealBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetsRevealed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CatalystContractAddressChanged"
  ): EventFragment;
}

export interface AssetContractAddressChangedEventObject {
  newAddress: string;
}
export type AssetContractAddressChangedEvent = TypedEvent<
  [string],
  AssetContractAddressChangedEventObject
>;

export type AssetContractAddressChangedEventFilter =
  TypedEventFilter<AssetContractAddressChangedEvent>;

export interface AssetRevealBurnEventObject {
  revealer: string;
  tokenId: BigNumber;
  assetCreator: string;
  tier: number;
  assetNonce: number;
  amount: BigNumber;
}
export type AssetRevealBurnEvent = TypedEvent<
  [string, BigNumber, string, number, number, BigNumber],
  AssetRevealBurnEventObject
>;

export type AssetRevealBurnEventFilter = TypedEventFilter<AssetRevealBurnEvent>;

export interface AssetsRevealedEventObject {
  recipient: string;
  creator: string;
  oldTokenId: BigNumber;
  newTokenIds: BigNumber[];
}
export type AssetsRevealedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[]],
  AssetsRevealedEventObject
>;

export type AssetsRevealedEventFilter = TypedEventFilter<AssetsRevealedEvent>;

export interface CatalystContractAddressChangedEventObject {
  newAddress: string;
}
export type CatalystContractAddressChangedEvent = TypedEvent<
  [string],
  CatalystContractAddressChangedEventObject
>;

export type CatalystContractAddressChangedEventFilter =
  TypedEventFilter<CatalystContractAddressChangedEvent>;

export interface IAssetMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssetMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      asset: IAssetMinter.MintableAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  changeAssetContractAddress(
    _catalystContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeCatalystContractAddress(
    _catalystContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintAsset(
    signature: PromiseOrValue<BytesLike>,
    asset: IAssetMinter.MintableAssetStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintAssetBatch(
    signature: PromiseOrValue<BytesLike>,
    mintableAssets: IAssetMinter.MintableAssetStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintExclusive(
    creator: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recycleAssets(
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    catalystTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      asset: IAssetMinter.MintableAssetStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetContractAddressChanged(address)"(
      newAddress?: null
    ): AssetContractAddressChangedEventFilter;
    AssetContractAddressChanged(
      newAddress?: null
    ): AssetContractAddressChangedEventFilter;

    "AssetRevealBurn(address,uint256,address,uint8,uint16,uint256)"(
      revealer?: null,
      tokenId?: null,
      assetCreator?: null,
      tier?: null,
      assetNonce?: null,
      amount?: null
    ): AssetRevealBurnEventFilter;
    AssetRevealBurn(
      revealer?: null,
      tokenId?: null,
      assetCreator?: null,
      tier?: null,
      assetNonce?: null,
      amount?: null
    ): AssetRevealBurnEventFilter;

    "AssetsRevealed(address,address,uint256,uint256[])"(
      recipient?: null,
      creator?: null,
      oldTokenId?: null,
      newTokenIds?: null
    ): AssetsRevealedEventFilter;
    AssetsRevealed(
      recipient?: null,
      creator?: null,
      oldTokenId?: null,
      newTokenIds?: null
    ): AssetsRevealedEventFilter;

    "CatalystContractAddressChanged(address)"(
      newAddress?: null
    ): CatalystContractAddressChangedEventFilter;
    CatalystContractAddressChanged(
      newAddress?: null
    ): CatalystContractAddressChangedEventFilter;
  };

  estimateGas: {
    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      asset: IAssetMinter.MintableAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      asset: IAssetMinter.MintableAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
