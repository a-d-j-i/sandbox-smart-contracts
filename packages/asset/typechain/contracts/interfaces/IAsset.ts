/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IAsset {
  export type AssetDataStruct = {
    creator: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    tier: PromiseOrValue<BigNumberish>;
    creatorNonce: PromiseOrValue<BigNumberish>;
    revealed: PromiseOrValue<boolean>;
    revealHash: PromiseOrValue<BigNumberish>;
  };

  export type AssetDataStructOutput = [
    string,
    BigNumber,
    number,
    number,
    boolean,
    number
  ] & {
    creator: string;
    amount: BigNumber;
    tier: number;
    creatorNonce: number;
    revealed: boolean;
    revealHash: number;
  };
}

export interface IAssetInterface extends utils.Interface {
  functions: {
    "bridgeMint(uint256,uint256,uint8,address,bool,uint40)": FunctionFragment;
    "burnBatchFrom(address,uint256[],uint256[])": FunctionFragment;
    "burnFrom(address,uint256,uint256)": FunctionFragment;
    "extractCreatorFromId(uint256)": FunctionFragment;
    "extractCreatorNonceFromId(uint256)": FunctionFragment;
    "extractIsRevealedFromId(uint256)": FunctionFragment;
    "extractTierFromId(uint256)": FunctionFragment;
    "generateTokenId(address,uint8,uint16,bool,uint40)": FunctionFragment;
    "getDataFromTokenId(uint256)": FunctionFragment;
    "getRecyclingAmount(uint256)": FunctionFragment;
    "mint((address,uint256,uint8,uint16,bool,uint40))": FunctionFragment;
    "mintBatch((address,uint256,uint8,uint16,bool,uint40)[])": FunctionFragment;
    "mintSpecial(address,(address,uint256,uint8,uint16,bool,uint40))": FunctionFragment;
    "recycleBurn(address,uint256[],uint256[],uint256)": FunctionFragment;
    "revealMint(address,uint256,uint256,uint40[])": FunctionFragment;
    "setRecyclingAmount(uint256,uint256)": FunctionFragment;
    "setURI(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridgeMint"
      | "burnBatchFrom"
      | "burnFrom"
      | "extractCreatorFromId"
      | "extractCreatorNonceFromId"
      | "extractIsRevealedFromId"
      | "extractTierFromId"
      | "generateTokenId"
      | "getDataFromTokenId"
      | "getRecyclingAmount"
      | "mint"
      | "mintBatch"
      | "mintSpecial"
      | "recycleBurn"
      | "revealMint"
      | "setRecyclingAmount"
      | "setURI"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeMint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnBatchFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "extractCreatorFromId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extractCreatorNonceFromId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extractIsRevealedFromId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extractTierFromId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateTokenId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataFromTokenId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecyclingAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [IAsset.AssetDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBatch",
    values: [IAsset.AssetDataStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSpecial",
    values: [PromiseOrValue<string>, IAsset.AssetDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "recycleBurn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecyclingAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bridgeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnBatchFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extractCreatorFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractCreatorNonceFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractIsRevealedFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTierFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataFromTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecyclingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSpecial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recycleBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecyclingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;

  events: {
    "AssetsRecycled(address,uint256[],uint256[],uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetsRecycled"): EventFragment;
}

export interface AssetsRecycledEventObject {
  recycler: string;
  tokenIds: BigNumber[];
  amounts: BigNumber[];
  catalystTier: BigNumber;
  catalystAmount: BigNumber;
}
export type AssetsRecycledEvent = TypedEvent<
  [string, BigNumber[], BigNumber[], BigNumber, BigNumber],
  AssetsRecycledEventObject
>;

export type AssetsRecycledEventFilter = TypedEventFilter<AssetsRecycledEvent>;

export interface IAsset extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAssetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeMint(
      originalTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      revealed: PromiseOrValue<boolean>,
      revealHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnBatchFrom(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extractCreatorFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { creator: string }>;

    extractCreatorNonceFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    extractIsRevealedFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    extractTierFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    generateTokenId(
      creator: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      assetNonce: PromiseOrValue<BigNumberish>,
      revealed: PromiseOrValue<boolean>,
      abilitiesAndEnhancementsHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDataFromTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IAsset.AssetDataStructOutput] & { data: IAsset.AssetDataStructOutput }
    >;

    getRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mint(
      assetData: IAsset.AssetDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintBatch(
      assetData: IAsset.AssetDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintSpecial(
      recipient: PromiseOrValue<string>,
      assetData: IAsset.AssetDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recycleBurn(
      recycler: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealMint(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bridgeMint(
    originalTokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    tier: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    revealed: PromiseOrValue<boolean>,
    revealHash: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnBatchFrom(
    account: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extractCreatorFromId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  extractCreatorNonceFromId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  extractIsRevealedFromId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  extractTierFromId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  generateTokenId(
    creator: PromiseOrValue<string>,
    tier: PromiseOrValue<BigNumberish>,
    assetNonce: PromiseOrValue<BigNumberish>,
    revealed: PromiseOrValue<boolean>,
    abilitiesAndEnhancementsHash: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDataFromTokenId(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IAsset.AssetDataStructOutput>;

  getRecyclingAmount(
    catalystTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mint(
    assetData: IAsset.AssetDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintBatch(
    assetData: IAsset.AssetDataStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintSpecial(
    recipient: PromiseOrValue<string>,
    assetData: IAsset.AssetDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recycleBurn(
    recycler: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    catalystTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealMint(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    prevTokenId: PromiseOrValue<BigNumberish>,
    revealHashes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecyclingAmount(
    catalystTokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setURI(
    newuri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridgeMint(
      originalTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      revealed: PromiseOrValue<boolean>,
      revealHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnBatchFrom(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnFrom(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    extractCreatorFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    extractCreatorNonceFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    extractIsRevealedFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extractTierFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateTokenId(
      creator: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      assetNonce: PromiseOrValue<BigNumberish>,
      revealed: PromiseOrValue<boolean>,
      abilitiesAndEnhancementsHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataFromTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IAsset.AssetDataStructOutput>;

    getRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      assetData: IAsset.AssetDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintBatch(
      assetData: IAsset.AssetDataStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintSpecial(
      recipient: PromiseOrValue<string>,
      assetData: IAsset.AssetDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    recycleBurn(
      recycler: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealMint(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetsRecycled(address,uint256[],uint256[],uint256,uint256)"(
      recycler?: null,
      tokenIds?: null,
      amounts?: null,
      catalystTier?: null,
      catalystAmount?: null
    ): AssetsRecycledEventFilter;
    AssetsRecycled(
      recycler?: null,
      tokenIds?: null,
      amounts?: null,
      catalystTier?: null,
      catalystAmount?: null
    ): AssetsRecycledEventFilter;
  };

  estimateGas: {
    bridgeMint(
      originalTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      revealed: PromiseOrValue<boolean>,
      revealHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnBatchFrom(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extractCreatorFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractCreatorNonceFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractIsRevealedFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractTierFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateTokenId(
      creator: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      assetNonce: PromiseOrValue<BigNumberish>,
      revealed: PromiseOrValue<boolean>,
      abilitiesAndEnhancementsHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataFromTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      assetData: IAsset.AssetDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintBatch(
      assetData: IAsset.AssetDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintSpecial(
      recipient: PromiseOrValue<string>,
      assetData: IAsset.AssetDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recycleBurn(
      recycler: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealMint(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeMint(
      originalTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      revealed: PromiseOrValue<boolean>,
      revealHash: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnBatchFrom(
      account: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extractCreatorFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extractCreatorNonceFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extractIsRevealedFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extractTierFromId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateTokenId(
      creator: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      assetNonce: PromiseOrValue<BigNumberish>,
      revealed: PromiseOrValue<boolean>,
      abilitiesAndEnhancementsHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataFromTokenId(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      assetData: IAsset.AssetDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintBatch(
      assetData: IAsset.AssetDataStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintSpecial(
      recipient: PromiseOrValue<string>,
      assetData: IAsset.AssetDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recycleBurn(
      recycler: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealMint(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecyclingAmount(
      catalystTokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setURI(
      newuri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
