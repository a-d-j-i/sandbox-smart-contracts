/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IAssetMinter {
  export type MintableAssetStruct = {
    creator: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    voxelHash: PromiseOrValue<BigNumberish>;
    tier: PromiseOrValue<BigNumberish>;
    creatorNonce: PromiseOrValue<BigNumberish>;
  };

  export type MintableAssetStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    number
  ] & {
    creator: string;
    amount: BigNumber;
    voxelHash: BigNumber;
    tier: number;
    creatorNonce: number;
  };
}

export interface AssetMinterInterface extends utils.Interface {
  functions: {
    "BACKEND_SIGNER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EXCLUSIVE_MINTER_ROLE()": FunctionFragment;
    "MINT_BATCH_TYPEHASH()": FunctionFragment;
    "MINT_TYPEHASH()": FunctionFragment;
    "REVEAL_TYPEHASH()": FunctionFragment;
    "assetContract()": FunctionFragment;
    "bannedCreators(address)": FunctionFragment;
    "catalystContract()": FunctionFragment;
    "changeAssetContractAddress(address)": FunctionFragment;
    "changeCatalystContractAddress(address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTrustedForwarder()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "mintAsset(bytes,(address,uint256,uint256,uint8,uint16))": FunctionFragment;
    "mintAssetBatch(bytes,(address,uint256,uint256,uint8,uint16)[])": FunctionFragment;
    "mintExclusive(address,address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "recycleAssets(uint256[],uint256[],uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revealBurn(uint256,uint256)": FunctionFragment;
    "revealMint(bytes,address,uint256,address,uint256,uint40[])": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "version()": FunctionFragment;
    "voxelCreators(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BACKEND_SIGNER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "EXCLUSIVE_MINTER_ROLE"
      | "MINT_BATCH_TYPEHASH"
      | "MINT_TYPEHASH"
      | "REVEAL_TYPEHASH"
      | "assetContract"
      | "bannedCreators"
      | "catalystContract"
      | "changeAssetContractAddress"
      | "changeCatalystContractAddress"
      | "domainSeparator"
      | "getRoleAdmin"
      | "getTrustedForwarder"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isTrustedForwarder"
      | "mintAsset"
      | "mintAssetBatch"
      | "mintExclusive"
      | "name"
      | "recycleAssets"
      | "renounceRole"
      | "revealBurn"
      | "revealMint"
      | "revokeRole"
      | "supportsInterface"
      | "version"
      | "voxelCreators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BACKEND_SIGNER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXCLUSIVE_MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_BATCH_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVEAL_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bannedCreators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "catalystContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAssetContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCatalystContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAsset",
    values: [PromiseOrValue<BytesLike>, IAssetMinter.MintableAssetStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAssetBatch",
    values: [PromiseOrValue<BytesLike>, IAssetMinter.MintableAssetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintExclusive",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recycleAssets",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBurn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealMint",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voxelCreators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BACKEND_SIGNER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXCLUSIVE_MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_BATCH_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVEAL_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bannedCreators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "catalystContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAssetContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCatalystContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAssetBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintExclusive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recycleAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revealMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voxelCreators",
    data: BytesLike
  ): Result;

  events: {
    "AssetContractAddressChanged(address)": EventFragment;
    "AssetRevealBurn(address,uint256,address,uint8,uint16,uint256)": EventFragment;
    "AssetsRevealed(address,address,uint256,uint256[])": EventFragment;
    "CatalystContractAddressChanged(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AssetContractAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRevealBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetsRevealed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CatalystContractAddressChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface AssetContractAddressChangedEventObject {
  newAddress: string;
}
export type AssetContractAddressChangedEvent = TypedEvent<
  [string],
  AssetContractAddressChangedEventObject
>;

export type AssetContractAddressChangedEventFilter =
  TypedEventFilter<AssetContractAddressChangedEvent>;

export interface AssetRevealBurnEventObject {
  revealer: string;
  tokenId: BigNumber;
  assetCreator: string;
  tier: number;
  assetNonce: number;
  amount: BigNumber;
}
export type AssetRevealBurnEvent = TypedEvent<
  [string, BigNumber, string, number, number, BigNumber],
  AssetRevealBurnEventObject
>;

export type AssetRevealBurnEventFilter = TypedEventFilter<AssetRevealBurnEvent>;

export interface AssetsRevealedEventObject {
  recipient: string;
  creator: string;
  oldTokenId: BigNumber;
  newTokenIds: BigNumber[];
}
export type AssetsRevealedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[]],
  AssetsRevealedEventObject
>;

export type AssetsRevealedEventFilter = TypedEventFilter<AssetsRevealedEvent>;

export interface CatalystContractAddressChangedEventObject {
  newAddress: string;
}
export type CatalystContractAddressChangedEvent = TypedEvent<
  [string],
  CatalystContractAddressChangedEventObject
>;

export type CatalystContractAddressChangedEventFilter =
  TypedEventFilter<CatalystContractAddressChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface AssetMinter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BACKEND_SIGNER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EXCLUSIVE_MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINT_BATCH_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    MINT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    REVEAL_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    assetContract(overrides?: CallOverrides): Promise<[string]>;

    bannedCreators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    catalystContract(overrides?: CallOverrides): Promise<[string]>;

    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<[string] & { trustedForwarder: string }>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _forwarder: PromiseOrValue<string>,
      _assetContract: PromiseOrValue<string>,
      _catalystContract: PromiseOrValue<string>,
      _exclusiveMinter: PromiseOrValue<string>,
      _backendSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      mintableAsset: IAssetMinter.MintableAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealBurn(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealMint(
      signature: PromiseOrValue<BytesLike>,
      creator: PromiseOrValue<string>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    voxelCreators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  BACKEND_SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EXCLUSIVE_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  MINT_BATCH_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  MINT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  REVEAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  assetContract(overrides?: CallOverrides): Promise<string>;

  bannedCreators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  catalystContract(overrides?: CallOverrides): Promise<string>;

  changeAssetContractAddress(
    _catalystContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeCatalystContractAddress(
    _catalystContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _forwarder: PromiseOrValue<string>,
    _assetContract: PromiseOrValue<string>,
    _catalystContract: PromiseOrValue<string>,
    _exclusiveMinter: PromiseOrValue<string>,
    _backendSigner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintAsset(
    signature: PromiseOrValue<BytesLike>,
    mintableAsset: IAssetMinter.MintableAssetStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintAssetBatch(
    signature: PromiseOrValue<BytesLike>,
    mintableAssets: IAssetMinter.MintableAssetStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintExclusive(
    creator: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  recycleAssets(
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    catalystTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealBurn(
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealMint(
    signature: PromiseOrValue<BytesLike>,
    creator: PromiseOrValue<string>,
    prevTokenId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    revealHashes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<string>;

  voxelCreators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    BACKEND_SIGNER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EXCLUSIVE_MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    MINT_BATCH_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    MINT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    REVEAL_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    assetContract(overrides?: CallOverrides): Promise<string>;

    bannedCreators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    catalystContract(overrides?: CallOverrides): Promise<string>;

    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _forwarder: PromiseOrValue<string>,
      _assetContract: PromiseOrValue<string>,
      _catalystContract: PromiseOrValue<string>,
      _exclusiveMinter: PromiseOrValue<string>,
      _backendSigner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      mintableAsset: IAssetMinter.MintableAssetStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealBurn(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealMint(
      signature: PromiseOrValue<BytesLike>,
      creator: PromiseOrValue<string>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;

    voxelCreators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AssetContractAddressChanged(address)"(
      newAddress?: null
    ): AssetContractAddressChangedEventFilter;
    AssetContractAddressChanged(
      newAddress?: null
    ): AssetContractAddressChangedEventFilter;

    "AssetRevealBurn(address,uint256,address,uint8,uint16,uint256)"(
      revealer?: null,
      tokenId?: null,
      assetCreator?: null,
      tier?: null,
      assetNonce?: null,
      amount?: null
    ): AssetRevealBurnEventFilter;
    AssetRevealBurn(
      revealer?: null,
      tokenId?: null,
      assetCreator?: null,
      tier?: null,
      assetNonce?: null,
      amount?: null
    ): AssetRevealBurnEventFilter;

    "AssetsRevealed(address,address,uint256,uint256[])"(
      recipient?: null,
      creator?: null,
      oldTokenId?: null,
      newTokenIds?: null
    ): AssetsRevealedEventFilter;
    AssetsRevealed(
      recipient?: null,
      creator?: null,
      oldTokenId?: null,
      newTokenIds?: null
    ): AssetsRevealedEventFilter;

    "CatalystContractAddressChanged(address)"(
      newAddress?: null
    ): CatalystContractAddressChangedEventFilter;
    CatalystContractAddressChanged(
      newAddress?: null
    ): CatalystContractAddressChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    BACKEND_SIGNER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EXCLUSIVE_MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_BATCH_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    REVEAL_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    assetContract(overrides?: CallOverrides): Promise<BigNumber>;

    bannedCreators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    catalystContract(overrides?: CallOverrides): Promise<BigNumber>;

    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _forwarder: PromiseOrValue<string>,
      _assetContract: PromiseOrValue<string>,
      _catalystContract: PromiseOrValue<string>,
      _exclusiveMinter: PromiseOrValue<string>,
      _backendSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      mintableAsset: IAssetMinter.MintableAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealBurn(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealMint(
      signature: PromiseOrValue<BytesLike>,
      creator: PromiseOrValue<string>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voxelCreators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BACKEND_SIGNER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXCLUSIVE_MINTER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_BATCH_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REVEAL_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bannedCreators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    catalystContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAssetContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeCatalystContractAddress(
      _catalystContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedForwarder(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _forwarder: PromiseOrValue<string>,
      _assetContract: PromiseOrValue<string>,
      _catalystContract: PromiseOrValue<string>,
      _exclusiveMinter: PromiseOrValue<string>,
      _backendSigner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAsset(
      signature: PromiseOrValue<BytesLike>,
      mintableAsset: IAssetMinter.MintableAssetStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintAssetBatch(
      signature: PromiseOrValue<BytesLike>,
      mintableAssets: IAssetMinter.MintableAssetStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintExclusive(
      creator: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recycleAssets(
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      catalystTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealBurn(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealMint(
      signature: PromiseOrValue<BytesLike>,
      creator: PromiseOrValue<string>,
      prevTokenId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      revealHashes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voxelCreators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
