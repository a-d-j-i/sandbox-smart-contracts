{
  "address": "0x4022EfD364AB869E06284012be5d60EB71490c4E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc20Contract",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC20Transferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_recipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_royaltyManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecipients",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct Recipient[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "royaltyManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "proxyCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct Recipient[]",
          "name": "recipients",
          "type": "tuple[]"
        }
      ],
      "name": "setRecipients",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20Contract",
          "type": "address"
        }
      ],
      "name": "splitERC20Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdf92baf657e9c40315d74f4b722158fe22fff1f15624f3b65eb9179deac0a7a7",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x4022EfD364AB869E06284012be5d60EB71490c4E",
    "transactionIndex": 0,
    "gasUsed": "1754659",
    "logsBloom": "0x
    "blockHash": "0xaf6ef1cbf92280cc76ec8d9129c797cb2ae5261b8e5e71ec306b8f97554d18e7",
    "transactionHash": "0xdf92baf657e9c40315d74f4b722158fe22fff1f15624f3b65eb9179deac0a7a7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 38730647,
        "transactionHash": "0xdf92baf657e9c40315d74f4b722158fe22fff1f15624f3b65eb9179deac0a7a7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012b38f28f802530000000000000000000000000000000000000000000000117172ca05917a27b80000000000000000000000000000000000000000000033a6d2621f1e4077f38600000000000000000000000000000000000000000000001171601676688225650000000000000000000000000000000000000000000033a6d274d2ad696ff5d9",
        "logIndex": 0,
        "blockHash": "0xaf6ef1cbf92280cc76ec8d9129c797cb2ae5261b8e5e71ec306b8f97554d18e7"
      }
    ],
    "blockNumber": 38730647,
    "cumulativeGasUsed": "1754659",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e64fd56b3bfae7f817a31de5cae19a1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Contract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_royaltyManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecipients\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct Recipient[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"proxyCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct Recipient[]\",\"name\":\"recipients\",\"type\":\"tuple[]\"}],\"name\":\"setRecipients\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20Contract\",\"type\":\"address\"}],\"name\":\"splitERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getRecipients()\":{\"returns\":{\"_0\":\"recipients of royalty through this splitter and their splits of royalty.\"}},\"initialize(address,address)\":{\"details\":\"can only be run once.\",\"params\":{\"recipient\":\"the wallet of the creator when the contract is deployed\",\"royaltyManager\":\"the address of the royalty manager contract\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxyCall(address,bytes)\":{\"details\":\"first attempts to split ERC20 tokens.\",\"params\":{\"callData\":\"for the call.\",\"target\":\"target of the call\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setRecipients((address,uint16)[])\":{\"details\":\"only the owner can call this.\",\"params\":{\"recipients\":\"the array of recipients which should only have one recipient.\"}},\"splitERC20Tokens(address)\":{\"details\":\"can only be called by one of the recipients\",\"params\":{\"erc20Contract\":\"the address of the tokens to be split.\"}},\"splitETH()\":{\"details\":\"normally ETH should be split automatically by receive function.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"RoyaltySplitter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getRecipients()\":{\"notice\":\"to get recipients of royalty through this splitter and their splits of royalty.\"},\"initialize(address,address)\":{\"notice\":\"initialize the contract\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"proxyCall(address,bytes)\":{\"notice\":\"made for unexpected scenarios when assets are sent to this contact such that they could be recovered.\"},\"setRecipients((address,uint16)[])\":{\"notice\":\"sets recipient for the splitter\"},\"splitERC20Tokens(address)\":{\"notice\":\"split ERC20 Tokens owned by this contract.\"},\"splitETH()\":{\"notice\":\"Splits and forwards ETH to the royalty receivers\"}},\"notice\":\"RoyaltySplitter contract is deployed by the RoyaltyManager contract for a creator to get his royalty's share.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol\":\"RoyaltySplitter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/libraries/BytesLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A library for manipulation of byte arrays.\\n */\\nlibrary BytesLibrary {\\n    /**\\n     * @dev Replace the address at the given location in a byte array if the contents at that location\\n     * match the expected address.\\n     */\\n    function replaceAtIf(bytes memory data, uint256 startLocation, address expectedAddress, address newAddress)\\n        internal\\n        pure\\n    {\\n        bytes memory expectedData = abi.encodePacked(expectedAddress);\\n        bytes memory newData = abi.encodePacked(newAddress);\\n        // An address is 20 bytes long\\n        for (uint256 i = 0; i < 20; i++) {\\n            uint256 dataLocation = startLocation + i;\\n            require(data[dataLocation] == expectedData[i], \\\"Bytes: Data provided does not include the expectedAddress\\\");\\n            data[dataLocation] = newData[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if the call data starts with the given function signature.\\n     */\\n    function startsWith(bytes memory callData, bytes4 functionSig) internal pure returns (bool) {\\n        // A signature is 4 bytes long\\n        if (callData.length < 4) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (callData[i] != functionSig[i]) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x73fd074a57bd5d185ffb79dd98bb8db2e97c2d7df064d83f3f42da15ab9da8a1\",\"license\":\"MIT OR Apache-2.0\"},\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nstruct Recipient {\\n    address payable recipient;\\n    uint16 bps;\\n}\\n\\ninterface IRoyaltySplitter is IERC165 {\\n    /**\\n     * @dev Set the splitter recipients. Total bps must total 10000.\\n     */\\n    function setRecipients(Recipient[] calldata recipients) external;\\n\\n    /**\\n     * @dev Get the splitter recipients;\\n     */\\n    function getRecipients() external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0xc507963f66c4238d25e69d2d05ac5995c549aa89789e89e7a556403221547c6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"ERC2771HandlerUpgradeable: forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x63e53ca5ec229e51d866b0b8e3c8f36056598d9fbf960bb57b4b9731917af16f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    OwnableUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {BytesLibrary} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/libraries/BytesLibrary.sol\\\";\\nimport {\\n    IRoyaltySplitter,\\n    IERC165,\\n    Recipient\\n} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\nimport {\\n    ERC2771HandlerAbstract\\n} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {IRoyaltyManager} from \\\"./interfaces/IRoyaltyManager.sol\\\";\\nimport {IERC20Approve} from \\\"./interfaces/IERC20Approve.sol\\\";\\n\\n/// @title RoyaltySplitter\\n/// @author The Sandbox\\n/// @notice RoyaltySplitter contract is deployed by the RoyaltyManager contract for a creator to get his royalty's share.\\ncontract RoyaltySplitter is\\n    Initializable,\\n    OwnableUpgradeable,\\n    IRoyaltySplitter,\\n    ERC165Upgradeable,\\n    ERC2771HandlerAbstract\\n{\\n    using BytesLibrary for bytes;\\n    using AddressUpgradeable for address payable;\\n    using AddressUpgradeable for address;\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant TOTAL_BASIS_POINTS = 10000;\\n    uint256 internal constant IERC20_APPROVE_SELECTOR =\\n        0x095ea7b300000000000000000000000000000000000000000000000000000000;\\n    uint256 internal constant SELECTOR_MASK = 0xffffffff00000000000000000000000000000000000000000000000000000000;\\n\\n    address payable public _recipient;\\n    IRoyaltyManager public _royaltyManager;\\n\\n    event ETHTransferred(address indexed account, uint256 amount);\\n    event ERC20Transferred(address indexed erc20Contract, address indexed account, uint256 amount);\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IRoyaltySplitter).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice initialize the contract\\n    /// @dev can only be run once.\\n    /// @param recipient the wallet of the creator when the contract is deployed\\n    /// @param royaltyManager the address of the royalty manager contract\\n    function initialize(address payable recipient, address royaltyManager) public initializer {\\n        _royaltyManager = IRoyaltyManager(royaltyManager); // set manager before Ownable_init for _isTrustedForwarder\\n        _recipient = recipient;\\n        __Ownable_init();\\n    }\\n\\n    /// @notice sets recipient for the splitter\\n    /// @dev only the owner can call this.\\n    /// @param recipients the array of recipients which should only have one recipient.\\n    function setRecipients(Recipient[] calldata recipients) external override onlyOwner {\\n        _setRecipients(recipients);\\n    }\\n\\n    function _setRecipients(Recipient[] calldata recipients) private {\\n        delete _recipient;\\n        require(recipients.length == 1, \\\"Invalid recipents length\\\");\\n        _recipient = recipients[0].recipient;\\n    }\\n\\n    /// @notice to get recipients of royalty through this splitter and their splits of royalty.\\n    /// @return recipients of royalty through this splitter and their splits of royalty.\\n    function getRecipients() external view override returns (Recipient[] memory) {\\n        Recipient memory commonRecipient = _royaltyManager.getCommonRecipient();\\n        uint16 creatorSplit = _royaltyManager.getCreatorSplit();\\n        Recipient[] memory recipients = new Recipient[](2);\\n        recipients[0].recipient = _recipient;\\n        recipients[0].bps = creatorSplit;\\n        recipients[1] = commonRecipient;\\n        return recipients;\\n    }\\n\\n    /// @notice Splits and forwards ETH to the royalty receivers\\n    /// @dev splits ETH every time it is sent to this contract as royalty.\\n    receive() external payable {\\n        _splitETH(msg.value);\\n    }\\n\\n    /// @notice Splits and forwards ETH to the royalty receivers\\n    /// @dev normally ETH should be split automatically by receive function.\\n    function splitETH() public payable {\\n        _splitETH(address(this).balance);\\n    }\\n\\n    function _splitETH(uint256 value) internal {\\n        if (value > 0) {\\n            Recipient memory commonRecipient = _royaltyManager.getCommonRecipient();\\n            uint16 creatorSplit = _royaltyManager.getCreatorSplit();\\n            Recipient[] memory _recipients = new Recipient[](2);\\n            _recipients[0].recipient = _recipient;\\n            _recipients[0].bps = creatorSplit;\\n            _recipients[1] = commonRecipient;\\n            uint256 totalSent;\\n            uint256 amountToSend;\\n            unchecked {\\n                for (uint256 i = _recipients.length - 1; i > 0; i--) {\\n                    Recipient memory recipient = _recipients[i];\\n                    amountToSend = (value * recipient.bps) / TOTAL_BASIS_POINTS;\\n                    totalSent += amountToSend;\\n                    recipient.recipient.sendValue(amountToSend);\\n                    emit ETHTransferred(recipient.recipient, amountToSend);\\n                }\\n                // Favor the 1st recipient if there are any rounding issues\\n                amountToSend = value - totalSent;\\n            }\\n            _recipients[0].recipient.sendValue(amountToSend);\\n            emit ETHTransferred(_recipients[0].recipient, amountToSend);\\n        }\\n    }\\n\\n    /// @notice split ERC20 Tokens owned by this contract.\\n    /// @dev can only be called by one of the recipients\\n    /// @param erc20Contract the address of the tokens to be split.\\n    function splitERC20Tokens(IERC20 erc20Contract) public {\\n        require(_splitERC20Tokens(erc20Contract), \\\"Split: ERC20 split failed\\\");\\n    }\\n\\n    function _splitERC20Tokens(IERC20 erc20Contract) internal returns (bool) {\\n        try erc20Contract.balanceOf(address(this)) returns (uint256 balance) {\\n            if (balance == 0) {\\n                return false;\\n            }\\n            Recipient memory commonRecipient = _royaltyManager.getCommonRecipient();\\n            uint16 creatorSplit = _royaltyManager.getCreatorSplit();\\n            require(\\n                commonRecipient.recipient == _msgSender() || _recipient == _msgSender(),\\n                \\\"Split: Can only be called by one of the recipients\\\"\\n            );\\n            Recipient[] memory _recipients = new Recipient[](2);\\n            _recipients[0].recipient = _recipient;\\n            _recipients[0].bps = creatorSplit;\\n            _recipients[1] = commonRecipient;\\n            uint256 amountToSend;\\n            uint256 totalSent;\\n            unchecked {\\n                for (uint256 i = _recipients.length - 1; i > 0; i--) {\\n                    Recipient memory recipient = _recipients[i];\\n                    bool success;\\n                    (success, amountToSend) = balance.tryMul(recipient.bps);\\n\\n                    amountToSend /= TOTAL_BASIS_POINTS;\\n                    totalSent += amountToSend;\\n                    try erc20Contract.transfer(recipient.recipient, amountToSend) {\\n                        emit ERC20Transferred(address(erc20Contract), recipient.recipient, amountToSend);\\n                    } catch {\\n                        return false;\\n                    }\\n                }\\n                // Favor the 1st recipient if there are any rounding issues\\n                amountToSend = balance - totalSent;\\n            }\\n            try erc20Contract.transfer(_recipients[0].recipient, amountToSend) {\\n                emit ERC20Transferred(address(erc20Contract), _recipients[0].recipient, amountToSend);\\n            } catch {\\n                return false;\\n            }\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice made for unexpected scenarios when assets are sent to this contact such that they could be recovered.\\n    /// @dev first attempts to split ERC20 tokens.\\n    /// @param target target of the call\\n    /// @param callData for the call.\\n    function proxyCall(address payable target, bytes calldata callData) external {\\n        Recipient memory commonRecipient = _royaltyManager.getCommonRecipient();\\n        require(\\n            commonRecipient.recipient == _msgSender() || _recipient == _msgSender(),\\n            \\\"Split: Can only be called by one of the recipients\\\"\\n        );\\n        require(\\n            !callData.startsWith(IERC20Approve.approve.selector) &&\\n                !callData.startsWith(IERC20Approve.increaseAllowance.selector),\\n            \\\"Split: ERC20 tokens must be split\\\"\\n        );\\n        /* solhint-disable-next-line no-empty-blocks*/\\n        try this.splitERC20Tokens(IERC20(target)) {} catch {}\\n        target.functionCall(callData);\\n    }\\n\\n    /// @notice verify whether a forwarder address is the trustedForwarder address, using the manager setting\\n    /// @dev this function is used to avoid having a trustedForwarder variable inside the splitter\\n    /// @return bool whether the forwarder is the trusted address\\n    function _isTrustedForwarder(address forwarder) internal view override(ERC2771HandlerAbstract) returns (bool) {\\n        return forwarder == _royaltyManager.getTrustedForwarder();\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerAbstract)\\n        returns (address sender)\\n    {\\n        return ERC2771HandlerAbstract._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerAbstract)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771HandlerAbstract._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x1e61d48e87a5c4f598837545a0899a9a280e449f96d4b1d7d6ca4109f93c613a\",\"license\":\"MIT OR Apache-2.0\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IERC20Approve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20Approve {\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function increaseAllowance(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1f1e86109f5d15e996f94a30a4b4760b9c6b0f17bfff9e88e37714bd65b02f12\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\ninterface IRoyaltyManager {\\n    event RecipientSet(address commonRecipient);\\n\\n    event SplitSet(uint16 commonSplit);\\n\\n    event RoyaltySet(uint16 royaltyBps, address contractAddress);\\n\\n    function setRecipient(address payable _commonRecipient) external;\\n\\n    function setSplit(uint16 commonSplit) external;\\n\\n    function getCommonRecipient() external view returns (Recipient memory recipient);\\n\\n    function getCreatorSplit() external view returns (uint16);\\n\\n    function getRoyaltyInfo() external view returns (address payable, uint16);\\n\\n    function deploySplitter(address creator, address payable recipient) external returns (address payable);\\n\\n    function getCreatorRoyaltySplitter(address creator) external view returns (address payable);\\n\\n    function getContractRoyalty(address _contractAddress) external view returns (uint16 royaltyBps);\\n\\n    function setTrustedForwarder(address _newForwarder) external;\\n\\n    function getTrustedForwarder() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5193f7ce9bce4ac3facefdaa6172e0a0b8868356ca232d33cfb70a24e7b84cc2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ee4806100206000396000f3fe6080604052600436106100d65760003560e01c8063715018a61161007f578063d1aa25d011610059578063d1aa25d01461022b578063d4cca5f114610233578063d78d610b14610253578063f2fde38b1461027557600080fd5b8063715018a6146101d85780638da5cb5b146101ed578063c1426d0e1461020b57600080fd5b8063485cc955116100b0578063485cc95514610160578063572b6c0514610180578063663cb1bb146101a057600080fd5b806301ffc9a7146100eb57806320dc8ff7146101205780632a31f6b41461014057600080fd5b366100e6576100e434610295565b005b600080fd5b3480156100f757600080fd5b5061010b610106366004611af4565b6105bb565b60405190151581526020015b60405180910390f35b34801561012c57600080fd5b506100e461013b366004611b4b565b610654565b34801561014c57600080fd5b506100e461015b366004611b68565b6106ae565b34801561016c57600080fd5b506100e461017b366004611bed565b610999565b34801561018c57600080fd5b5061010b61019b366004611b4b565b610b16565b3480156101ac57600080fd5b506098546101c0906001600160a01b031681565b6040516001600160a01b039091168152602001610117565b3480156101e457600080fd5b506100e4610b21565b3480156101f957600080fd5b506033546001600160a01b03166101c0565b34801561021757600080fd5b506100e4610226366004611c26565b610b35565b6100e4610b4b565b34801561023f57600080fd5b506097546101c0906001600160a01b031681565b34801561025f57600080fd5b50610268610b54565b6040516101179190611c9b565b34801561028157600080fd5b506100e4610290366004611b4b565b610d1b565b80156105b85760985460408051638b49fde760e01b815281516000936001600160a01b031692638b49fde792600480820193918290030181865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190611d09565b90506000609860009054906101000a90046001600160a01b03166001600160a01b031663706ec2fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103809190611d74565b6040805160028082526060820190925291925060009190816020015b604080518082019091526000808252602082015281526020019060019003908161039c57505060975481519192506001600160a01b03169082906000906103e5576103e5611d8f565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818160008151811061041d5761041d611d8f565b60200260200101516020019061ffff16908161ffff1681525050828160018151811061044b5761044b611d8f565b60200260200101819052506000806000600184510390505b801561051157600084828151811061047d5761047d611d8f565b60200260200101519050612710816020015161ffff168902816104a2576104a2611da5565b82519190049485019493506104c0906001600160a01b031684610da8565b80600001516001600160a01b03167f1445764fe3fdfc2a9812ff42e9b65c2e7896d5162851f78f7d4a5578f7346ff1846040516104ff91815260200190565b60405180910390a25060001901610463565b508186039050610551818460008151811061052e5761052e611d8f565b6020026020010151600001516001600160a01b0316610da890919063ffffffff16565b8260008151811061056457610564611d8f565b6020026020010151600001516001600160a01b03167f1445764fe3fdfc2a9812ff42e9b65c2e7896d5162851f78f7d4a5578f7346ff1826040516105aa91815260200190565b60405180910390a250505050505b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f16cf0c0500000000000000000000000000000000000000000000000000000000148061064e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61065d81610ec1565b6105b85760405162461bcd60e51b815260206004820152601960248201527f53706c69743a2045524332302073706c6974206661696c65640000000000000060448201526064015b60405180910390fd5b60985460408051638b49fde760e01b815281516000936001600160a01b031692638b49fde792600480820193918290030181865afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611d09565b9050610722611461565b6001600160a01b031681600001516001600160a01b0316148061075a5750610748611461565b6097546001600160a01b039081169116145b6107cc5760405162461bcd60e51b815260206004820152603260248201527f53706c69743a2043616e206f6e6c792062652063616c6c6564206279206f6e6560448201527f206f662074686520726563697069656e7473000000000000000000000000000060648201526084016106a5565b61081663095ea7b360e01b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114709050565b15801561086a5750610868633950935160e01b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114709050565b155b6108dc5760405162461bcd60e51b815260206004820152602160248201527f53706c69743a20455243323020746f6b656e73206d7573742062652073706c6960448201527f740000000000000000000000000000000000000000000000000000000000000060648201526084016106a5565b6040517f20dc8ff70000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015230906320dc8ff790602401600060405180830381600087803b15801561093657600080fd5b505af1925050508015610947575060015b5061099283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b0388169291505061152c565b5050505050565b600054610100900460ff16158080156109b95750600054600160ff909116105b806109d35750303b1580156109d3575060005460ff166001145b610a455760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106a5565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a86576000805461ff0019166101001790555b609880546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff19928316179092556097805492861692909116919091179055610acb611577565b8015610b11576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600061064e826115fc565b610b2961169e565b610b336000611717565b565b610b3d61169e565b610b478282611776565b5050565b610b3347610295565b60985460408051638b49fde760e01b815281516060936000936001600160a01b0390911692638b49fde792600480830193928290030181865afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc39190611d09565b90506000609860009054906101000a90046001600160a01b03166001600160a01b031663706ec2fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3e9190611d74565b6040805160028082526060820190925291925060009190816020015b6040805180820190915260008082526020820152815260200190600190039081610c5a57505060975481519192506001600160a01b0316908290600090610ca357610ca3611d8f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508181600081518110610cdb57610cdb611d8f565b60200260200101516020019061ffff16908161ffff16815250508281600181518110610d0957610d09611d8f565b60209081029190910101529392505050565b610d2361169e565b6001600160a01b038116610d9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106a5565b6105b881611717565b80471015610df85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106a5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610e45576040519150601f19603f3d011682016040523d82523d6000602084013e610e4a565b606091505b5050905080610b115760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106a5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa925050508015610f3d575060408051601f3d908101601f19168201909252610f3a91810190611dbb565b60015b610f4957506000919050565b80600003610f5a5750600092915050565b60985460408051638b49fde760e01b815281516000936001600160a01b031692638b49fde792600480820193918290030181865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc49190611d09565b90506000609860009054906101000a90046001600160a01b03166001600160a01b031663706ec2fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190611d74565b9050611049611461565b6001600160a01b031682600001516001600160a01b03161480611081575061106f611461565b6097546001600160a01b039081169116145b6110f35760405162461bcd60e51b815260206004820152603260248201527f53706c69743a2043616e206f6e6c792062652063616c6c6564206279206f6e6560448201527f206f662074686520726563697069656e7473000000000000000000000000000060648201526084016106a5565b60408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161110b57505060975481519192506001600160a01b031690829060009061115457611154611d8f565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818160008151811061118c5761118c611d8f565b60200260200101516020019061ffff16908161ffff168152505082816001815181106111ba576111ba611d8f565b60200260200101819052506000806000600184510390505b801561131b5760008482815181106111ec576111ec611d8f565b602002602001015190506000611213826020015161ffff168a61183d90919063ffffffff16565b83516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261271090920460248301819052975095870195919250908c169063a9059cbb906044016020604051808303816000875af19250505080156112a9575060408051601f3d908101601f191682019092526112a691810190611dd4565b60015b6112be575060009a9950505050505050505050565b5081600001516001600160a01b03168b6001600160a01b03167fe8de91d538b06154a2c48315768c5046f47e127d7fd3f726fd85cc723f29b0528760405161130891815260200190565b60405180910390a35050600019016111d2565b508086039150876001600160a01b031663a9059cbb8460008151811061134357611343611d8f565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af19250505080156113d0575060408051601f3d908101601f191682019092526113cd91810190611dd4565b60015b6113e257506000979650505050505050565b50826000815181106113f6576113f6611d8f565b6020026020010151600001516001600160a01b0316886001600160a01b03167fe8de91d538b06154a2c48315768c5046f47e127d7fd3f726fd85cc723f29b0528460405161144691815260200190565b60405180910390a3506001979650505050505050565b919050565b600061146b611888565b905090565b60006004835110156114845750600061064e565b60005b6004811015611522578281600481106114a2576114a2611d8f565b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106114da576114da611d8f565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461151057600091505061064e565b8061151a81611df6565b915050611487565b5060019392505050565b6060611570838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506118d5565b9392505050565b600054610100900460ff166115f45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106a5565b610b336119c9565b609854604080517fce1b815f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ce1b815f9160048083019260209291908290030181865afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116839190611e1e565b6001600160a01b0316826001600160a01b0316149050919050565b6116a6611461565b6001600160a01b03166116c16033546001600160a01b031690565b6001600160a01b031614610b335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a5565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6097805473ffffffffffffffffffffffffffffffffffffffff19169055600181146117e35760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207265636970656e7473206c656e677468000000000000000060448201526064016106a5565b818160008181106117f6576117f6611d8f565b61180c9260206040909202019081019150611b4b565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b600080836000036118545750600190506000611881565b8383028385828161186757611867611da5565b041461187a576000809250925050611881565b6001925090505b9250929050565b6000611893336115fc565b80156118a0575060143610155b156118d057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60608247101561194d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106a5565b600080866001600160a01b031685876040516119699190611e5f565b60006040518083038185875af1925050503d80600081146119a6576040519150601f19603f3d011682016040523d82523d6000602084013e6119ab565b606091505b50915091506119bc87838387611a56565b925050505b949350505050565b600054610100900460ff16611a465760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106a5565b610b33611a51611461565b611717565b60608315611ac5578251600003611abe576001600160a01b0385163b611abe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a5565b50816119c1565b6119c18383815115611ada5781518083602001fd5b8060405162461bcd60e51b81526004016106a59190611e7b565b600060208284031215611b0657600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461157057600080fd5b6001600160a01b03811681146105b857600080fd5b600060208284031215611b5d57600080fd5b813561157081611b36565b600080600060408486031215611b7d57600080fd5b8335611b8881611b36565b9250602084013567ffffffffffffffff80821115611ba557600080fd5b818601915086601f830112611bb957600080fd5b813581811115611bc857600080fd5b876020828501011115611bda57600080fd5b6020830194508093505050509250925092565b60008060408385031215611c0057600080fd5b8235611c0b81611b36565b91506020830135611c1b81611b36565b809150509250929050565b60008060208385031215611c3957600080fd5b823567ffffffffffffffff80821115611c5157600080fd5b818501915085601f830112611c6557600080fd5b813581811115611c7457600080fd5b8660208260061b8501011115611c8957600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015611cea57815180516001600160a01b0316855286015161ffff16868501529284019290850190600101611cb8565b5091979650505050505050565b805161ffff8116811461145c57600080fd5b600060408284031215611d1b57600080fd5b6040516040810181811067ffffffffffffffff82111715611d4c57634e487b7160e01b600052604160045260246000fd5b6040528251611d5a81611b36565b8152611d6860208401611cf7565b60208201529392505050565b600060208284031215611d8657600080fd5b61157082611cf7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600060208284031215611dcd57600080fd5b5051919050565b600060208284031215611de657600080fd5b8151801515811461157057600080fd5b60006000198203611e1757634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215611e3057600080fd5b815161157081611b36565b60005b83811015611e56578181015183820152602001611e3e565b50506000910152565b60008251611e71818460208701611e3b565b9190910192915050565b6020815260008251806020840152611e9a816040850160208701611e3b565b601f01601f1916919091016040019291505056fea2646970667358221220e0a6d5b5165e5a2ce9111658444a4f8e39022faa7c3f91cbe6ae0a9f3ef50e1164736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100d65760003560e01c8063715018a61161007f578063d1aa25d011610059578063d1aa25d01461022b578063d4cca5f114610233578063d78d610b14610253578063f2fde38b1461027557600080fd5b8063715018a6146101d85780638da5cb5b146101ed578063c1426d0e1461020b57600080fd5b8063485cc955116100b0578063485cc95514610160578063572b6c0514610180578063663cb1bb146101a057600080fd5b806301ffc9a7146100eb57806320dc8ff7146101205780632a31f6b41461014057600080fd5b366100e6576100e434610295565b005b600080fd5b3480156100f757600080fd5b5061010b610106366004611af4565b6105bb565b60405190151581526020015b60405180910390f35b34801561012c57600080fd5b506100e461013b366004611b4b565b610654565b34801561014c57600080fd5b506100e461015b366004611b68565b6106ae565b34801561016c57600080fd5b506100e461017b366004611bed565b610999565b34801561018c57600080fd5b5061010b61019b366004611b4b565b610b16565b3480156101ac57600080fd5b506098546101c0906001600160a01b031681565b6040516001600160a01b039091168152602001610117565b3480156101e457600080fd5b506100e4610b21565b3480156101f957600080fd5b506033546001600160a01b03166101c0565b34801561021757600080fd5b506100e4610226366004611c26565b610b35565b6100e4610b4b565b34801561023f57600080fd5b506097546101c0906001600160a01b031681565b34801561025f57600080fd5b50610268610b54565b6040516101179190611c9b565b34801561028157600080fd5b506100e4610290366004611b4b565b610d1b565b80156105b85760985460408051638b49fde760e01b815281516000936001600160a01b031692638b49fde792600480820193918290030181865afa1580156102e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103059190611d09565b90506000609860009054906101000a90046001600160a01b03166001600160a01b031663706ec2fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103809190611d74565b6040805160028082526060820190925291925060009190816020015b604080518082019091526000808252602082015281526020019060019003908161039c57505060975481519192506001600160a01b03169082906000906103e5576103e5611d8f565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818160008151811061041d5761041d611d8f565b60200260200101516020019061ffff16908161ffff1681525050828160018151811061044b5761044b611d8f565b60200260200101819052506000806000600184510390505b801561051157600084828151811061047d5761047d611d8f565b60200260200101519050612710816020015161ffff168902816104a2576104a2611da5565b82519190049485019493506104c0906001600160a01b031684610da8565b80600001516001600160a01b03167f1445764fe3fdfc2a9812ff42e9b65c2e7896d5162851f78f7d4a5578f7346ff1846040516104ff91815260200190565b60405180910390a25060001901610463565b508186039050610551818460008151811061052e5761052e611d8f565b6020026020010151600001516001600160a01b0316610da890919063ffffffff16565b8260008151811061056457610564611d8f565b6020026020010151600001516001600160a01b03167f1445764fe3fdfc2a9812ff42e9b65c2e7896d5162851f78f7d4a5578f7346ff1826040516105aa91815260200190565b60405180910390a250505050505b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f16cf0c0500000000000000000000000000000000000000000000000000000000148061064e57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61065d81610ec1565b6105b85760405162461bcd60e51b815260206004820152601960248201527f53706c69743a2045524332302073706c6974206661696c65640000000000000060448201526064015b60405180910390fd5b60985460408051638b49fde760e01b815281516000936001600160a01b031692638b49fde792600480820193918290030181865afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611d09565b9050610722611461565b6001600160a01b031681600001516001600160a01b0316148061075a5750610748611461565b6097546001600160a01b039081169116145b6107cc5760405162461bcd60e51b815260206004820152603260248201527f53706c69743a2043616e206f6e6c792062652063616c6c6564206279206f6e6560448201527f206f662074686520726563697069656e7473000000000000000000000000000060648201526084016106a5565b61081663095ea7b360e01b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114709050565b15801561086a5750610868633950935160e01b84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506114709050565b155b6108dc5760405162461bcd60e51b815260206004820152602160248201527f53706c69743a20455243323020746f6b656e73206d7573742062652073706c6960448201527f740000000000000000000000000000000000000000000000000000000000000060648201526084016106a5565b6040517f20dc8ff70000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015230906320dc8ff790602401600060405180830381600087803b15801561093657600080fd5b505af1925050508015610947575060015b5061099283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506001600160a01b0388169291505061152c565b5050505050565b600054610100900460ff16158080156109b95750600054600160ff909116105b806109d35750303b1580156109d3575060005460ff166001145b610a455760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016106a5565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610a86576000805461ff0019166101001790555b609880546001600160a01b0380851673ffffffffffffffffffffffffffffffffffffffff19928316179092556097805492861692909116919091179055610acb611577565b8015610b11576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600061064e826115fc565b610b2961169e565b610b336000611717565b565b610b3d61169e565b610b478282611776565b5050565b610b3347610295565b60985460408051638b49fde760e01b815281516060936000936001600160a01b0390911692638b49fde792600480830193928290030181865afa158015610b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc39190611d09565b90506000609860009054906101000a90046001600160a01b03166001600160a01b031663706ec2fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3e9190611d74565b6040805160028082526060820190925291925060009190816020015b6040805180820190915260008082526020820152815260200190600190039081610c5a57505060975481519192506001600160a01b0316908290600090610ca357610ca3611d8f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508181600081518110610cdb57610cdb611d8f565b60200260200101516020019061ffff16908161ffff16815250508281600181518110610d0957610d09611d8f565b60209081029190910101529392505050565b610d2361169e565b6001600160a01b038116610d9f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016106a5565b6105b881611717565b80471015610df85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106a5565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610e45576040519150601f19603f3d011682016040523d82523d6000602084013e610e4a565b606091505b5050905080610b115760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106a5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa925050508015610f3d575060408051601f3d908101601f19168201909252610f3a91810190611dbb565b60015b610f4957506000919050565b80600003610f5a5750600092915050565b60985460408051638b49fde760e01b815281516000936001600160a01b031692638b49fde792600480820193918290030181865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc49190611d09565b90506000609860009054906101000a90046001600160a01b03166001600160a01b031663706ec2fe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103f9190611d74565b9050611049611461565b6001600160a01b031682600001516001600160a01b03161480611081575061106f611461565b6097546001600160a01b039081169116145b6110f35760405162461bcd60e51b815260206004820152603260248201527f53706c69743a2043616e206f6e6c792062652063616c6c6564206279206f6e6560448201527f206f662074686520726563697069656e7473000000000000000000000000000060648201526084016106a5565b60408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161110b57505060975481519192506001600160a01b031690829060009061115457611154611d8f565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050818160008151811061118c5761118c611d8f565b60200260200101516020019061ffff16908161ffff168152505082816001815181106111ba576111ba611d8f565b60200260200101819052506000806000600184510390505b801561131b5760008482815181106111ec576111ec611d8f565b602002602001015190506000611213826020015161ffff168a61183d90919063ffffffff16565b83516040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015261271090920460248301819052975095870195919250908c169063a9059cbb906044016020604051808303816000875af19250505080156112a9575060408051601f3d908101601f191682019092526112a691810190611dd4565b60015b6112be575060009a9950505050505050505050565b5081600001516001600160a01b03168b6001600160a01b03167fe8de91d538b06154a2c48315768c5046f47e127d7fd3f726fd85cc723f29b0528760405161130891815260200190565b60405180910390a35050600019016111d2565b508086039150876001600160a01b031663a9059cbb8460008151811061134357611343611d8f565b6020908102919091010151516040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af19250505080156113d0575060408051601f3d908101601f191682019092526113cd91810190611dd4565b60015b6113e257506000979650505050505050565b50826000815181106113f6576113f6611d8f565b6020026020010151600001516001600160a01b0316886001600160a01b03167fe8de91d538b06154a2c48315768c5046f47e127d7fd3f726fd85cc723f29b0528460405161144691815260200190565b60405180910390a3506001979650505050505050565b919050565b600061146b611888565b905090565b60006004835110156114845750600061064e565b60005b6004811015611522578281600481106114a2576114a2611d8f565b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106114da576114da611d8f565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461151057600091505061064e565b8061151a81611df6565b915050611487565b5060019392505050565b6060611570838360006040518060400160405280601e81526020017f416464726573733a206c6f772d6c6576656c2063616c6c206661696c656400008152506118d5565b9392505050565b600054610100900460ff166115f45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106a5565b610b336119c9565b609854604080517fce1b815f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ce1b815f9160048083019260209291908290030181865afa15801561165f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116839190611e1e565b6001600160a01b0316826001600160a01b0316149050919050565b6116a6611461565b6001600160a01b03166116c16033546001600160a01b031690565b6001600160a01b031614610b335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106a5565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6097805473ffffffffffffffffffffffffffffffffffffffff19169055600181146117e35760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207265636970656e7473206c656e677468000000000000000060448201526064016106a5565b818160008181106117f6576117f6611d8f565b61180c9260206040909202019081019150611b4b565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790555050565b600080836000036118545750600190506000611881565b8383028385828161186757611867611da5565b041461187a576000809250925050611881565b6001925090505b9250929050565b6000611893336115fc565b80156118a0575060143610155b156118d057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b60608247101561194d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016106a5565b600080866001600160a01b031685876040516119699190611e5f565b60006040518083038185875af1925050503d80600081146119a6576040519150601f19603f3d011682016040523d82523d6000602084013e6119ab565b606091505b50915091506119bc87838387611a56565b925050505b949350505050565b600054610100900460ff16611a465760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016106a5565b610b33611a51611461565b611717565b60608315611ac5578251600003611abe576001600160a01b0385163b611abe5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106a5565b50816119c1565b6119c18383815115611ada5781518083602001fd5b8060405162461bcd60e51b81526004016106a59190611e7b565b600060208284031215611b0657600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461157057600080fd5b6001600160a01b03811681146105b857600080fd5b600060208284031215611b5d57600080fd5b813561157081611b36565b600080600060408486031215611b7d57600080fd5b8335611b8881611b36565b9250602084013567ffffffffffffffff80821115611ba557600080fd5b818601915086601f830112611bb957600080fd5b813581811115611bc857600080fd5b876020828501011115611bda57600080fd5b6020830194508093505050509250925092565b60008060408385031215611c0057600080fd5b8235611c0b81611b36565b91506020830135611c1b81611b36565b809150509250929050565b60008060208385031215611c3957600080fd5b823567ffffffffffffffff80821115611c5157600080fd5b818501915085601f830112611c6557600080fd5b813581811115611c7457600080fd5b8660208260061b8501011115611c8957600080fd5b60209290920196919550909350505050565b602080825282518282018190526000919060409081850190868401855b82811015611cea57815180516001600160a01b0316855286015161ffff16868501529284019290850190600101611cb8565b5091979650505050505050565b805161ffff8116811461145c57600080fd5b600060408284031215611d1b57600080fd5b6040516040810181811067ffffffffffffffff82111715611d4c57634e487b7160e01b600052604160045260246000fd5b6040528251611d5a81611b36565b8152611d6860208401611cf7565b60208201529392505050565b600060208284031215611d8657600080fd5b61157082611cf7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b600060208284031215611dcd57600080fd5b5051919050565b600060208284031215611de657600080fd5b8151801515811461157057600080fd5b60006000198203611e1757634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215611e3057600080fd5b815161157081611b36565b60005b83811015611e56578181015183820152602001611e3e565b50506000910152565b60008251611e71818460208701611e3b565b9190910192915050565b6020815260008251806020840152611e9a816040850160208701611e3b565b601f01601f1916919091016040019291505056fea2646970667358221220e0a6d5b5165e5a2ce9111658444a4f8e39022faa7c3f91cbe6ae0a9f3ef50e1164736f6c63430008120033",
  "devdoc": {
    "author": "The Sandbox",
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "getRecipients()": {
        "returns": {
          "_0": "recipients of royalty through this splitter and their splits of royalty."
        }
      },
      "initialize(address,address)": {
        "details": "can only be run once.",
        "params": {
          "recipient": "the wallet of the creator when the contract is deployed",
          "royaltyManager": "the address of the royalty manager contract"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxyCall(address,bytes)": {
        "details": "first attempts to split ERC20 tokens.",
        "params": {
          "callData": "for the call.",
          "target": "target of the call"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setRecipients((address,uint16)[])": {
        "details": "only the owner can call this.",
        "params": {
          "recipients": "the array of recipients which should only have one recipient."
        }
      },
      "splitERC20Tokens(address)": {
        "details": "can only be called by one of the recipients",
        "params": {
          "erc20Contract": "the address of the tokens to be split."
        }
      },
      "splitETH()": {
        "details": "normally ETH should be split automatically by receive function."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "RoyaltySplitter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getRecipients()": {
        "notice": "to get recipients of royalty through this splitter and their splits of royalty."
      },
      "initialize(address,address)": {
        "notice": "initialize the contract"
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "proxyCall(address,bytes)": {
        "notice": "made for unexpected scenarios when assets are sent to this contact such that they could be recovered."
      },
      "setRecipients((address,uint16)[])": {
        "notice": "sets recipient for the splitter"
      },
      "splitERC20Tokens(address)": {
        "notice": "split ERC20 Tokens owned by this contract."
      },
      "splitETH()": {
        "notice": "Splits and forwards ETH to the royalty receivers"
      }
    },
    "notice": "RoyaltySplitter contract is deployed by the RoyaltyManager contract for a creator to get his royalty's share.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 746,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 749,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3300,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 574,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 694,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4223,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14233,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "_recipient",
        "offset": 0,
        "slot": "151",
        "type": "t_address_payable"
      },
      {
        "astId": 14236,
        "contract": "@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltySplitter.sol:RoyaltySplitter",
        "label": "_royaltyManager",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IRoyaltyManager)15073"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoyaltyManager)15073": {
        "encoding": "inplace",
        "label": "contract IRoyaltyManager",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}