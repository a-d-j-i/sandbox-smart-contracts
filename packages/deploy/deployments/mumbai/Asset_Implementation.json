{
  "address": "0x8d4490Da283630df4229E76ea7EA99401736bD80",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "royaltyBPS",
          "type": "uint16"
        }
      ],
      "name": "DefaultRoyaltyBpsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "DefaultRoyaltyReceiverSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "splitter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "RoyaltyRecipientSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenRoyaltyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "TokenRoyaltySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenRoyaltiesSplitter",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatchFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSplits",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "splits",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCreatorNonce",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRecipients",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct Recipient[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRevealNonce",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTier",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        }
      ],
      "name": "getTokenIdByMetadataHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRoyalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "royaltyBPS",
              "type": "uint16"
            },
            {
              "components": [
                {
                  "internalType": "address payable",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint16",
                  "name": "bps",
                  "type": "uint16"
                }
              ],
              "internalType": "struct Recipient[]",
              "name": "recipients",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IMultiRoyaltyDistributor.TokenRoyaltyConfig[]",
          "name": "royaltyConfigs",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hashUsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "commonSubscription",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isBridged",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subscriptionOrRegistrantToCopy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "subscribe",
          "type": "bool"
        }
      ],
      "name": "registerAndSubscribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "setOperatorRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "setTokenRoyalties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x539baf3f55add1530fafaa9723989aad7ee070c7f9db21d8478bc9dc1499e67a",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x8d4490Da283630df4229E76ea7EA99401736bD80",
    "transactionIndex": 5,
    "gasUsed": "4507969",
    "logsBloom": "0x
    "blockHash": "0x35034de99def5e9bcabe899136b4d4c9225850d6de24d8d9d9963aedd3e78810",
    "transactionHash": "0x539baf3f55add1530fafaa9723989aad7ee070c7f9db21d8478bc9dc1499e67a",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 38730660,
        "transactionHash": "0x539baf3f55add1530fafaa9723989aad7ee070c7f9db21d8478bc9dc1499e67a",
        "address": "0x8d4490Da283630df4229E76ea7EA99401736bD80",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 30,
        "blockHash": "0x35034de99def5e9bcabe899136b4d4c9225850d6de24d8d9d9963aedd3e78810"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 38730660,
        "transactionHash": "0x539baf3f55add1530fafaa9723989aad7ee070c7f9db21d8478bc9dc1499e67a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001805f5fc5aef00000000000000000000000000000000000000000000000011714d9f8732d32f83000000000000000000000000000000000000000000001043e0c00a6cd70d1c6b0000000000000000000000000000000000000000000000117135999136784083000000000000000000000000000000000000000000001043e0d81062d3680b6b",
        "logIndex": 31,
        "blockHash": "0x35034de99def5e9bcabe899136b4d4c9225850d6de24d8d9d9963aedd3e78810"
      }
    ],
    "blockNumber": 38730660,
    "cumulativeGasUsed": "5911637",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e64fd56b3bfae7f817a31de5cae19a1b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"}],\"name\":\"DefaultRoyaltyBpsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"DefaultRoyaltyReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"splitter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RoyaltyRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenRoyaltyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenRoyaltiesSplitter\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSplits\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"splits\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCreatorNonce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRecipients\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct Recipient[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRevealNonce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"}],\"name\":\"getTokenIdByMetadataHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"royaltyBPS\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct Recipient[]\",\"name\":\"recipients\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IMultiRoyaltyDistributor.TokenRoyaltyConfig[]\",\"name\":\"royaltyConfigs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hashUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"commonSubscription\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isBridged\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subscriptionOrRegistrantToCopy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"subscribe\",\"type\":\"bool\"}],\"name\":\"registerAndSubscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"setOperatorRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"setTokenRoyalties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burnBatchFrom(address,uint256[],uint256[])\":{\"details\":\"Only the minter role can burn tokensThis function was added with token recycling and bridging in mind but may have other use casesThe length of the ids and amounts arrays must be the same\",\"params\":{\"account\":\"The account to burn tokens from\",\"amounts\":\"An array of amounts of tokens to burn\",\"ids\":\"An array of token ids to burn\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Only the minter role can burn tokensThis function was added with token recycling and bridging in mind but may have other use cases\",\"params\":{\"account\":\"The account to burn tokens from\",\"amount\":\"The amount of tokens to burn\",\"id\":\"The token id to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getAllSplits()\":{\"returns\":{\"splits\":\"the royalty receiver's array\"}},\"getCreatorAddress(uint256)\":{\"params\":{\"tokenId\":\"The token id to extract the creator address from\"},\"returns\":{\"creator\":\"The asset creator address\"}},\"getCreatorNonce(uint256)\":{\"params\":{\"tokenId\":\"The token id to extract the asset nonce from\"},\"returns\":{\"_0\":\"creatorNonce The asset creator nonce\"}},\"getRecipients(uint256)\":{\"details\":\"returns the default address for tokens with no recipients.\",\"params\":{\"tokenId\":\"is the token id for which the recipient should be returned.\"},\"returns\":{\"_0\":\"addresses of royalty recipient of the token.\"}},\"getRevealNonce(uint256)\":{\"params\":{\"tokenId\":\"The token id to extract reveal nonce from\"},\"returns\":{\"_0\":\"revealNonce The reveal nonce of the asset\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTier(uint256)\":{\"params\":{\"tokenId\":\"The token id to extract the tier from\"},\"returns\":{\"tier\":\"The asset tier, determined by the catalyst used to create it\"}},\"getTokenRoyalties()\":{\"returns\":{\"royaltyConfigs\":\"receivers and their split array as long as the number of tokens.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isBridged(uint256)\":{\"params\":{\"tokenId\":\"The token id to extract the bridged flag from\"},\"returns\":{\"_0\":\"bridged Whether the asset is bridged or not\"}},\"isRevealed(uint256)\":{\"params\":{\"tokenId\":\"The token id to extract the revealed flag from\"},\"returns\":{\"_0\":\"isRevealed Whether the asset is revealed or not\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"mint(address,uint256,uint256,string)\":{\"details\":\"Only callable by the minter role\",\"params\":{\"amount\":\"The amount of the token to mint\",\"id\":\"The id of the token to mint\",\"to\":\"The address of the recipient\"}},\"mintBatch(address,uint256[],uint256[],string[])\":{\"details\":\"Only callable by the minter role\",\"params\":{\"amounts\":\"The amounts of the tokens to mint\",\"ids\":\"The ids of the tokens to mint\",\"to\":\"The address of the recipient\"}},\"registerAndSubscribe(address,bool)\":{\"details\":\"used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\",\"params\":{\"subscribe\":\"bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\",\"subscriptionOrRegistrantToCopy\":\"registration address of the list to subscribe.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"tokenId\":\"of the token for which the royalty is needed to be distributed\",\"value\":\"the amount on which the royalty is calculated\"},\"returns\":{\"_0\":\"address the royalty receiver\",\"_1\":\"value the EIP2981 royalty\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"call data should be optimized to order ids so packedBalance can be used efficiently.\",\"params\":{\"amounts\":\"amount of each token type transfered.\",\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"ids\":\"ids of each token type transfered.\",\"to\":\"address to which the token will be transfered.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"amount of token transfered.\",\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"id\":\"the token type transfered.\",\"to\":\"address to which the token will be transfered.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether to approve or revoke\",\"operator\":\"address which will be granted rights to transfer all tokens of the caller.\"}},\"setBaseURI(string)\":{\"params\":{\"baseURI\":\"The new base URI\"}},\"setOperatorRegistry(address)\":{\"params\":{\"registry\":\"the address of the registry\"}},\"setTokenRoyalties(uint256,address,address)\":{\"params\":{\"creator\":\"the creactor of the tokens.\",\"recipient\":\"the royalty recipient for the splitter of the creator.\",\"tokenId\":\"the id of the token for which the EIP2981 royalty is set for.\"}},\"setTokenURI(uint256,string)\":{\"details\":\"The metadata hash should be the IPFS CIDv1 base32 encoded hash\",\"params\":{\"metadata\":\"The new URI for asset's metadata\",\"tokenId\":\"The token id to set URI for\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"the interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `id`.\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"params\":{\"tokenId\":\"The token id to get URI for\"},\"returns\":{\"_0\":\"tokenURI the URI of the token\"}}},\"version\":1},\"userdoc\":{\"events\":{\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"burnBatchFrom(address,uint256[],uint256[])\":{\"notice\":\"Burn a batch of tokens from a given account\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burn a token from a given account\"},\"getAllSplits()\":{\"notice\":\"returns the EIP-2981 royalty receiver for each token (i.e. splitters) including the default royalty receiver.\"},\"getCreatorAddress(uint256)\":{\"notice\":\"Extracts the creator address from a given token id\"},\"getCreatorNonce(uint256)\":{\"notice\":\"Extracts the asset nonce from a given token id\"},\"getRecipients(uint256)\":{\"notice\":\"returns the royalty recipients for each tokenId.\"},\"getRevealNonce(uint256)\":{\"notice\":\"Extracts the abilities and enhancements hash from a given token id\"},\"getTier(uint256)\":{\"notice\":\"Extracts the tier from a given token id\"},\"getTokenRoyalties()\":{\"notice\":\"Returns royalty receivers and their split of royalty for each token\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"isBridged(uint256)\":{\"notice\":\"Extracts the bridged flag from a given token id\"},\"isRevealed(uint256)\":{\"notice\":\"Extracts the revealed flag from a given token id\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"mint(address,uint256,uint256,string)\":{\"notice\":\"Mint new tokens\"},\"mintBatch(address,uint256[],uint256[],string[])\":{\"notice\":\"Mint new tokens with catalyst tier chosen by the creator\"},\"registerAndSubscribe(address,bool)\":{\"notice\":\"This function is used to register Asset contract on the Operator Filterer Registry of Opensea.can only be called by admin.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"EIP 2981 royalty info function to return the royalty receiver and royalty amount\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all of the caller's tokens.\"},\"setBaseURI(string)\":{\"notice\":\"Set a new base URI\"},\"setOperatorRegistry(address)\":{\"notice\":\"sets filter registry address deployed in test\"},\"setTokenRoyalties(uint256,address,address)\":{\"notice\":\"could be used to deploy splitter and set tokens royalties\"},\"setTokenURI(uint256,string)\":{\"notice\":\"Set a new URI for specific tokenid\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements interface `id`.\"},\"uri(uint256)\":{\"notice\":\"returns full token URI, including baseURI and token metadata URI\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/asset/contracts/Asset.sol\":\"Asset\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nstruct Recipient {\\n    address payable recipient;\\n    uint16 bps;\\n}\\n\\ninterface IRoyaltySplitter is IERC165 {\\n    /**\\n     * @dev Set the splitter recipients. Total bps must total 10000.\\n     */\\n    function setRecipients(Recipient[] calldata recipients) external;\\n\\n    /**\\n     * @dev Get the splitter recipients;\\n     */\\n    function getRecipients() external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0xc507963f66c4238d25e69d2d05ac5995c549aa89789e89e7a556403221547c6d\",\"license\":\"MIT\"},\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * EIP-2981\\n */\\ninterface IEIP2981 {\\n    /**\\n     * bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a\\n     *\\n     * => 0x2a55205a = 0x2a55205a\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 value) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xd5313c1f5939b5a98bc48824082c337a6205d78f6346465fe3c3944de274f6bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc3e465e1fdd0e491688ad75ef1b946e1680e7f9f78bf5beeefd6daed8693c856\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x048a492eee88c80ecc0354486e8e0ab99490b44a6fb28833b3cfb45d573f18d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorageUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155URIStorage_init() internal onlyInitializing {\\n        __ERC1155URIStorage_init_unchained();\\n    }\\n\\n    function __ERC1155URIStorage_init_unchained() internal onlyInitializing {\\n        _baseURI = \\\"\\\";\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x9a1218747a17239e2fcab2efc14099379387f114c7ad22c69a23b7d67ec0eaa2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/Asset.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable,\\n    IAccessControlUpgradeable,\\n    IERC165Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    ERC1155BurnableUpgradeable,\\n    ERC1155Upgradeable,\\n    IERC1155Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport {\\n    ERC1155SupplyUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport {\\n    ERC1155URIStorageUpgradeable,\\n    IERC1155MetadataURIUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {\\n    ERC2771HandlerUpgradeable,\\n    ERC2771HandlerAbstract\\n} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {\\n    MultiRoyaltyDistributor\\n} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/MultiRoyaltyDistributor.sol\\\";\\nimport {\\n    OperatorFiltererUpgradeable,\\n    IOperatorFilterRegistry\\n} from \\\"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\\\";\\nimport {TokenIdUtils} from \\\"./libraries/TokenIdUtils.sol\\\";\\nimport {IAsset} from \\\"./interfaces/IAsset.sol\\\";\\nimport {ITokenUtils, IRoyaltyUGC} from \\\"./interfaces/ITokenUtils.sol\\\";\\n\\ncontract Asset is\\n    IAsset,\\n    Initializable,\\n    ERC2771HandlerUpgradeable,\\n    ERC1155BurnableUpgradeable,\\n    AccessControlUpgradeable,\\n    ERC1155SupplyUpgradeable,\\n    ERC1155URIStorageUpgradeable,\\n    OperatorFiltererUpgradeable,\\n    MultiRoyaltyDistributor,\\n    ITokenUtils\\n{\\n    using TokenIdUtils for uint256;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    bytes32 public constant MODERATOR_ROLE = keccak256(\\\"MODERATOR_ROLE\\\");\\n\\n    // mapping of ipfs metadata token hash to token id\\n    mapping(string => uint256) public hashUsed;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address forwarder,\\n        address assetAdmin,\\n        string memory baseUri,\\n        address commonSubscription,\\n        address _manager\\n    ) external initializer {\\n        _setBaseURI(baseUri);\\n        __AccessControl_init();\\n        __ERC1155Supply_init();\\n        __ERC2771Handler_init(forwarder);\\n        __ERC1155Burnable_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, assetAdmin);\\n        __OperatorFilterer_init(commonSubscription, true);\\n        __MultiRoyaltyDistributor_init(_manager);\\n    }\\n\\n    /// @notice Mint new tokens\\n    /// @dev Only callable by the minter role\\n    /// @param to The address of the recipient\\n    /// @param id The id of the token to mint\\n    /// @param amount The amount of the token to mint\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        string memory metadataHash\\n    ) external onlyRole(MINTER_ROLE) {\\n        _setMetadataHash(id, metadataHash);\\n        _mint(to, id, amount, \\\"\\\");\\n        address creator = id.getCreatorAddress();\\n        _setTokenRoyalties(id, payable(creator), creator);\\n    }\\n\\n    /// @notice Mint new tokens with catalyst tier chosen by the creator\\n    /// @dev Only callable by the minter role\\n    /// @param to The address of the recipient\\n    /// @param ids The ids of the tokens to mint\\n    /// @param amounts The amounts of the tokens to mint\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory metadataHashes\\n    ) external onlyRole(MINTER_ROLE) {\\n        require(ids.length == metadataHashes.length, \\\"Asset: ids and metadataHash length mismatch\\\");\\n        require(ids.length == amounts.length, \\\"Asset: ids and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _setMetadataHash(ids[i], metadataHashes[i]);\\n        }\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n        for (uint256 i; i < ids.length; i++) {\\n            address creator = ids[i].getCreatorAddress();\\n            _setTokenRoyalties(ids[i], payable(creator), creator);\\n        }\\n    }\\n\\n    /// @notice Burn a token from a given account\\n    /// @dev Only the minter role can burn tokens\\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\\n    /// @param account The account to burn tokens from\\n    /// @param id The token id to burn\\n    /// @param amount The amount of tokens to burn\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external onlyRole(BURNER_ROLE) {\\n        _burn(account, id, amount);\\n    }\\n\\n    /// @notice Burn a batch of tokens from a given account\\n    /// @dev Only the minter role can burn tokens\\n    /// @dev This function was added with token recycling and bridging in mind but may have other use cases\\n    /// @dev The length of the ids and amounts arrays must be the same\\n    /// @param account The account to burn tokens from\\n    /// @param ids An array of token ids to burn\\n    /// @param amounts An array of amounts of tokens to burn\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(BURNER_ROLE) {\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    /// @notice Set a new URI for specific tokenid\\n    /// @dev The metadata hash should be the IPFS CIDv1 base32 encoded hash\\n    /// @param tokenId The token id to set URI for\\n    /// @param metadata The new URI for asset's metadata\\n    function setTokenURI(uint256 tokenId, string memory metadata) external onlyRole(MODERATOR_ROLE) {\\n        _setURI(tokenId, metadata);\\n    }\\n\\n    /// @notice Set a new base URI\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string memory baseURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /// @notice returns full token URI, including baseURI and token metadata URI\\n    /// @param tokenId The token id to get URI for\\n    /// @return tokenURI the URI of the token\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return ERC1155URIStorageUpgradeable.uri(tokenId);\\n    }\\n\\n    function getTokenIdByMetadataHash(string memory metadataHash) public view returns (uint256) {\\n        return hashUsed[metadataHash];\\n    }\\n\\n    function _setMetadataHash(uint256 tokenId, string memory metadataHash) internal {\\n        if (hashUsed[metadataHash] != 0) {\\n            require(hashUsed[metadataHash] == tokenId, \\\"Asset: not allowed to reuse metadata hash\\\");\\n        } else {\\n            hashUsed[metadataHash] = tokenId;\\n            _setURI(tokenId, metadataHash);\\n        }\\n    }\\n\\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(trustedForwarder != address(0), \\\"Asset: trusted forwarder can't be zero address\\\");\\n        _setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param id the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 id)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Upgradeable, AccessControlUpgradeable, MultiRoyaltyDistributor)\\n        returns (bool)\\n    {\\n        return id == type(IRoyaltyUGC).interfaceId || super.supportsInterface(id);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerAbstract)\\n        returns (address sender)\\n    {\\n        return ERC2771HandlerAbstract._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerAbstract)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771HandlerAbstract._msgData();\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param amounts amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override onlyAllowedOperator(from) {\\n        super.safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param amount amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override onlyAllowedOperator(from) {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /// @notice could be used to deploy splitter and set tokens royalties\\n    /// @param tokenId the id of the token for which the EIP2981 royalty is set for.\\n    /// @param recipient the royalty recipient for the splitter of the creator.\\n    /// @param creator the creactor of the tokens.\\n    function setTokenRoyalties(\\n        uint256 tokenId,\\n        address payable recipient,\\n        address creator\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setTokenRoyalties(tokenId, recipient, creator);\\n    }\\n\\n    /// @notice Extracts the creator address from a given token id\\n    /// @param tokenId The token id to extract the creator address from\\n    /// @return creator The asset creator address\\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator) {\\n        return TokenIdUtils.getCreatorAddress(tokenId);\\n    }\\n\\n    /// @notice Extracts the tier from a given token id\\n    /// @param tokenId The token id to extract the tier from\\n    /// @return tier The asset tier, determined by the catalyst used to create it\\n    function getTier(uint256 tokenId) external pure returns (uint8 tier) {\\n        return TokenIdUtils.getTier(tokenId);\\n    }\\n\\n    /// @notice Extracts the revealed flag from a given token id\\n    /// @param tokenId The token id to extract the revealed flag from\\n    /// @return isRevealed Whether the asset is revealed or not\\n    function isRevealed(uint256 tokenId) external pure returns (bool) {\\n        return TokenIdUtils.isRevealed(tokenId);\\n    }\\n\\n    /// @notice Extracts the asset nonce from a given token id\\n    /// @param tokenId The token id to extract the asset nonce from\\n    /// @return creatorNonce The asset creator nonce\\n    function getCreatorNonce(uint256 tokenId) external pure returns (uint16) {\\n        return TokenIdUtils.getCreatorNonce(tokenId);\\n    }\\n\\n    /// @notice Extracts the abilities and enhancements hash from a given token id\\n    /// @param tokenId The token id to extract reveal nonce from\\n    /// @return revealNonce The reveal nonce of the asset\\n    function getRevealNonce(uint256 tokenId) external pure returns (uint16) {\\n        return TokenIdUtils.getRevealNonce(tokenId);\\n    }\\n\\n    /// @notice Extracts the bridged flag from a given token id\\n    /// @param tokenId The token id to extract the bridged flag from\\n    /// @return bridged Whether the asset is bridged or not\\n    function isBridged(uint256 tokenId) external pure returns (bool) {\\n        return TokenIdUtils.isBridged(tokenId);\\n    }\\n\\n    /// @notice This function is used to register Asset contract on the Operator Filterer Registry of Opensea.can only be called by admin.\\n    /// @dev used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.\\n    /// @param subscriptionOrRegistrantToCopy registration address of the list to subscribe.\\n    /// @param subscribe bool to signify subscription \\\"true\\\"\\\" or to copy the list \\\"false\\\".\\n    function registerAndSubscribe(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(subscriptionOrRegistrantToCopy != address(0), \\\"Asset: subscription can't be zero address\\\");\\n        _registerAndSubscribe(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    /// @notice sets filter registry address deployed in test\\n    /// @param registry the address of the registry\\n    function setOperatorRegistry(address registry) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(registry != address(0), \\\"Asset: registry can't be zero address\\\");\\n        operatorFilterRegistry = IOperatorFilterRegistry(registry);\\n    }\\n}\\n\",\"keccak256\":\"0x8d6c7e70c363c8e8c69486f78a39a61469e3e116f910560264a43c0f59dd6ad7\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IAsset.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IAsset {\\n    // AssetData reflects the asset tokenId structure\\n    // Refer to TokenIdUtils.sol\\n    struct AssetData {\\n        uint256 tokenId;\\n        address creator;\\n        uint256 amount;\\n        uint8 tier;\\n        uint16 creatorNonce;\\n        bool revealed;\\n        string metadataHash;\\n        bool bridged;\\n    }\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    // Functions\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        string memory metadataHash\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory metadataHashes\\n    ) external;\\n\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function getTokenIdByMetadataHash(string memory metadataHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2abd2e550ced35090c988e432215f990bf8f192cc346ffac6778fde0025a8206\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/ITokenUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {IRoyaltyUGC} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol\\\";\\n\\ninterface ITokenUtils is IRoyaltyUGC {\\n    function getTier(uint256 tokenId) external pure returns (uint8 tier);\\n\\n    function isRevealed(uint256 tokenId) external pure returns (bool);\\n\\n    function getCreatorNonce(uint256 tokenId) external pure returns (uint16);\\n\\n    function getRevealNonce(uint256 tokenId) external pure returns (uint16);\\n\\n    function isBridged(uint256 tokenId) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x04b5c64d755016f18cd8422dda072eae8a5151402631723e2cccedc623b7bb66\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/libraries/TokenIdUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAsset} from \\\"../interfaces/IAsset.sol\\\";\\n\\nlibrary TokenIdUtils {\\n    // Layer masks\\n    uint256 public constant TIER_MASK = 0xFF;\\n    uint256 public constant NONCE_MASK = 0xFFFF;\\n    uint256 public constant REVEAL_NONCE_MASK = 0xFFFF;\\n    uint256 public constant BRIDGED_MASK = 0x1;\\n\\n    // Bit shifts\\n    uint256 public constant CREATOR_SHIFT = 0;\\n    uint256 public constant TIER_SHIFT = 160;\\n    uint256 public constant NONCE_SHIFT = 168;\\n    uint256 public constant REVEAL_NONCE_SHIFT = 184;\\n    uint256 public constant BRIDGED_SHIFT = 200;\\n\\n    /// @notice Generates a token id for a given asset\\n    /// @dev The token id is generated by concatenating the following fields:\\n    /// @dev creator address, chain index, tier, asset nonce, reveal nonce and bridged boolean\\n    /// @dev The first 160 bits are the creator address\\n    /// @dev The next 8 bits are the chain index\\n    /// @dev The next 8 bits are the tier\\n    /// @dev The next 16 bits are the asset nonce\\n    /// @dev The next 16 bits are assets reveal nonce.\\n    /// @param creator The address of the creator of the asset\\n    /// @param tier The tier of the asset determined by the catalyst used to create it\\n    /// @param creatorNonce The nonce of the asset creator\\n    /// @param revealNonce The reveal nonce of the asset\\n    /// @param bridged Whether the asset is bridged or not\\n    /// @return tokenId The generated token id\\n    function generateTokenId(\\n        address creator,\\n        uint8 tier,\\n        uint16 creatorNonce,\\n        uint16 revealNonce,\\n        bool bridged\\n    ) internal pure returns (uint256 tokenId) {\\n        uint160 creatorAddress = uint160(creator);\\n\\n        tokenId = tokenId =\\n            uint256(creatorAddress) |\\n            (uint256(tier) << TIER_SHIFT) |\\n            (uint256(creatorNonce) << NONCE_SHIFT) |\\n            (uint256(revealNonce) << REVEAL_NONCE_SHIFT) |\\n            (uint256(bridged ? 1 : 0) << BRIDGED_SHIFT);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Extracts the creator address from a given token id\\n    /// @param tokenId The token id to extract the creator address from\\n    /// @return creator The asset creator address\\n    function getCreatorAddress(uint256 tokenId) internal pure returns (address creator) {\\n        creator = address(uint160(tokenId));\\n        return creator;\\n    }\\n\\n    /// @notice Extracts the tier from a given token id\\n    /// @param tokenId The token id to extract the tier from\\n    /// @return tier The asset tier, determined by the catalyst used to create it\\n    function getTier(uint256 tokenId) internal pure returns (uint8 tier) {\\n        tier = uint8((tokenId >> TIER_SHIFT) & TIER_MASK);\\n        return tier;\\n    }\\n\\n    /// @notice Extracts the revealed flag from a given token id\\n    /// @param tokenId The token id to extract the revealed flag from\\n    /// @return isRevealed Whether the asset is revealed or not\\n    function isRevealed(uint256 tokenId) internal pure returns (bool) {\\n        uint16 revealNonce = getRevealNonce(tokenId);\\n        return revealNonce != 0;\\n    }\\n\\n    /// @notice Extracts the asset nonce from a given token id\\n    /// @param tokenId The token id to extract the asset nonce from\\n    /// @return creatorNonce The asset creator nonce\\n    function getCreatorNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 creatorNonce = uint16((tokenId >> NONCE_SHIFT) & NONCE_MASK);\\n        return creatorNonce;\\n    }\\n\\n    /// @notice Extracts the abilities and enhancements hash from a given token id\\n    /// @param tokenId The token id to extract reveal nonce from\\n    /// @return revealNonce The reveal nonce of the asset\\n    function getRevealNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 revealNonce = uint16((tokenId >> REVEAL_NONCE_SHIFT) & REVEAL_NONCE_MASK);\\n        return revealNonce;\\n    }\\n\\n    /// @notice Extracts the bridged flag from a given token id\\n    /// @param tokenId The token id to extract the bridged flag from\\n    /// @return bridged Whether the asset is bridged or not\\n    function isBridged(uint256 tokenId) internal pure returns (bool) {\\n        bool bridged = ((tokenId >> BRIDGED_SHIFT) & BRIDGED_MASK) == 1;\\n        return bridged;\\n    }\\n\\n    /// @notice Extracts the asset data from a given token id\\n    /// @dev Created to limit the number of functions that need to be called when revealing an asset\\n    /// @param tokenId The token id to extract the asset data from\\n    function getData(uint256 tokenId) internal pure returns (IAsset.AssetData memory data) {\\n        data.creator = getCreatorAddress(tokenId);\\n        data.tier = getTier(tokenId);\\n        data.revealed = isRevealed(tokenId);\\n        data.creatorNonce = getCreatorNonce(tokenId);\\n        data.bridged = isBridged(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x82f6bb065e85497d5486bcecb162c30df83941262ff5ac3fd8e283e946250839\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"ERC2771HandlerUpgradeable: forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x63e53ca5ec229e51d866b0b8e3c8f36056598d9fbf960bb57b4b9731917af16f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"./interfaces/IOperatorFilterRegistry.sol\\\";\\n\\n///@title OperatorFiltererUpgradeable\\n///@author The SandBox\\n///@notice This contract would subscibe or copy or just to the subscription provided or just register to default subscription list. The operator filter registry's addess could be set using a setter which could be implemented in inherting contract\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) internal onlyInitializing {\\n        operatorFilterRegistry = IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E); // Address of the operator filterer registry\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        _registerAndSubscribe(subscriptionOrRegistrantToCopy, subscribe);\\n    }\\n\\n    function _registerAndSubscribe(address subscriptionOrRegistrantToCopy, bool subscribe) internal {\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xf6ef88f614515540138818e5a41c4765445b8f4650713476b2f0435af61e70eb\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-operator-filter/contracts/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xbb4f80a4688ec5c4057fcf1e93d1683cee27bbc2eb9ba45fe02664057a4a14c6\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/MultiRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {IMultiRoyaltyDistributor, IMultiRoyaltyRecipients} from \\\"./interfaces/IMultiRoyaltyDistributor.sol\\\";\\nimport {\\n    IRoyaltySplitter,\\n    IERC165\\n} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\nimport {IEIP2981} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/specs/IEIP2981.sol\\\";\\nimport {IRoyaltyManager, Recipient} from \\\"./interfaces/IRoyaltyManager.sol\\\";\\n\\n/// @title MultiRoyaltyDistributer\\n/// @author The Sandbox\\n/// @dev  The MultiRoyaltyDistributer contract implements the ERC-2981 and ERC-165 interfaces for a royalty payment system. This payment system can be used to pay royalties to multiple recipients through splitters.\\n/// @dev  This contract calls to the Royalties manager contract to deploy RoyaltySplitter for a creator to slip its royalty between the creator and Sandbox and use it for every token minted by that creator.\\nabstract contract MultiRoyaltyDistributor is IEIP2981, IMultiRoyaltyDistributor, ERC165Upgradeable {\\n    uint16 internal constant TOTAL_BASIS_POINTS = 10000;\\n    address public royaltyManager;\\n\\n    mapping(uint256 => address payable) public _tokenRoyaltiesSplitter;\\n    uint256[] private _tokensWithRoyalties;\\n\\n    function __MultiRoyaltyDistributor_init(address _royaltyManager) internal {\\n        royaltyManager = _royaltyManager;\\n    }\\n\\n    /// @notice EIP 165 interface function\\n    /// @dev used to check the interface implemented\\n    /// @param interfaceId to be checked for implementation\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IEIP2981).interfaceId ||\\n            interfaceId == type(IMultiRoyaltyDistributor).interfaceId ||\\n            interfaceId == type(IMultiRoyaltyRecipients).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice sets token royalty\\n    /// @dev deploys a splitter if a creator doesn't have one\\n    /// @param tokenId id of token\\n    /// @param creator of the token\\n    function _setTokenRoyalties(\\n        uint256 tokenId,\\n        address payable recipient,\\n        address creator\\n    ) internal {\\n        address payable creatorSplitterAddress = IRoyaltyManager(royaltyManager).deploySplitter(creator, recipient);\\n        _tokenRoyaltiesSplitter[tokenId] = creatorSplitterAddress;\\n        _tokensWithRoyalties.push(tokenId);\\n        emit TokenRoyaltySet(tokenId, recipient);\\n    }\\n\\n    /// @notice Returns royalty receivers and their split of royalty for each token\\n    /// @return royaltyConfigs receivers and their split array as long as the number of tokens.\\n    function getTokenRoyalties() external view override returns (TokenRoyaltyConfig[] memory royaltyConfigs) {\\n        royaltyConfigs = new TokenRoyaltyConfig[](_tokensWithRoyalties.length);\\n        for (uint256 i; i < _tokensWithRoyalties.length; ++i) {\\n            TokenRoyaltyConfig memory royaltyConfig;\\n            uint256 tokenId = _tokensWithRoyalties[i];\\n            address splitterAddress = _tokenRoyaltiesSplitter[tokenId];\\n            if (splitterAddress != address(0)) {\\n                royaltyConfig.recipients = IRoyaltySplitter(splitterAddress).getRecipients();\\n            }\\n            royaltyConfig.tokenId = tokenId;\\n            royaltyConfigs[i] = royaltyConfig;\\n        }\\n    }\\n\\n    /// @notice EIP 2981 royalty info function to return the royalty receiver and royalty amount\\n    /// @param tokenId of the token for which the royalty is needed to be distributed\\n    /// @param value the amount on which the royalty is calculated\\n    /// @return address the royalty receiver\\n    /// @return value the EIP2981 royalty\\n    function royaltyInfo(uint256 tokenId, uint256 value) public view override returns (address, uint256) {\\n        (address payable _defaultRoyaltyReceiver, uint16 _defaultRoyaltyBPS) =\\n            IRoyaltyManager(royaltyManager).getRoyaltyInfo();\\n        if (_tokenRoyaltiesSplitter[tokenId] != address(0)) {\\n            return (_tokenRoyaltiesSplitter[tokenId], (value * _defaultRoyaltyBPS) / TOTAL_BASIS_POINTS);\\n        }\\n        if (_defaultRoyaltyReceiver != address(0) && _defaultRoyaltyBPS != 0) {\\n            return (_defaultRoyaltyReceiver, (value * _defaultRoyaltyBPS) / TOTAL_BASIS_POINTS);\\n        }\\n        return (address(0), 0);\\n    }\\n\\n    /// @notice returns the EIP-2981 royalty receiver for each token (i.e. splitters) including the default royalty receiver.\\n    /// @return splits the royalty receiver's array\\n    function getAllSplits() external view override returns (address payable[] memory splits) {\\n        uint256 startingIndex;\\n        uint256 endingIndex = _tokensWithRoyalties.length;\\n        (address payable _defaultRoyaltyReceiver, ) = IRoyaltyManager(royaltyManager).getRoyaltyInfo();\\n        if (_defaultRoyaltyReceiver != address(0)) {\\n            splits = new address payable[](1 + _tokensWithRoyalties.length);\\n            splits[0] = _defaultRoyaltyReceiver;\\n            startingIndex = 1;\\n            ++endingIndex;\\n        } else {\\n            // unreachable in practice\\n            splits = new address payable[](_tokensWithRoyalties.length);\\n        }\\n        for (uint256 i = startingIndex; i < endingIndex; ++i) {\\n            splits[i] = _tokenRoyaltiesSplitter[_tokensWithRoyalties[i - startingIndex]];\\n        }\\n    }\\n\\n    /// @notice returns the royalty recipients for each tokenId.\\n    /// @dev returns the default address for tokens with no recipients.\\n    /// @param tokenId is the token id for which the recipient should be returned.\\n    /// @return addresses of royalty recipient of the token.\\n    function getRecipients(uint256 tokenId) public view returns (Recipient[] memory) {\\n        address payable splitterAddress = _tokenRoyaltiesSplitter[tokenId];\\n        (address payable _defaultRoyaltyReceiver, ) = IRoyaltyManager(royaltyManager).getRoyaltyInfo();\\n        if (splitterAddress != address(0)) {\\n            return IRoyaltySplitter(splitterAddress).getRecipients();\\n        }\\n        Recipient[] memory defaultRecipient = new Recipient[](1);\\n        defaultRecipient[0] = Recipient({recipient: _defaultRoyaltyReceiver, bps: TOTAL_BASIS_POINTS});\\n        return defaultRecipient;\\n    }\\n}\\n\",\"keccak256\":\"0x59272aee3bab952e4af9b5c28ce60cda251e2c08582795e4fc7321e643b92205\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IMultiRoyaltyRecipients} from \\\"./IMultiRoyaltyRecipients.sol\\\";\\nimport {\\n    IRoyaltySplitter,\\n    Recipient\\n} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\n/**\\n * Multi-receiver EIP2981 reference override implementation\\n */\\ninterface IMultiRoyaltyDistributor is IERC165, IMultiRoyaltyRecipients {\\n    event TokenRoyaltyRemoved(uint256 tokenId);\\n    event TokenRoyaltySet(uint256 tokenId, address recipient);\\n    event DefaultRoyaltyBpsSet(uint16 royaltyBPS);\\n\\n    event DefaultRoyaltyReceiverSet(address recipient);\\n\\n    event RoyaltyRecipientSet(address splitter, address recipient);\\n\\n    struct TokenRoyaltyConfig {\\n        uint256 tokenId;\\n        uint16 royaltyBPS;\\n        Recipient[] recipients;\\n    }\\n\\n    /**\\n     * @dev Set per token royalties.  Passing a recipient of address(0) will delete any existing configuration\\n     */\\n    function setTokenRoyalties(\\n        uint256 tokenId,\\n        address payable recipient,\\n        address creator\\n    ) external;\\n\\n    /**\\n     * @dev Get all token royalty configurations\\n     */\\n    function getTokenRoyalties() external view returns (TokenRoyaltyConfig[] memory);\\n\\n    /**\\n     * @dev Helper function to get all splits contracts\\n     */\\n    function getAllSplits() external view returns (address payable[] memory);\\n}\\n\",\"keccak256\":\"0x8b3ef711d6cb368d65ac7c6c5b617cab63b918ef474da891527f7e176c480f9f\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IMultiRoyaltyRecipients.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\n/**\\n * Multi-receiver EIP2981 reference override implementation\\n */\\ninterface IMultiRoyaltyRecipients is IERC165 {\\n    /**\\n     * @dev Helper function to get all recipients\\n     */\\n    function getRecipients(uint256 tokenId) external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0x06f13c04f2840fdec87edbb15f4805977f8d18562e942cad023fe65685369ebf\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\ninterface IRoyaltyManager {\\n    event RecipientSet(address commonRecipient);\\n\\n    event SplitSet(uint16 commonSplit);\\n\\n    event RoyaltySet(uint16 royaltyBps, address contractAddress);\\n\\n    function setRecipient(address payable _commonRecipient) external;\\n\\n    function setSplit(uint16 commonSplit) external;\\n\\n    function getCommonRecipient() external view returns (Recipient memory recipient);\\n\\n    function getCreatorSplit() external view returns (uint16);\\n\\n    function getRoyaltyInfo() external view returns (address payable, uint16);\\n\\n    function deploySplitter(address creator, address payable recipient) external returns (address payable);\\n\\n    function getCreatorRoyaltySplitter(address creator) external view returns (address payable);\\n\\n    function getContractRoyalty(address _contractAddress) external view returns (uint16 royaltyBps);\\n\\n    function setTrustedForwarder(address _newForwarder) external;\\n\\n    function getTrustedForwarder() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5193f7ce9bce4ac3facefdaa6172e0a0b8868356ca232d33cfb70a24e7b84cc2\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyUGC.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyUGC {\\n    function getCreatorAddress(uint256 tokenId) external pure returns (address creator);\\n}\\n\",\"keccak256\":\"0xa43870e62369bafb23450ad5e3948906ee832adcc5b8f1812c802533ea6f32a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61505780620000f36000396000f3fe608060405234801561001057600080fd5b506004361061032a5760003560e01c806381de2dc2116101b2578063bb7fde71116100f9578063da742228116100a2578063f242432a1161007c578063f242432a14610809578063f5298aca1461081c578063fd90e8971461082f578063fdda1d0e1461084f57600080fd5b8063da742228146107a6578063e985e9c5146107b9578063ee295d62146107f557600080fd5b8063ce1b815f116100d3578063ce1b815f14610755578063d53913931461076c578063d547741f1461079357600080fd5b8063bb7fde711461070c578063bd85b0391461071f578063befa66451461074057600080fd5b8063a22cb4651161015b578063abe3960311610135578063abe39603146106b9578063ac4a0fb6146106e5578063b0ccc31e146106f857600080fd5b8063a22cb46514610680578063a30b4db914610693578063a55784ef146106a657600080fd5b806397905c1e1161018c57806397905c1e146106505780639d28fb8614610665578063a217fddf1461067857600080fd5b806381de2dc2146105f157806391d1485414610604578063933f39581461063d57600080fd5b806336568abe1161027657806355f804b31161021f5780636b566cb2116101f95780636b566cb214610575578063791459ea146105b7578063797669c9146105ca57600080fd5b806355f804b31461053c578063572b6c051461054f5780636b20c4541461056257600080fd5b80634f124995116102505780634f124995146104f35780634f558e79146105065780635055fbc31461052957600080fd5b806336568abe1461049b5780634e1273f4146104ae5780634f062c5a146104ce57600080fd5b8063248a9ca3116102d85780632a55205a116102b25780632a55205a146104435780632eb2c2d6146104755780632f2ff15d1461048857600080fd5b8063248a9ca3146103d3578063282c51f3146103f65780632a41a3551461041d57600080fd5b8063124d91e511610309578063124d91e514610398578063162094c4146103ad57806320820ec3146103c057600080fd5b8062fdd58e1461032f57806301ffc9a7146103555780630e89341c14610378575b600080fd5b61034261033d366004614000565b610862565b6040519081526020015b60405180910390f35b610368610363366004614042565b610910565b604051901515815260200161034c565b61038b61038636600461405f565b61094e565b60405161034c91906140c8565b6103ab6103a63660046140db565b610959565b005b6103ab6103bb3660046141ed565b610994565b6103ab6103ce3660046142c9565b6109cd565b6103426103e136600461405f565b600090815260fa602052604090206001015490565b6103427f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61043061042b36600461405f565b610a02565b60405161ffff909116815260200161034c565b61045661045136600461433f565b610a12565b604080516001600160a01b03909316835260208301919091520161034c565b6103ab610483366004614361565b610b34565b6103ab61049636600461440f565b610c3f565b6103ab6104a936600461440f565b610c64565b6104c16104bc36600461443f565b610d00565b60405161034c919061453d565b6104e16104dc36600461405f565b610e3e565b60405160ff909116815260200161034c565b6103ab610501366004614550565b610e4d565b61036861051436600461405f565b600090815261012c6020526040902054151590565b61036861053736600461405f565b610e63565b6103ab61054a366004614592565b610e6e565b61036861055d3660046145c7565b610e82565b6103ab6105703660046142c9565b610e9f565b61059f61058336600461405f565b610192602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161034c565b6103ab6105c53660046145f2565b610f3b565b6103427f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f81565b6104306105ff36600461405f565b610fcc565b61036861061236600461440f565b600091825260fa602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61036861064b36600461405f565b610fdc565b610658610fed565b60405161034c9190614668565b6103ab6106733660046145c7565b611173565b610342600081565b6103ab61068e3660046145f2565b611213565b61059f6106a136600461405f565b6112fb565b6103ab6106b4366004614709565b611303565b6103426106c7366004614592565b80516020818301810180516101948252928201919093012091525481565b6103ab6106f3366004614821565b6114f8565b6101905461059f906001600160a01b031681565b6103ab61071a3660046148ab565b61167d565b61034261072d36600461405f565b600090815261012c602052604090205490565b6107486116d8565b60405161034c919061490e565b6000546201000090046001600160a01b031661059f565b6103427f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6103ab6107a136600461440f565b6118f2565b6103ab6107b43660046145c7565b611917565b6103686107c736600461495b565b6001600160a01b03918216600090815260976020908152604080832093909416825291909152205460ff1690565b6101915461059f906001600160a01b031681565b6103ab610817366004614989565b6119a7565b6103ab61082a3660046140db565b611bc7565b61084261083d36600461405f565b611c63565b60405161034c91906149f2565b61034261085d366004614592565b611e08565b60006001600160a01b0383166108e55760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526096602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167fa30b4db900000000000000000000000000000000000000000000000000000000148061090a575061090a82611e31565b606061090a82611ed7565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84861098381611fb9565b61098e848484611fcd565b50505050565b7f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f6109be81611fb9565b6109c883836121a4565b505050565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486109f781611fb9565b61098e848484612202565b600061090a8260b81c61ffff1690565b60008060008061019160009054906101000a90046001600160a01b03166001600160a01b031663a86a28d16040518163ffffffff1660e01b81526004016040805180830381865afa158015610a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8f9190614a1c565b6000888152610192602052604090205491935091506001600160a01b031615610af157600086815261019260205260409020546001600160a01b0316612710610adc61ffff841688614a67565b610ae69190614a7e565b935093505050610b2d565b6001600160a01b03821615801590610b0c575061ffff811615155b15610b235781612710610adc61ffff841688614a67565b6000809350935050505b9250929050565b6101905485906001600160a01b03163b15610c2a57336001600160a01b03821603610b6b57610b668686868686612494565b610c37565b61019054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190614aa0565b610c2a5760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016108dc565b610c378686868686612494565b505050505050565b600082815260fa6020526040902060010154610c5a81611fb9565b6109c88383612539565b610c6c6125dc565b6001600160a01b0316816001600160a01b031614610cf25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108dc565b610cfc82826125eb565b5050565b60608151835114610d795760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016108dc565b6000835167ffffffffffffffff811115610d9557610d95614110565b604051908082528060200260200182016040528015610dbe578160200160208202803683370190505b50905060005b8451811015610e3657610e09858281518110610de257610de2614abd565b6020026020010151858381518110610dfc57610dfc614abd565b6020026020010151610862565b828281518110610e1b57610e1b614abd565b6020908102919091010152610e2f81614ad3565b9050610dc4565b509392505050565b600061090a8260a01c60ff1690565b6000610e5881611fb9565b61098e84848461268c565b600061090a826127de565b6000610e7981611fb9565b610cfc826127fc565b600080546001600160a01b0383811662010000909204161461090a565b610ea76125dc565b6001600160a01b0316836001600160a01b03161480610ecd5750610ecd836107c76125dc565b610f305760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b6109c8838383612202565b6000610f4681611fb9565b6001600160a01b038316610fc25760405162461bcd60e51b815260206004820152602960248201527f41737365743a20737562736372697074696f6e2063616e2774206265207a657260448201527f6f2061646472657373000000000000000000000000000000000000000000000060648201526084016108dc565b6109c88383612809565b600061090a8260a81c61ffff1690565b6000600160c883901c81161461090a565b6101935460609067ffffffffffffffff81111561100c5761100c614110565b60405190808252806020026020018201604052801561105957816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908161102a5790505b50905060005b6101935481101561116f57604080516060808201835260008083526020830152918101919091526000610193838154811061109c5761109c614abd565b60009182526020808320909101548083526101929091526040909120549091506001600160a01b0316801561113757806001600160a01b031663d78d610b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611109573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111319190810190614aed565b60408401525b8183528451839086908690811061115057611150614abd565b60200260200101819052505050508061116890614ad3565b905061105f565b5090565b600061117e81611fb9565b6001600160a01b0382166111e25760405162461bcd60e51b815260206004820152602560248201527f41737365743a2072656769737472792063616e2774206265207a65726f206164604482015264647265737360d81b60648201526084016108dc565b50610190805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6101905482906001600160a01b03163b156112e95761019054604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190614aa0565b6112e95760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016108dc565b6109c86112f46125dc565b84846129d5565b60008161090a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661132d81611fb9565b81518451146113a45760405162461bcd60e51b815260206004820152602b60248201527f41737365743a2069647320616e64206d6574616461746148617368206c656e6760448201527f7468206d69736d6174636800000000000000000000000000000000000000000060648201526084016108dc565b825184511461141b5760405162461bcd60e51b815260206004820152602660248201527f41737365743a2069647320616e6420616d6f756e7473206c656e677468206d6960448201527f736d61746368000000000000000000000000000000000000000000000000000060648201526084016108dc565b60005b84518110156114755761146385828151811061143c5761143c614abd565b602002602001015184838151811061145657611456614abd565b6020026020010151612ac9565b8061146d81614ad3565b91505061141e565b5061149185858560405180602001604052806000815250612bb0565b60005b8451811015610c375760006114bf8683815181106114b4576114b4614abd565b602002602001015190565b90506114e58683815181106114d6576114d6614abd565b6020026020010151828361268c565b50806114f081614ad3565b915050611494565b600054610100900460ff16158080156115185750600054600160ff909116105b806115325750303b158015611532575060005460ff166001145b6115a45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108dc565b6000805460ff1916600117905580156115c7576000805461ff0019166101001790555b6115d0846127fc565b6115d8612dad565b6115e0612dad565b6115e986612e1a565b6115f1612dad565b6115fc600086612539565b611607836001612e8e565b610191805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015610c37576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66116a781611fb9565b6116b18483612ac9565b6116cc85858560405180602001604052806000815250612f31565b83610c3781808061268c565b6101935461019154604080517fa86a28d10000000000000000000000000000000000000000000000000000000081528151606094600094909385936001600160a01b039092169263a86a28d19260048082019392918290030181865afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190614a1c565b5090506001600160a01b0381161561180f576101935461178b906001614bc0565b67ffffffffffffffff8111156117a3576117a3614110565b6040519080825280602002602001820160405280156117cc578160200160208202803683370190505b50935080846000815181106117e3576117e3614abd565b6001600160a01b03909216602092830291909101909101526001925061180882614ad3565b9150611858565b6101935467ffffffffffffffff81111561182b5761182b614110565b604051908082528060200260200182016040528015611854578160200160208202803683370190505b5093505b825b828110156118eb5761019260006101936118748785614bd3565b8154811061188457611884614abd565b9060005260206000200154815260200190815260200160002060009054906101000a90046001600160a01b03168582815181106118c3576118c3614abd565b6001600160a01b03909216602092830291909101909101526118e481614ad3565b905061185a565b5050505090565b600082815260fa602052604090206001015461190d81611fb9565b6109c883836125eb565b600061192281611fb9565b6001600160a01b03821661199e5760405162461bcd60e51b815260206004820152602e60248201527f41737365743a207472757374656420666f727761726465722063616e2774206260448201527f65207a65726f206164647265737300000000000000000000000000000000000060648201526084016108dc565b610cfc82613074565b6101905485906001600160a01b03163b15611b2957336001600160a01b03821603611a6a576119d46125dc565b6001600160a01b0316866001600160a01b031614806119fa57506119fa866107c76125dc565b611a5d5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b610b668686868686613189565b61019054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190614aa0565b611b295760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016108dc565b611b316125dc565b6001600160a01b0316866001600160a01b03161480611b575750611b57866107c76125dc565b611bba5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b610c378686868686613189565b611bcf6125dc565b6001600160a01b0316836001600160a01b03161480611bf55750611bf5836107c76125dc565b611c585760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b6109c8838383611fcd565b60008181526101926020526040808220546101915482517fa86a28d100000000000000000000000000000000000000000000000000000000815283516060956001600160a01b039485169590949093169263a86a28d192600480820193918290030181865afa158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190614a1c565b5090506001600160a01b03821615611d7e57816001600160a01b031663d78d610b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d769190810190614aed565b949350505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611d955790505090506040518060400160405280836001600160a01b0316815260200161271061ffff1681525081600081518110611df557611df5614abd565b6020908102919091010152949350505050565b600061019482604051611e1b9190614be6565b9081526020016040518091039020549050919050565b60006001600160e01b031982167f2a55205a000000000000000000000000000000000000000000000000000000001480611e9457506001600160e01b031982167f667873ce00000000000000000000000000000000000000000000000000000000145b80611ec857506001600160e01b031982167ffd90e89700000000000000000000000000000000000000000000000000000000145b8061090a575061090a82613364565b600081815261015f6020526040812080546060929190611ef690614c02565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2290614c02565b8015611f6f5780601f10611f4457610100808354040283529160200191611f6f565b820191906000526020600020905b815481529060010190602001808311611f5257829003601f168201915b505050505090506000815111611f8d57611f88836133a2565b611fb2565b61015e81604051602001611fa2929190614c3c565b6040516020818303038152906040525b9392505050565b611fca81611fc56125dc565b613436565b50565b6001600160a01b0383166120495760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b60006120536125dc565b90506000612060846134ab565b9050600061206d846134ab565b905061208d838760008585604051806020016040528060008152506134f6565b60008581526096602090815260408083206001600160a01b038a168452909152902054848110156121255760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016108dc565b60008681526096602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b600082815261015f602052604090206121bd8282614d09565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6121e98461094e565b6040516121f691906140c8565b60405180910390a25050565b6001600160a01b03831661227e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b80518251146122e05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108dc565b60006122ea6125dc565b905061230a818560008686604051806020016040528060008152506134f6565b60005b835181101561242757600084828151811061232a5761232a614abd565b60200260200101519050600084838151811061234857612348614abd565b60209081029190910181015160008481526096835260408082206001600160a01b038c1683529093529190912054909150818110156123ee5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016108dc565b60009283526096602090815260408085206001600160a01b038b168652909152909220910390558061241f81614ad3565b91505061230d565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612478929190614dc9565b60405180910390a460408051602081019091526000905261098e565b61249c6125dc565b6001600160a01b0316856001600160a01b031614806124c257506124c2856107c76125dc565b6125255760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b6125328585858585613504565b5050505050565b600082815260fa602090815260408083206001600160a01b038516845290915290205460ff16610cfc57600082815260fa602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125986125dc565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006125e6613789565b905090565b600082815260fa602090815260408083206001600160a01b038516845290915290205460ff1615610cfc57600082815260fa602090815260408083206001600160a01b03851684529091529020805460ff191690556126486125dc565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b610191546040517ff06040b40000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301528481166024830152600092169063f06040b4906044016020604051808303816000875af11580156126fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271f9190614df7565b6000858152610192602052604080822080546001600160a01b03851673ffffffffffffffffffffffffffffffffffffffff19909116179055610193805460018101825592527ffc8af01f449989052b52093a58fc9f42d0b11f0c6dd5dca0463dab62346ccc68909101869055519091507f5fe98ba0109a6edc7f59e8c943b6a42a0d8508aebe2e37c874eca88f747bb077906127d090869086909182526001600160a01b0316602082015260400190565b60405180910390a150505050565b6000806127ef8360b81c61ffff1690565b61ffff1615159392505050565b61015e610cfc8282614d09565b610190546001600160a01b03163b15610cfc57610190546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a547906024016020604051808303816000875af1158015612880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a49190614aa0565b610cfc57801561292a57610190546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b15801561291657600080fd5b505af1158015610c37573d6000803e3d6000fd5b6001600160a01b0382161561298b57610190546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af2903906044016128fc565b610190546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e486906024016128fc565b816001600160a01b0316836001600160a01b031603612a5c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016108dc565b6001600160a01b03838116600081815260976020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61019481604051612ada9190614be6565b908152602001604051809103902054600014612b84578161019482604051612b029190614be6565b90815260200160405180910390205414610cfc5760405162461bcd60e51b815260206004820152602960248201527f41737365743a206e6f7420616c6c6f77656420746f207265757365206d65746160448201527f646174612068617368000000000000000000000000000000000000000000000060648201526084016108dc565b8161019482604051612b969190614be6565b90815260405190819003602001902055610cfc82826121a4565b6001600160a01b038416612c2c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b8151835114612c8e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108dc565b6000612c986125dc565b9050612ca9816000878787876134f6565b60005b8451811015612d4557838181518110612cc757612cc7614abd565b602002602001015160966000878481518110612ce557612ce5614abd565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612d2d9190614bc0565b90915550819050612d3d81614ad3565b915050612cac565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612d96929190614dc9565b60405180910390a4612532816000878787876137e1565b600054610100900460ff16612e185760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b565b600054610100900460ff16612e855760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b611fca816139cd565b600054610100900460ff16612ef95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b610190805473ffffffffffffffffffffffffffffffffffffffff19166daaeb6d7670e522a718067333cd4e179055610cfc8282612809565b6001600160a01b038416612fad5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b6000612fb76125dc565b90506000612fc4856134ab565b90506000612fd1856134ab565b9050612fe2836000898585896134f6565b60008681526096602090815260408083206001600160a01b038b16845290915281208054879290613014908490614bc0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461219b83600089898989613a41565b6000546001600160a01b03620100009091048116908216036130fe5760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c7265616479207365740000000000000000000000000000000060648201526084016108dc565b6131066125dc565b600080546040516001600160a01b0393841693858116936201000090930416917f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e591a4600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6001600160a01b0384166131ed5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016108dc565b60006131f76125dc565b90506000613204856134ab565b90506000613211856134ab565b90506132218389898585896134f6565b60008681526096602090815260408083206001600160a01b038c168452909152902054858110156132ba5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016108dc565b60008781526096602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906132f9908490614bc0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613359848a8a8a8a8a613a41565b505050505050505050565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061090a575061090a82613b84565b6060609880546133b190614c02565b80601f01602080910402602001604051908101604052809291908181526020018280546133dd90614c02565b801561342a5780601f106133ff5761010080835404028352916020019161342a565b820191906000526020600020905b81548152906001019060200180831161340d57829003601f168201915b50505050509050919050565b600082815260fa602090815260408083206001600160a01b038516845290915290205460ff16610cfc5761346981613c1f565b613474836020613c31565b604051602001613485929190614e14565b60408051601f198184030181529082905262461bcd60e51b82526108dc916004016140c8565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106134e5576134e5614abd565b602090810291909101015292915050565b610c37868686868686613e5a565b81518351146135665760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108dc565b6001600160a01b0384166135ca5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016108dc565b60006135d46125dc565b90506135e48187878787876134f6565b60005b845181101561372357600085828151811061360457613604614abd565b60200260200101519050600085838151811061362257613622614abd565b60209081029190910181015160008481526096835260408082206001600160a01b038e1683529093529190912054909150818110156136c95760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016108dc565b60008381526096602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290613708908490614bc0565b925050819055505050508061371c90614ad3565b90506135e7565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613773929190614dc9565b60405180910390a4610c378187878787876137e1565b600080546201000090046001600160a01b0316331480156137ab575060143610155b156137db57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b50335b90565b6001600160a01b0384163b15610c37576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c819061383e9089908990889088908890600401614e95565b6020604051808303816000875af1925050508015613879575060408051601f3d908101601f1916820190925261387691810190614ee7565b60015b61392e57613885614f04565b806308c379a0036138be5750613899614f1f565b806138a457506138c0565b8060405162461bcd60e51b81526004016108dc91906140c8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016108dc565b6001600160e01b031981167fbc197c81000000000000000000000000000000000000000000000000000000001461219b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016108dc565b600054610100900460ff16613a385760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b611fca81613074565b6001600160a01b0384163b15610c37576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190613a9e9089908990889088908890600401614fc7565b6020604051808303816000875af1925050508015613ad9575060408051601f3d908101601f19168201909252613ad691810190614ee7565b60015b613ae557613885614f04565b6001600160e01b031981167ff23a6e61000000000000000000000000000000000000000000000000000000001461219b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016108dc565b60006001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480613be757506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061090a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461090a565b606061090a6001600160a01b03831660145b60606000613c40836002614a67565b613c4b906002614bc0565b67ffffffffffffffff811115613c6357613c63614110565b6040519080825280601f01601f191660200182016040528015613c8d576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613cc457613cc4614abd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613d2757613d27614abd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613d63846002614a67565b613d6e906001614bc0565b90505b6001811115613e0b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613daf57613daf614abd565b1a60f81b828281518110613dc557613dc5614abd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613e048161500a565b9050613d71565b508315611fb25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108dc565b6001600160a01b038516613ee25760005b8351811015613ee057828181518110613e8657613e86614abd565b602002602001015161012c6000868481518110613ea557613ea5614abd565b602002602001015181526020019081526020016000206000828254613eca9190614bc0565b90915550613ed9905081614ad3565b9050613e6b565b505b6001600160a01b038416610c375760005b835181101561219b576000848281518110613f1057613f10614abd565b602002602001015190506000848381518110613f2e57613f2e614abd565b60200260200101519050600061012c600084815260200190815260200160002054905081811015613fc75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c7900000000000000000000000000000000000000000000000060648201526084016108dc565b600092835261012c602052604090922091039055613fe481614ad3565b9050613ef3565b6001600160a01b0381168114611fca57600080fd5b6000806040838503121561401357600080fd5b823561401e81613feb565b946020939093013593505050565b6001600160e01b031981168114611fca57600080fd5b60006020828403121561405457600080fd5b8135611fb28161402c565b60006020828403121561407157600080fd5b5035919050565b60005b8381101561409357818101518382015260200161407b565b50506000910152565b600081518084526140b4816020860160208601614078565b601f01601f19169290920160200192915050565b602081526000611fb2602083018461409c565b6000806000606084860312156140f057600080fd5b83356140fb81613feb565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b6040810181811067ffffffffffffffff8211171561414657614146614110565b60405250565b601f19601f830116810181811067ffffffffffffffff8211171561417257614172614110565b6040525050565b600082601f83011261418a57600080fd5b813567ffffffffffffffff8111156141a4576141a4614110565b6040516141bb6020601f19601f850116018261414c565b8181528460208386010111156141d057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561420057600080fd5b82359150602083013567ffffffffffffffff81111561421e57600080fd5b61422a85828601614179565b9150509250929050565b600067ffffffffffffffff82111561424e5761424e614110565b5060051b60200190565b600082601f83011261426957600080fd5b8135602061427682614234565b604051614283828261414c565b83815260059390931b85018201928281019150868411156142a357600080fd5b8286015b848110156142be57803583529183019183016142a7565b509695505050505050565b6000806000606084860312156142de57600080fd5b83356142e981613feb565b9250602084013567ffffffffffffffff8082111561430657600080fd5b61431287838801614258565b9350604086013591508082111561432857600080fd5b5061433586828701614258565b9150509250925092565b6000806040838503121561435257600080fd5b50508035926020909101359150565b600080600080600060a0868803121561437957600080fd5b853561438481613feb565b9450602086013561439481613feb565b9350604086013567ffffffffffffffff808211156143b157600080fd5b6143bd89838a01614258565b945060608801359150808211156143d357600080fd5b6143df89838a01614258565b935060808801359150808211156143f557600080fd5b5061440288828901614179565b9150509295509295909350565b6000806040838503121561442257600080fd5b82359150602083013561443481613feb565b809150509250929050565b6000806040838503121561445257600080fd5b823567ffffffffffffffff8082111561446a57600080fd5b818501915085601f83011261447e57600080fd5b8135602061448b82614234565b604051614498828261414c565b83815260059390931b85018201928281019150898411156144b857600080fd5b948201945b838610156144df5785356144d081613feb565b825294820194908201906144bd565b965050860135925050808211156144f557600080fd5b5061422a85828601614258565b600081518084526020808501945080840160005b8381101561453257815187529582019590820190600101614516565b509495945050505050565b602081526000611fb26020830184614502565b60008060006060848603121561456557600080fd5b83359250602084013561457781613feb565b9150604084013561458781613feb565b809150509250925092565b6000602082840312156145a457600080fd5b813567ffffffffffffffff8111156145bb57600080fd5b611d7684828501614179565b6000602082840312156145d957600080fd5b8135611fb281613feb565b8015158114611fca57600080fd5b6000806040838503121561460557600080fd5b823561461081613feb565b91506020830135614434816145e4565b600081518084526020808501945080840160005b8381101561453257815180516001600160a01b0316885283015161ffff168388015260409096019590820190600101614634565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156146fb578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805184528781015161ffff168885015286015160608785018190526146e781860183614620565b96890196945050509086019060010161468f565b509098975050505050505050565b6000806000806080858703121561471f57600080fd5b843561472a81613feb565b935060208581013567ffffffffffffffff8082111561474857600080fd5b61475489838a01614258565b9550604088013591508082111561476a57600080fd5b61477689838a01614258565b9450606088013591508082111561478c57600080fd5b818801915088601f8301126147a057600080fd5b81356147ab81614234565b6040516147b8828261414c565b82815260059290921b840185019185810191508b8311156147d857600080fd5b8585015b83811015614810578035858111156147f45760008081fd5b6148028e89838a0101614179565b8452509186019186016147dc565b50989b979a50959850505050505050565b600080600080600060a0868803121561483957600080fd5b853561484481613feb565b9450602086013561485481613feb565b9350604086013567ffffffffffffffff81111561487057600080fd5b61487c88828901614179565b935050606086013561488d81613feb565b9150608086013561489d81613feb565b809150509295509295909350565b600080600080608085870312156148c157600080fd5b84356148cc81613feb565b93506020850135925060408501359150606085013567ffffffffffffffff8111156148f657600080fd5b61490287828801614179565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561494f5783516001600160a01b03168352928401929184019160010161492a565b50909695505050505050565b6000806040838503121561496e57600080fd5b823561497981613feb565b9150602083013561443481613feb565b600080600080600060a086880312156149a157600080fd5b85356149ac81613feb565b945060208601356149bc81613feb565b93506040860135925060608601359150608086013567ffffffffffffffff8111156149e657600080fd5b61440288828901614179565b602081526000611fb26020830184614620565b805161ffff81168114614a1757600080fd5b919050565b60008060408385031215614a2f57600080fd5b8251614a3a81613feb565b9150614a4860208401614a05565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761090a5761090a614a51565b600082614a9b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614ab257600080fd5b8151611fb2816145e4565b634e487b7160e01b600052603260045260246000fd5b60006000198203614ae657614ae6614a51565b5060010190565b60006020808385031215614b0057600080fd5b825167ffffffffffffffff811115614b1757600080fd5b8301601f81018513614b2857600080fd5b8051614b3381614234565b60408051614b41838261414c565b83815260069390931b8401850192858101925088841115614b6157600080fd5b938501935b83851015614bb45781858a031215614b7e5760008081fd5b8151614b8981614126565b8551614b9481613feb565b8152614ba1868801614a05565b8188015283529381019391850191614b66565b98975050505050505050565b8082018082111561090a5761090a614a51565b8181038181111561090a5761090a614a51565b60008251614bf8818460208701614078565b9190910192915050565b600181811c90821680614c1657607f821691505b602082108103614c3657634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454614c4a81614c02565b60018281168015614c625760018114614c7757614ca6565b60ff1984168752821515830287019450614ca6565b8860005260208060002060005b85811015614c9d5781548a820152908401908201614c84565b50505082870194505b505050508351614cba818360208801614078565b01949350505050565b601f8211156109c857600081815260208120601f850160051c81016020861015614cea5750805b601f850160051c820191505b81811015610c3757828155600101614cf6565b815167ffffffffffffffff811115614d2357614d23614110565b614d3781614d318454614c02565b84614cc3565b602080601f831160018114614d6c5760008415614d545750858301515b600019600386901b1c1916600185901b178555610c37565b600085815260208120601f198616915b82811015614d9b57888601518255948401946001909101908401614d7c565b5085821015614db95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000614ddc6040830185614502565b8281036020840152614dee8185614502565b95945050505050565b600060208284031215614e0957600080fd5b8151611fb281613feb565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e4c816017850160208801614078565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614e89816028840160208801614078565b01602801949350505050565b60006001600160a01b03808816835280871660208401525060a06040830152614ec160a0830186614502565b8281036060840152614ed38186614502565b90508281036080840152614bb4818561409c565b600060208284031215614ef957600080fd5b8151611fb28161402c565b600060033d11156137de5760046000803e5060005160e01c90565b600060443d1015614f2d5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715614f7b57505050505090565b8285019150815181811115614f935750505050505090565b843d8701016020828501011115614fad5750505050505090565b614fbc6020828601018761414c565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152614fff60a083018461409c565b979650505050505050565b60008161501957615019614a51565b50600019019056fea2646970667358221220a3e246bc82a18932f1515ef30b71f1db320dfb57fefb24e64182297694f9f4da64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061032a5760003560e01c806381de2dc2116101b2578063bb7fde71116100f9578063da742228116100a2578063f242432a1161007c578063f242432a14610809578063f5298aca1461081c578063fd90e8971461082f578063fdda1d0e1461084f57600080fd5b8063da742228146107a6578063e985e9c5146107b9578063ee295d62146107f557600080fd5b8063ce1b815f116100d3578063ce1b815f14610755578063d53913931461076c578063d547741f1461079357600080fd5b8063bb7fde711461070c578063bd85b0391461071f578063befa66451461074057600080fd5b8063a22cb4651161015b578063abe3960311610135578063abe39603146106b9578063ac4a0fb6146106e5578063b0ccc31e146106f857600080fd5b8063a22cb46514610680578063a30b4db914610693578063a55784ef146106a657600080fd5b806397905c1e1161018c57806397905c1e146106505780639d28fb8614610665578063a217fddf1461067857600080fd5b806381de2dc2146105f157806391d1485414610604578063933f39581461063d57600080fd5b806336568abe1161027657806355f804b31161021f5780636b566cb2116101f95780636b566cb214610575578063791459ea146105b7578063797669c9146105ca57600080fd5b806355f804b31461053c578063572b6c051461054f5780636b20c4541461056257600080fd5b80634f124995116102505780634f124995146104f35780634f558e79146105065780635055fbc31461052957600080fd5b806336568abe1461049b5780634e1273f4146104ae5780634f062c5a146104ce57600080fd5b8063248a9ca3116102d85780632a55205a116102b25780632a55205a146104435780632eb2c2d6146104755780632f2ff15d1461048857600080fd5b8063248a9ca3146103d3578063282c51f3146103f65780632a41a3551461041d57600080fd5b8063124d91e511610309578063124d91e514610398578063162094c4146103ad57806320820ec3146103c057600080fd5b8062fdd58e1461032f57806301ffc9a7146103555780630e89341c14610378575b600080fd5b61034261033d366004614000565b610862565b6040519081526020015b60405180910390f35b610368610363366004614042565b610910565b604051901515815260200161034c565b61038b61038636600461405f565b61094e565b60405161034c91906140c8565b6103ab6103a63660046140db565b610959565b005b6103ab6103bb3660046141ed565b610994565b6103ab6103ce3660046142c9565b6109cd565b6103426103e136600461405f565b600090815260fa602052604090206001015490565b6103427f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61043061042b36600461405f565b610a02565b60405161ffff909116815260200161034c565b61045661045136600461433f565b610a12565b604080516001600160a01b03909316835260208301919091520161034c565b6103ab610483366004614361565b610b34565b6103ab61049636600461440f565b610c3f565b6103ab6104a936600461440f565b610c64565b6104c16104bc36600461443f565b610d00565b60405161034c919061453d565b6104e16104dc36600461405f565b610e3e565b60405160ff909116815260200161034c565b6103ab610501366004614550565b610e4d565b61036861051436600461405f565b600090815261012c6020526040902054151590565b61036861053736600461405f565b610e63565b6103ab61054a366004614592565b610e6e565b61036861055d3660046145c7565b610e82565b6103ab6105703660046142c9565b610e9f565b61059f61058336600461405f565b610192602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161034c565b6103ab6105c53660046145f2565b610f3b565b6103427f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f81565b6104306105ff36600461405f565b610fcc565b61036861061236600461440f565b600091825260fa602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61036861064b36600461405f565b610fdc565b610658610fed565b60405161034c9190614668565b6103ab6106733660046145c7565b611173565b610342600081565b6103ab61068e3660046145f2565b611213565b61059f6106a136600461405f565b6112fb565b6103ab6106b4366004614709565b611303565b6103426106c7366004614592565b80516020818301810180516101948252928201919093012091525481565b6103ab6106f3366004614821565b6114f8565b6101905461059f906001600160a01b031681565b6103ab61071a3660046148ab565b61167d565b61034261072d36600461405f565b600090815261012c602052604090205490565b6107486116d8565b60405161034c919061490e565b6000546201000090046001600160a01b031661059f565b6103427f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6103ab6107a136600461440f565b6118f2565b6103ab6107b43660046145c7565b611917565b6103686107c736600461495b565b6001600160a01b03918216600090815260976020908152604080832093909416825291909152205460ff1690565b6101915461059f906001600160a01b031681565b6103ab610817366004614989565b6119a7565b6103ab61082a3660046140db565b611bc7565b61084261083d36600461405f565b611c63565b60405161034c91906149f2565b61034261085d366004614592565b611e08565b60006001600160a01b0383166108e55760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526096602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167fa30b4db900000000000000000000000000000000000000000000000000000000148061090a575061090a82611e31565b606061090a82611ed7565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84861098381611fb9565b61098e848484611fcd565b50505050565b7f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f6109be81611fb9565b6109c883836121a4565b505050565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486109f781611fb9565b61098e848484612202565b600061090a8260b81c61ffff1690565b60008060008061019160009054906101000a90046001600160a01b03166001600160a01b031663a86a28d16040518163ffffffff1660e01b81526004016040805180830381865afa158015610a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8f9190614a1c565b6000888152610192602052604090205491935091506001600160a01b031615610af157600086815261019260205260409020546001600160a01b0316612710610adc61ffff841688614a67565b610ae69190614a7e565b935093505050610b2d565b6001600160a01b03821615801590610b0c575061ffff811615155b15610b235781612710610adc61ffff841688614a67565b6000809350935050505b9250929050565b6101905485906001600160a01b03163b15610c2a57336001600160a01b03821603610b6b57610b668686868686612494565b610c37565b61019054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde9190614aa0565b610c2a5760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016108dc565b610c378686868686612494565b505050505050565b600082815260fa6020526040902060010154610c5a81611fb9565b6109c88383612539565b610c6c6125dc565b6001600160a01b0316816001600160a01b031614610cf25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108dc565b610cfc82826125eb565b5050565b60608151835114610d795760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016108dc565b6000835167ffffffffffffffff811115610d9557610d95614110565b604051908082528060200260200182016040528015610dbe578160200160208202803683370190505b50905060005b8451811015610e3657610e09858281518110610de257610de2614abd565b6020026020010151858381518110610dfc57610dfc614abd565b6020026020010151610862565b828281518110610e1b57610e1b614abd565b6020908102919091010152610e2f81614ad3565b9050610dc4565b509392505050565b600061090a8260a01c60ff1690565b6000610e5881611fb9565b61098e84848461268c565b600061090a826127de565b6000610e7981611fb9565b610cfc826127fc565b600080546001600160a01b0383811662010000909204161461090a565b610ea76125dc565b6001600160a01b0316836001600160a01b03161480610ecd5750610ecd836107c76125dc565b610f305760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b6109c8838383612202565b6000610f4681611fb9565b6001600160a01b038316610fc25760405162461bcd60e51b815260206004820152602960248201527f41737365743a20737562736372697074696f6e2063616e2774206265207a657260448201527f6f2061646472657373000000000000000000000000000000000000000000000060648201526084016108dc565b6109c88383612809565b600061090a8260a81c61ffff1690565b6000600160c883901c81161461090a565b6101935460609067ffffffffffffffff81111561100c5761100c614110565b60405190808252806020026020018201604052801561105957816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908161102a5790505b50905060005b6101935481101561116f57604080516060808201835260008083526020830152918101919091526000610193838154811061109c5761109c614abd565b60009182526020808320909101548083526101929091526040909120549091506001600160a01b0316801561113757806001600160a01b031663d78d610b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611109573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111319190810190614aed565b60408401525b8183528451839086908690811061115057611150614abd565b60200260200101819052505050508061116890614ad3565b905061105f565b5090565b600061117e81611fb9565b6001600160a01b0382166111e25760405162461bcd60e51b815260206004820152602560248201527f41737365743a2072656769737472792063616e2774206265207a65726f206164604482015264647265737360d81b60648201526084016108dc565b50610190805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6101905482906001600160a01b03163b156112e95761019054604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190614aa0565b6112e95760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016108dc565b6109c86112f46125dc565b84846129d5565b60008161090a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661132d81611fb9565b81518451146113a45760405162461bcd60e51b815260206004820152602b60248201527f41737365743a2069647320616e64206d6574616461746148617368206c656e6760448201527f7468206d69736d6174636800000000000000000000000000000000000000000060648201526084016108dc565b825184511461141b5760405162461bcd60e51b815260206004820152602660248201527f41737365743a2069647320616e6420616d6f756e7473206c656e677468206d6960448201527f736d61746368000000000000000000000000000000000000000000000000000060648201526084016108dc565b60005b84518110156114755761146385828151811061143c5761143c614abd565b602002602001015184838151811061145657611456614abd565b6020026020010151612ac9565b8061146d81614ad3565b91505061141e565b5061149185858560405180602001604052806000815250612bb0565b60005b8451811015610c375760006114bf8683815181106114b4576114b4614abd565b602002602001015190565b90506114e58683815181106114d6576114d6614abd565b6020026020010151828361268c565b50806114f081614ad3565b915050611494565b600054610100900460ff16158080156115185750600054600160ff909116105b806115325750303b158015611532575060005460ff166001145b6115a45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108dc565b6000805460ff1916600117905580156115c7576000805461ff0019166101001790555b6115d0846127fc565b6115d8612dad565b6115e0612dad565b6115e986612e1a565b6115f1612dad565b6115fc600086612539565b611607836001612e8e565b610191805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015610c37576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66116a781611fb9565b6116b18483612ac9565b6116cc85858560405180602001604052806000815250612f31565b83610c3781808061268c565b6101935461019154604080517fa86a28d10000000000000000000000000000000000000000000000000000000081528151606094600094909385936001600160a01b039092169263a86a28d19260048082019392918290030181865afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190614a1c565b5090506001600160a01b0381161561180f576101935461178b906001614bc0565b67ffffffffffffffff8111156117a3576117a3614110565b6040519080825280602002602001820160405280156117cc578160200160208202803683370190505b50935080846000815181106117e3576117e3614abd565b6001600160a01b03909216602092830291909101909101526001925061180882614ad3565b9150611858565b6101935467ffffffffffffffff81111561182b5761182b614110565b604051908082528060200260200182016040528015611854578160200160208202803683370190505b5093505b825b828110156118eb5761019260006101936118748785614bd3565b8154811061188457611884614abd565b9060005260206000200154815260200190815260200160002060009054906101000a90046001600160a01b03168582815181106118c3576118c3614abd565b6001600160a01b03909216602092830291909101909101526118e481614ad3565b905061185a565b5050505090565b600082815260fa602052604090206001015461190d81611fb9565b6109c883836125eb565b600061192281611fb9565b6001600160a01b03821661199e5760405162461bcd60e51b815260206004820152602e60248201527f41737365743a207472757374656420666f727761726465722063616e2774206260448201527f65207a65726f206164647265737300000000000000000000000000000000000060648201526084016108dc565b610cfc82613074565b6101905485906001600160a01b03163b15611b2957336001600160a01b03821603611a6a576119d46125dc565b6001600160a01b0316866001600160a01b031614806119fa57506119fa866107c76125dc565b611a5d5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b610b668686868686613189565b61019054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190614aa0565b611b295760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f77656400000000000000000000000060448201526064016108dc565b611b316125dc565b6001600160a01b0316866001600160a01b03161480611b575750611b57866107c76125dc565b611bba5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b610c378686868686613189565b611bcf6125dc565b6001600160a01b0316836001600160a01b03161480611bf55750611bf5836107c76125dc565b611c585760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b6109c8838383611fcd565b60008181526101926020526040808220546101915482517fa86a28d100000000000000000000000000000000000000000000000000000000815283516060956001600160a01b039485169590949093169263a86a28d192600480820193918290030181865afa158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190614a1c565b5090506001600160a01b03821615611d7e57816001600160a01b031663d78d610b6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d769190810190614aed565b949350505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081611d955790505090506040518060400160405280836001600160a01b0316815260200161271061ffff1681525081600081518110611df557611df5614abd565b6020908102919091010152949350505050565b600061019482604051611e1b9190614be6565b9081526020016040518091039020549050919050565b60006001600160e01b031982167f2a55205a000000000000000000000000000000000000000000000000000000001480611e9457506001600160e01b031982167f667873ce00000000000000000000000000000000000000000000000000000000145b80611ec857506001600160e01b031982167ffd90e89700000000000000000000000000000000000000000000000000000000145b8061090a575061090a82613364565b600081815261015f6020526040812080546060929190611ef690614c02565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2290614c02565b8015611f6f5780601f10611f4457610100808354040283529160200191611f6f565b820191906000526020600020905b815481529060010190602001808311611f5257829003601f168201915b505050505090506000815111611f8d57611f88836133a2565b611fb2565b61015e81604051602001611fa2929190614c3c565b6040516020818303038152906040525b9392505050565b611fca81611fc56125dc565b613436565b50565b6001600160a01b0383166120495760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b60006120536125dc565b90506000612060846134ab565b9050600061206d846134ab565b905061208d838760008585604051806020016040528060008152506134f6565b60008581526096602090815260408083206001600160a01b038a168452909152902054848110156121255760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016108dc565b60008681526096602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b600082815261015f602052604090206121bd8282614d09565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b6121e98461094e565b6040516121f691906140c8565b60405180910390a25050565b6001600160a01b03831661227e5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b80518251146122e05760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108dc565b60006122ea6125dc565b905061230a818560008686604051806020016040528060008152506134f6565b60005b835181101561242757600084828151811061232a5761232a614abd565b60200260200101519050600084838151811061234857612348614abd565b60209081029190910181015160008481526096835260408082206001600160a01b038c1683529093529190912054909150818110156123ee5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63650000000000000000000000000000000000000000000000000000000060648201526084016108dc565b60009283526096602090815260408085206001600160a01b038b168652909152909220910390558061241f81614ad3565b91505061230d565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612478929190614dc9565b60405180910390a460408051602081019091526000905261098e565b61249c6125dc565b6001600160a01b0316856001600160a01b031614806124c257506124c2856107c76125dc565b6125255760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201526d195c881bdc88185c1c1c9bdd995960921b60648201526084016108dc565b6125328585858585613504565b5050505050565b600082815260fa602090815260408083206001600160a01b038516845290915290205460ff16610cfc57600082815260fa602090815260408083206001600160a01b03851684529091529020805460ff191660011790556125986125dc565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006125e6613789565b905090565b600082815260fa602090815260408083206001600160a01b038516845290915290205460ff1615610cfc57600082815260fa602090815260408083206001600160a01b03851684529091529020805460ff191690556126486125dc565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b610191546040517ff06040b40000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301528481166024830152600092169063f06040b4906044016020604051808303816000875af11580156126fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271f9190614df7565b6000858152610192602052604080822080546001600160a01b03851673ffffffffffffffffffffffffffffffffffffffff19909116179055610193805460018101825592527ffc8af01f449989052b52093a58fc9f42d0b11f0c6dd5dca0463dab62346ccc68909101869055519091507f5fe98ba0109a6edc7f59e8c943b6a42a0d8508aebe2e37c874eca88f747bb077906127d090869086909182526001600160a01b0316602082015260400190565b60405180910390a150505050565b6000806127ef8360b81c61ffff1690565b61ffff1615159392505050565b61015e610cfc8282614d09565b610190546001600160a01b03163b15610cfc57610190546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a547906024016020604051808303816000875af1158015612880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a49190614aa0565b610cfc57801561292a57610190546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b15801561291657600080fd5b505af1158015610c37573d6000803e3d6000fd5b6001600160a01b0382161561298b57610190546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af2903906044016128fc565b610190546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e486906024016128fc565b816001600160a01b0316836001600160a01b031603612a5c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016108dc565b6001600160a01b03838116600081815260976020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61019481604051612ada9190614be6565b908152602001604051809103902054600014612b84578161019482604051612b029190614be6565b90815260200160405180910390205414610cfc5760405162461bcd60e51b815260206004820152602960248201527f41737365743a206e6f7420616c6c6f77656420746f207265757365206d65746160448201527f646174612068617368000000000000000000000000000000000000000000000060648201526084016108dc565b8161019482604051612b969190614be6565b90815260405190819003602001902055610cfc82826121a4565b6001600160a01b038416612c2c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b8151835114612c8e5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108dc565b6000612c986125dc565b9050612ca9816000878787876134f6565b60005b8451811015612d4557838181518110612cc757612cc7614abd565b602002602001015160966000878481518110612ce557612ce5614abd565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254612d2d9190614bc0565b90915550819050612d3d81614ad3565b915050612cac565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612d96929190614dc9565b60405180910390a4612532816000878787876137e1565b600054610100900460ff16612e185760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b565b600054610100900460ff16612e855760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b611fca816139cd565b600054610100900460ff16612ef95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b610190805473ffffffffffffffffffffffffffffffffffffffff19166daaeb6d7670e522a718067333cd4e179055610cfc8282612809565b6001600160a01b038416612fad5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016108dc565b6000612fb76125dc565b90506000612fc4856134ab565b90506000612fd1856134ab565b9050612fe2836000898585896134f6565b60008681526096602090815260408083206001600160a01b038b16845290915281208054879290613014908490614bc0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461219b83600089898989613a41565b6000546001600160a01b03620100009091048116908216036130fe5760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c7265616479207365740000000000000000000000000000000060648201526084016108dc565b6131066125dc565b600080546040516001600160a01b0393841693858116936201000090930416917f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e591a4600080546001600160a01b0390921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b6001600160a01b0384166131ed5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016108dc565b60006131f76125dc565b90506000613204856134ab565b90506000613211856134ab565b90506132218389898585896134f6565b60008681526096602090815260408083206001600160a01b038c168452909152902054858110156132ba5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016108dc565b60008781526096602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906132f9908490614bc0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613359848a8a8a8a8a613a41565b505050505050505050565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061090a575061090a82613b84565b6060609880546133b190614c02565b80601f01602080910402602001604051908101604052809291908181526020018280546133dd90614c02565b801561342a5780601f106133ff5761010080835404028352916020019161342a565b820191906000526020600020905b81548152906001019060200180831161340d57829003601f168201915b50505050509050919050565b600082815260fa602090815260408083206001600160a01b038516845290915290205460ff16610cfc5761346981613c1f565b613474836020613c31565b604051602001613485929190614e14565b60408051601f198184030181529082905262461bcd60e51b82526108dc916004016140c8565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106134e5576134e5614abd565b602090810291909101015292915050565b610c37868686868686613e5a565b81518351146135665760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016108dc565b6001600160a01b0384166135ca5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016108dc565b60006135d46125dc565b90506135e48187878787876134f6565b60005b845181101561372357600085828151811061360457613604614abd565b60200260200101519050600085838151811061362257613622614abd565b60209081029190910181015160008481526096835260408082206001600160a01b038e1683529093529190912054909150818110156136c95760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e736665720000000000000000000000000000000000000000000060648201526084016108dc565b60008381526096602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290613708908490614bc0565b925050819055505050508061371c90614ad3565b90506135e7565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613773929190614dc9565b60405180910390a4610c378187878787876137e1565b600080546201000090046001600160a01b0316331480156137ab575060143610155b156137db57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b50335b90565b6001600160a01b0384163b15610c37576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c819061383e9089908990889088908890600401614e95565b6020604051808303816000875af1925050508015613879575060408051601f3d908101601f1916820190925261387691810190614ee7565b60015b61392e57613885614f04565b806308c379a0036138be5750613899614f1f565b806138a457506138c0565b8060405162461bcd60e51b81526004016108dc91906140c8565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016108dc565b6001600160e01b031981167fbc197c81000000000000000000000000000000000000000000000000000000001461219b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016108dc565b600054610100900460ff16613a385760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108dc565b611fca81613074565b6001600160a01b0384163b15610c37576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190613a9e9089908990889088908890600401614fc7565b6020604051808303816000875af1925050508015613ad9575060408051601f3d908101601f19168201909252613ad691810190614ee7565b60015b613ae557613885614f04565b6001600160e01b031981167ff23a6e61000000000000000000000000000000000000000000000000000000001461219b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e7300000000000000000000000000000000000000000000000060648201526084016108dc565b60006001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480613be757506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061090a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461090a565b606061090a6001600160a01b03831660145b60606000613c40836002614a67565b613c4b906002614bc0565b67ffffffffffffffff811115613c6357613c63614110565b6040519080825280601f01601f191660200182016040528015613c8d576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613cc457613cc4614abd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613d2757613d27614abd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613d63846002614a67565b613d6e906001614bc0565b90505b6001811115613e0b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613daf57613daf614abd565b1a60f81b828281518110613dc557613dc5614abd565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613e048161500a565b9050613d71565b508315611fb25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108dc565b6001600160a01b038516613ee25760005b8351811015613ee057828181518110613e8657613e86614abd565b602002602001015161012c6000868481518110613ea557613ea5614abd565b602002602001015181526020019081526020016000206000828254613eca9190614bc0565b90915550613ed9905081614ad3565b9050613e6b565b505b6001600160a01b038416610c375760005b835181101561219b576000848281518110613f1057613f10614abd565b602002602001015190506000848381518110613f2e57613f2e614abd565b60200260200101519050600061012c600084815260200190815260200160002054905081811015613fc75760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c7900000000000000000000000000000000000000000000000060648201526084016108dc565b600092835261012c602052604090922091039055613fe481614ad3565b9050613ef3565b6001600160a01b0381168114611fca57600080fd5b6000806040838503121561401357600080fd5b823561401e81613feb565b946020939093013593505050565b6001600160e01b031981168114611fca57600080fd5b60006020828403121561405457600080fd5b8135611fb28161402c565b60006020828403121561407157600080fd5b5035919050565b60005b8381101561409357818101518382015260200161407b565b50506000910152565b600081518084526140b4816020860160208601614078565b601f01601f19169290920160200192915050565b602081526000611fb2602083018461409c565b6000806000606084860312156140f057600080fd5b83356140fb81613feb565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b6040810181811067ffffffffffffffff8211171561414657614146614110565b60405250565b601f19601f830116810181811067ffffffffffffffff8211171561417257614172614110565b6040525050565b600082601f83011261418a57600080fd5b813567ffffffffffffffff8111156141a4576141a4614110565b6040516141bb6020601f19601f850116018261414c565b8181528460208386010111156141d057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561420057600080fd5b82359150602083013567ffffffffffffffff81111561421e57600080fd5b61422a85828601614179565b9150509250929050565b600067ffffffffffffffff82111561424e5761424e614110565b5060051b60200190565b600082601f83011261426957600080fd5b8135602061427682614234565b604051614283828261414c565b83815260059390931b85018201928281019150868411156142a357600080fd5b8286015b848110156142be57803583529183019183016142a7565b509695505050505050565b6000806000606084860312156142de57600080fd5b83356142e981613feb565b9250602084013567ffffffffffffffff8082111561430657600080fd5b61431287838801614258565b9350604086013591508082111561432857600080fd5b5061433586828701614258565b9150509250925092565b6000806040838503121561435257600080fd5b50508035926020909101359150565b600080600080600060a0868803121561437957600080fd5b853561438481613feb565b9450602086013561439481613feb565b9350604086013567ffffffffffffffff808211156143b157600080fd5b6143bd89838a01614258565b945060608801359150808211156143d357600080fd5b6143df89838a01614258565b935060808801359150808211156143f557600080fd5b5061440288828901614179565b9150509295509295909350565b6000806040838503121561442257600080fd5b82359150602083013561443481613feb565b809150509250929050565b6000806040838503121561445257600080fd5b823567ffffffffffffffff8082111561446a57600080fd5b818501915085601f83011261447e57600080fd5b8135602061448b82614234565b604051614498828261414c565b83815260059390931b85018201928281019150898411156144b857600080fd5b948201945b838610156144df5785356144d081613feb565b825294820194908201906144bd565b965050860135925050808211156144f557600080fd5b5061422a85828601614258565b600081518084526020808501945080840160005b8381101561453257815187529582019590820190600101614516565b509495945050505050565b602081526000611fb26020830184614502565b60008060006060848603121561456557600080fd5b83359250602084013561457781613feb565b9150604084013561458781613feb565b809150509250925092565b6000602082840312156145a457600080fd5b813567ffffffffffffffff8111156145bb57600080fd5b611d7684828501614179565b6000602082840312156145d957600080fd5b8135611fb281613feb565b8015158114611fca57600080fd5b6000806040838503121561460557600080fd5b823561461081613feb565b91506020830135614434816145e4565b600081518084526020808501945080840160005b8381101561453257815180516001600160a01b0316885283015161ffff168388015260409096019590820190600101614634565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156146fb578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805184528781015161ffff168885015286015160608785018190526146e781860183614620565b96890196945050509086019060010161468f565b509098975050505050505050565b6000806000806080858703121561471f57600080fd5b843561472a81613feb565b935060208581013567ffffffffffffffff8082111561474857600080fd5b61475489838a01614258565b9550604088013591508082111561476a57600080fd5b61477689838a01614258565b9450606088013591508082111561478c57600080fd5b818801915088601f8301126147a057600080fd5b81356147ab81614234565b6040516147b8828261414c565b82815260059290921b840185019185810191508b8311156147d857600080fd5b8585015b83811015614810578035858111156147f45760008081fd5b6148028e89838a0101614179565b8452509186019186016147dc565b50989b979a50959850505050505050565b600080600080600060a0868803121561483957600080fd5b853561484481613feb565b9450602086013561485481613feb565b9350604086013567ffffffffffffffff81111561487057600080fd5b61487c88828901614179565b935050606086013561488d81613feb565b9150608086013561489d81613feb565b809150509295509295909350565b600080600080608085870312156148c157600080fd5b84356148cc81613feb565b93506020850135925060408501359150606085013567ffffffffffffffff8111156148f657600080fd5b61490287828801614179565b91505092959194509250565b6020808252825182820181905260009190848201906040850190845b8181101561494f5783516001600160a01b03168352928401929184019160010161492a565b50909695505050505050565b6000806040838503121561496e57600080fd5b823561497981613feb565b9150602083013561443481613feb565b600080600080600060a086880312156149a157600080fd5b85356149ac81613feb565b945060208601356149bc81613feb565b93506040860135925060608601359150608086013567ffffffffffffffff8111156149e657600080fd5b61440288828901614179565b602081526000611fb26020830184614620565b805161ffff81168114614a1757600080fd5b919050565b60008060408385031215614a2f57600080fd5b8251614a3a81613feb565b9150614a4860208401614a05565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761090a5761090a614a51565b600082614a9b57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614ab257600080fd5b8151611fb2816145e4565b634e487b7160e01b600052603260045260246000fd5b60006000198203614ae657614ae6614a51565b5060010190565b60006020808385031215614b0057600080fd5b825167ffffffffffffffff811115614b1757600080fd5b8301601f81018513614b2857600080fd5b8051614b3381614234565b60408051614b41838261414c565b83815260069390931b8401850192858101925088841115614b6157600080fd5b938501935b83851015614bb45781858a031215614b7e5760008081fd5b8151614b8981614126565b8551614b9481613feb565b8152614ba1868801614a05565b8188015283529381019391850191614b66565b98975050505050505050565b8082018082111561090a5761090a614a51565b8181038181111561090a5761090a614a51565b60008251614bf8818460208701614078565b9190910192915050565b600181811c90821680614c1657607f821691505b602082108103614c3657634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454614c4a81614c02565b60018281168015614c625760018114614c7757614ca6565b60ff1984168752821515830287019450614ca6565b8860005260208060002060005b85811015614c9d5781548a820152908401908201614c84565b50505082870194505b505050508351614cba818360208801614078565b01949350505050565b601f8211156109c857600081815260208120601f850160051c81016020861015614cea5750805b601f850160051c820191505b81811015610c3757828155600101614cf6565b815167ffffffffffffffff811115614d2357614d23614110565b614d3781614d318454614c02565b84614cc3565b602080601f831160018114614d6c5760008415614d545750858301515b600019600386901b1c1916600185901b178555610c37565b600085815260208120601f198616915b82811015614d9b57888601518255948401946001909101908401614d7c565b5085821015614db95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604081526000614ddc6040830185614502565b8281036020840152614dee8185614502565b95945050505050565b600060208284031215614e0957600080fd5b8151611fb281613feb565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614e4c816017850160208801614078565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614e89816028840160208801614078565b01602801949350505050565b60006001600160a01b03808816835280871660208401525060a06040830152614ec160a0830186614502565b8281036060840152614ed38186614502565b90508281036080840152614bb4818561409c565b600060208284031215614ef957600080fd5b8151611fb28161402c565b600060033d11156137de5760046000803e5060005160e01c90565b600060443d1015614f2d5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff8160248401118184111715614f7b57505050505090565b8285019150815181811115614f935750505050505090565b843d8701016020828501011115614fad5750505050505090565b614fbc6020828601018761414c565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152614fff60a083018461409c565b979650505050505050565b60008161501957615019614a51565b50600019019056fea2646970667358221220a3e246bc82a18932f1515ef30b71f1db320dfb57fefb24e64182297694f9f4da64736f6c63430008120033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burnBatchFrom(address,uint256[],uint256[])": {
        "details": "Only the minter role can burn tokensThis function was added with token recycling and bridging in mind but may have other use casesThe length of the ids and amounts arrays must be the same",
        "params": {
          "account": "The account to burn tokens from",
          "amounts": "An array of amounts of tokens to burn",
          "ids": "An array of token ids to burn"
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "details": "Only the minter role can burn tokensThis function was added with token recycling and bridging in mind but may have other use cases",
        "params": {
          "account": "The account to burn tokens from",
          "amount": "The amount of tokens to burn",
          "id": "The token id to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getAllSplits()": {
        "returns": {
          "splits": "the royalty receiver's array"
        }
      },
      "getCreatorAddress(uint256)": {
        "params": {
          "tokenId": "The token id to extract the creator address from"
        },
        "returns": {
          "creator": "The asset creator address"
        }
      },
      "getCreatorNonce(uint256)": {
        "params": {
          "tokenId": "The token id to extract the asset nonce from"
        },
        "returns": {
          "_0": "creatorNonce The asset creator nonce"
        }
      },
      "getRecipients(uint256)": {
        "details": "returns the default address for tokens with no recipients.",
        "params": {
          "tokenId": "is the token id for which the recipient should be returned."
        },
        "returns": {
          "_0": "addresses of royalty recipient of the token."
        }
      },
      "getRevealNonce(uint256)": {
        "params": {
          "tokenId": "The token id to extract reveal nonce from"
        },
        "returns": {
          "_0": "revealNonce The reveal nonce of the asset"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTier(uint256)": {
        "params": {
          "tokenId": "The token id to extract the tier from"
        },
        "returns": {
          "tier": "The asset tier, determined by the catalyst used to create it"
        }
      },
      "getTokenRoyalties()": {
        "returns": {
          "royaltyConfigs": "receivers and their split array as long as the number of tokens."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isBridged(uint256)": {
        "params": {
          "tokenId": "The token id to extract the bridged flag from"
        },
        "returns": {
          "_0": "bridged Whether the asset is bridged or not"
        }
      },
      "isRevealed(uint256)": {
        "params": {
          "tokenId": "The token id to extract the revealed flag from"
        },
        "returns": {
          "_0": "isRevealed Whether the asset is revealed or not"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "mint(address,uint256,uint256,string)": {
        "details": "Only callable by the minter role",
        "params": {
          "amount": "The amount of the token to mint",
          "id": "The id of the token to mint",
          "to": "The address of the recipient"
        }
      },
      "mintBatch(address,uint256[],uint256[],string[])": {
        "details": "Only callable by the minter role",
        "params": {
          "amounts": "The amounts of the tokens to mint",
          "ids": "The ids of the tokens to mint",
          "to": "The address of the recipient"
        }
      },
      "registerAndSubscribe(address,bool)": {
        "details": "used to register contract and subscribe to the subscriptionOrRegistrantToCopy's black list.",
        "params": {
          "subscribe": "bool to signify subscription \"true\"\" or to copy the list \"false\".",
          "subscriptionOrRegistrantToCopy": "registration address of the list to subscribe."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "tokenId": "of the token for which the royalty is needed to be distributed",
          "value": "the amount on which the royalty is calculated"
        },
        "returns": {
          "_0": "address the royalty receiver",
          "_1": "value the EIP2981 royalty"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "call data should be optimized to order ids so packedBalance can be used efficiently.",
        "params": {
          "amounts": "amount of each token type transfered.",
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "ids": "ids of each token type transfered.",
          "to": "address to which the token will be transfered."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "amount of token transfered.",
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "id": "the token type transfered.",
          "to": "address to which the token will be transfered."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether to approve or revoke",
          "operator": "address which will be granted rights to transfer all tokens of the caller."
        }
      },
      "setBaseURI(string)": {
        "params": {
          "baseURI": "The new base URI"
        }
      },
      "setOperatorRegistry(address)": {
        "params": {
          "registry": "the address of the registry"
        }
      },
      "setTokenRoyalties(uint256,address,address)": {
        "params": {
          "creator": "the creactor of the tokens.",
          "recipient": "the royalty recipient for the splitter of the creator.",
          "tokenId": "the id of the token for which the EIP2981 royalty is set for."
        }
      },
      "setTokenURI(uint256,string)": {
        "details": "The metadata hash should be the IPFS CIDv1 base32 encoded hash",
        "params": {
          "metadata": "The new URI for asset's metadata",
          "tokenId": "The token id to set URI for"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "the interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `id`."
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "params": {
          "tokenId": "The token id to get URI for"
        },
        "returns": {
          "_0": "tokenURI the URI of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "burnBatchFrom(address,uint256[],uint256[])": {
        "notice": "Burn a batch of tokens from a given account"
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "Burn a token from a given account"
      },
      "getAllSplits()": {
        "notice": "returns the EIP-2981 royalty receiver for each token (i.e. splitters) including the default royalty receiver."
      },
      "getCreatorAddress(uint256)": {
        "notice": "Extracts the creator address from a given token id"
      },
      "getCreatorNonce(uint256)": {
        "notice": "Extracts the asset nonce from a given token id"
      },
      "getRecipients(uint256)": {
        "notice": "returns the royalty recipients for each tokenId."
      },
      "getRevealNonce(uint256)": {
        "notice": "Extracts the abilities and enhancements hash from a given token id"
      },
      "getTier(uint256)": {
        "notice": "Extracts the tier from a given token id"
      },
      "getTokenRoyalties()": {
        "notice": "Returns royalty receivers and their split of royalty for each token"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "isBridged(uint256)": {
        "notice": "Extracts the bridged flag from a given token id"
      },
      "isRevealed(uint256)": {
        "notice": "Extracts the revealed flag from a given token id"
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "mint(address,uint256,uint256,string)": {
        "notice": "Mint new tokens"
      },
      "mintBatch(address,uint256[],uint256[],string[])": {
        "notice": "Mint new tokens with catalyst tier chosen by the creator"
      },
      "registerAndSubscribe(address,bool)": {
        "notice": "This function is used to register Asset contract on the Operator Filterer Registry of Opensea.can only be called by admin."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "EIP 2981 royalty info function to return the royalty receiver and royalty amount"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call)."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call)."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all of the caller's tokens."
      },
      "setBaseURI(string)": {
        "notice": "Set a new base URI"
      },
      "setOperatorRegistry(address)": {
        "notice": "sets filter registry address deployed in test"
      },
      "setTokenRoyalties(uint256,address,address)": {
        "notice": "could be used to deploy splitter and set tokens royalties"
      },
      "setTokenURI(uint256,string)": {
        "notice": "Set a new URI for specific tokenid"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements interface `id`."
      },
      "uri(uint256)": {
        "notice": "returns full token URI, including baseURI and token metadata URI"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 746,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 749,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12771,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_trustedForwarder",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12858,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3300,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "50",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4223,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "100",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 937,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_balances",
        "offset": 0,
        "slot": "150",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 943,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 945,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_uri",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 2152,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 2404,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "200",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 194,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_roles",
        "offset": 0,
        "slot": "250",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)189_storage)"
      },
      {
        "astId": 489,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2430,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "300",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2581,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2616,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_baseURI",
        "offset": 0,
        "slot": "350",
        "type": "t_string_storage"
      },
      {
        "astId": 2620,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2695,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 12871,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "400",
        "type": "t_contract(IOperatorFilterRegistry)13252"
      },
      {
        "astId": 13283,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "royaltyManager",
        "offset": 0,
        "slot": "401",
        "type": "t_address"
      },
      {
        "astId": 13287,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_tokenRoyaltiesSplitter",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_address_payable)"
      },
      {
        "astId": 13290,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "_tokensWithRoyalties",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8502,
        "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
        "label": "hashUsed",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOperatorFilterRegistry)13252": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)189_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)189_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address_payable)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address payable)",
        "numberOfBytes": "32",
        "value": "t_address_payable"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)189_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 186,
            "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 188,
            "contract": "@sandbox-smart-contracts/asset/contracts/Asset.sol:Asset",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}