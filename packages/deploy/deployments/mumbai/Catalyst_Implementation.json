{
  "address": "0x46D2D2be1aEb899949f327C3b7d32BeFA0470761",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDefaultRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDefaultRoyaltyAmount",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyaltyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "catalystId",
          "type": "uint256"
        }
      ],
      "name": "NewCatalystTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfsCID",
          "type": "string"
        }
      ],
      "name": "addNewCatalystType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatchFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestTierIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseUri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subscription",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultMinter",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_catalystIpfsCID",
          "type": "string[]"
        },
        {
          "internalType": "address",
          "name": "_royaltyManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorFilterRegistry",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "metadataHash",
          "type": "string"
        }
      ],
      "name": "setMetadataHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x117bbe7a9c996790e0e9fa0a4345984cc3b460876615ef97b2b1c5b75c1754d2",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x46D2D2be1aEb899949f327C3b7d32BeFA0470761",
    "transactionIndex": 2,
    "gasUsed": "3787585",
    "logsBloom": "0x
    "blockHash": "0xfbeb2660eba9185fe9c089da5945f5d8cf2ad6a973e31c0e0aea47e96d9d0613",
    "transactionHash": "0x117bbe7a9c996790e0e9fa0a4345984cc3b460876615ef97b2b1c5b75c1754d2",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 38383985,
        "transactionHash": "0x117bbe7a9c996790e0e9fa0a4345984cc3b460876615ef97b2b1c5b75c1754d2",
        "address": "0x46D2D2be1aEb899949f327C3b7d32BeFA0470761",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0xfbeb2660eba9185fe9c089da5945f5d8cf2ad6a973e31c0e0aea47e96d9d0613"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 38383985,
        "transactionHash": "0x117bbe7a9c996790e0e9fa0a4345984cc3b460876615ef97b2b1c5b75c1754d2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001587a959f55bf000000000000000000000000000000000000000000000001174bb17e4dd2b0ab8000000000000000000000000000000000000000000000d0edb6bcc9cbfe48fe800000000000000000000000000000000000000000000001174a5903b8335aec8000000000000000000000000000000000000000000000d0edb81544619d9ebd8",
        "logIndex": 4,
        "blockHash": "0xfbeb2660eba9185fe9c089da5945f5d8cf2ad6a973e31c0e0aea47e96d9d0613"
      }
    ],
    "blockNumber": 38383985,
    "cumulativeGasUsed": "3893841",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ceb274902183f5f625535381b6163583",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefaultRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDefaultRoyaltyAmount\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"catalystId\",\"type\":\"uint256\"}],\"name\":\"NewCatalystTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfsCID\",\"type\":\"string\"}],\"name\":\"addNewCatalystType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"burnBatchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestTierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscription\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultMinter\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_catalystIpfsCID\",\"type\":\"string[]\"},{\"internalType\":\"address\",\"name\":\"_royaltyManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorFilterRegistry\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadataHash\",\"type\":\"string\"}],\"name\":\"setMetadataHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"details\":\"An ERC1155 contract that manages catalysts, extends multiple OpenZeppelin contracts to provide a variety of features including, AccessControl, URIStorage, Burnable and more. The contract includes support for meta transactions.\",\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"addNewCatalystType(string)\":{\"params\":{\"ipfsCID\":\"The royalty bps for the catalyst\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"burnBatchFrom(address,uint256[],uint256[])\":{\"params\":{\"account\":\"The address to burn from\",\"amounts\":\"The amounts to be burned\",\"ids\":\"The token ids to burn\"}},\"burnFrom(address,uint256,uint256)\":{\"params\":{\"account\":\"The address to burn from\",\"amount\":\"The amount to be burned\",\"id\":\"The token id to burn\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,address,address,address,address,string[],address)\":{\"params\":{\"_baseUri\":\"The base URI for the token metadata, most likely set to ipfs://.\",\"_catalystIpfsCID\":\"The IPFS content identifiers for each catalyst.\",\"_defaultAdmin\":\"The default admin address.\",\"_defaultMinter\":\"The default minter address.\",\"_royaltyManager\":\", the address of the Manager contract for common royalty recipient\",\"_subscription\":\"The subscription address.\",\"_trustedForwarder\":\"The trusted forwarder for meta transactions.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mint(address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount to be minted\",\"id\":\"The token id to mint\",\"to\":\"The address that will own the minted token\"}},\"mintBatch(address,uint256[],uint256[])\":{\"params\":{\"amounts\":\"The amounts to be minted per token id\",\"ids\":\"The token ids to mint\",\"to\":\"The address that will own the minted tokens\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"tokenId is one of the EIP2981 args for this function can't be removed\",\"params\":{\"_salePrice\":\"the price of token on which the royalty is calculated\"},\"returns\":{\"receiver\":\"the receiver of royalty\",\"royaltyAmount\":\"the amount of royalty\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"call data should be optimized to order ids so packedBalance can be used efficiently.\",\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"ids\":\"ids of each token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"values\":\"amount of each token type transfered.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"aditional data accompanying the transfer.\",\"from\":\"address from which tokens are transfered.\",\"id\":\"the token type transfered.\",\"to\":\"address to which the token will be transfered.\",\"value\":\"amount of token transfered.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"whether to approve or revoke\",\"operator\":\"address which will be granted rights to transfer all tokens of the caller.\"}},\"setBaseURI(string)\":{\"params\":{\"baseURI\":\"The new base URI\"}},\"setMetadataHash(uint256,string)\":{\"params\":{\"metadataHash\":\"The new URI\",\"tokenId\":\"The token id to set URI for\"}},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"the interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `id`.\"}},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"uri(uint256)\":{\"params\":{\"tokenId\":\"The token id to get URI for\"},\"returns\":{\"_0\":\"tokenURI the URI of the token\"}}},\"title\":\"Catalyst\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNewCatalystType(string)\":{\"notice\":\"Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\"},\"burnBatchFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns a batch of tokens from a specific address\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns a specified amount of tokens from a specific address\"},\"initialize(string,address,address,address,address,string[],address)\":{\"notice\":\"Initialize the contract, setting up initial values for various features.\"},\"mint(address,uint256,uint256)\":{\"notice\":\"Mints a new token, limited to MINTER_ROLE only\"},\"mintBatch(address,uint256[],uint256[])\":{\"notice\":\"Mints a batch of tokens, limited to MINTER_ROLE only\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Returns how much royalty is owed and to whom based on ERC2981\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for `operator` to manage all of the caller's tokens.\"},\"setBaseURI(string)\":{\"notice\":\"Set a new base URI\"},\"setMetadataHash(uint256,string)\":{\"notice\":\"Set a new URI for specific tokenid\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements interface `id`.\"},\"uri(uint256)\":{\"notice\":\"returns full token URI, including baseURI and token metadata URI\"}},\"notice\":\"THis contract manages catalysts which are used to mint new assets.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/asset/contracts/Catalyst.sol\":\"Catalyst\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @author: manifold.xyz\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\nstruct Recipient {\\n    address payable recipient;\\n    uint16 bps;\\n}\\n\\ninterface IRoyaltySplitter is IERC165 {\\n    /**\\n     * @dev Set the splitter recipients. Total bps must total 10000.\\n     */\\n    function setRecipients(Recipient[] calldata recipients) external;\\n\\n    /**\\n     * @dev Get the splitter recipients;\\n     */\\n    function getRecipients() external view returns (Recipient[] memory);\\n}\\n\",\"keccak256\":\"0xc507963f66c4238d25e69d2d05ac5995c549aa89789e89e7a556403221547c6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x1a94069aa241fa1ebb4409d02a405c932d3ad7e875bdd5587c88244da210ccdf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc3e465e1fdd0e491688ad75ef1b946e1680e7f9f78bf5beeefd6daed8693c856\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf51f292659a77777c0ed7375a39683d8bee53b86a6e7bd0c76f34ce7aa37a3a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x048a492eee88c80ecc0354486e8e0ab99490b44a6fb28833b3cfb45d573f18d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Supply_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\\n    }\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf7bdbcbb9fcf42997f280db8c02070e9c561406e6971ff680c6c43f92065ac9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorageUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155URIStorage_init() internal onlyInitializing {\\n        __ERC1155URIStorage_init_unchained();\\n    }\\n\\n    function __ERC1155URIStorage_init_unchained() internal onlyInitializing {\\n        _baseURI = \\\"\\\";\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x9a1218747a17239e2fcab2efc14099379387f114c7ad22c69a23b7d67ec0eaa2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xaffa1f1de8169c3915df40f96e6fe67628aed4d496c6a835e55763dbd0c28f6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/Catalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {ERC1155Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    ERC1155BurnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport {\\n    ERC1155SupplyUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol\\\";\\nimport {\\n    ERC1155URIStorageUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\\\";\\nimport {\\n    IERC165Upgradeable,\\n    ERC2981Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    OperatorFiltererUpgradeable,\\n    IOperatorFilterRegistry\\n} from \\\"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\\\";\\nimport {\\n    RoyaltyDistributor\\n} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltyDistributor.sol\\\";\\nimport {\\n    IRoyaltyManager\\n} from \\\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\\\";\\nimport {IERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {ERC2771Handler} from \\\"./ERC2771Handler.sol\\\";\\nimport {ICatalyst} from \\\"./interfaces/ICatalyst.sol\\\";\\n\\n/// @title Catalyst\\n/// @author The Sandbox\\n/// @notice THis contract manages catalysts which are used to mint new assets.\\n/// @dev An ERC1155 contract that manages catalysts, extends multiple OpenZeppelin contracts to\\n/// provide a variety of features including, AccessControl, URIStorage, Burnable and more.\\n/// The contract includes support for meta transactions.\\ncontract Catalyst is\\n    ICatalyst,\\n    Initializable,\\n    ERC1155Upgradeable,\\n    ERC1155BurnableUpgradeable,\\n    ERC1155SupplyUpgradeable,\\n    ERC1155URIStorageUpgradeable,\\n    ERC2771Handler,\\n    AccessControlUpgradeable,\\n    OperatorFiltererUpgradeable,\\n    RoyaltyDistributor\\n{\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    uint256 public highestTierIndex;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyValidId(uint256 tokenId) {\\n        require(tokenId > 0 && tokenId <= highestTierIndex, \\\"Catalyst: invalid catalyst id\\\");\\n        _;\\n    }\\n\\n    /// @notice Initialize the contract, setting up initial values for various features.\\n    /// @param _baseUri The base URI for the token metadata, most likely set to ipfs://.\\n    /// @param _trustedForwarder The trusted forwarder for meta transactions.\\n    /// @param _subscription The subscription address.\\n    /// @param _defaultAdmin The default admin address.\\n    /// @param _defaultMinter The default minter address.\\n    /// @param _catalystIpfsCID The IPFS content identifiers for each catalyst.\\n    /// @param _royaltyManager, the address of the Manager contract for common royalty recipient\\n    function initialize(\\n        string memory _baseUri,\\n        address _trustedForwarder,\\n        address _subscription,\\n        address _defaultAdmin,\\n        address _defaultMinter,\\n        string[] memory _catalystIpfsCID,\\n        address _royaltyManager\\n    ) public initializer {\\n        require(bytes(_baseUri).length != 0, \\\"Catalyst: base uri can't be empty\\\");\\n        require(_trustedForwarder != address(0), \\\"Catalyst: trusted forwarder can't be zero\\\");\\n        require(_subscription != address(0), \\\"Catalyst: subscription can't be zero\\\");\\n        require(_defaultAdmin != address(0), \\\"Catalyst: admin can't be zero\\\");\\n        require(_defaultMinter != address(0), \\\"Catalyst: minter can't be zero\\\");\\n        require(_royaltyManager != address(0), \\\"Catalyst: royalty manager can't be zero\\\");\\n        __ERC1155_init(_baseUri);\\n        __AccessControl_init();\\n        __ERC1155Burnable_init();\\n        __ERC1155Supply_init();\\n        __ERC1155URIStorage_init();\\n        __ERC2771Handler_initialize(_trustedForwarder);\\n        __OperatorFilterer_init(_subscription, true);\\n        _setBaseURI(_baseUri);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _grantRole(MINTER_ROLE, _defaultMinter);\\n        __RoyaltyDistributor_init(_royaltyManager);\\n        for (uint256 i = 0; i < _catalystIpfsCID.length; i++) {\\n            require(bytes(_catalystIpfsCID[i]).length != 0, \\\"Catalyst: CID can't be empty\\\");\\n            _setURI(i, _catalystIpfsCID[i]);\\n            highestTierIndex = i;\\n        }\\n    }\\n\\n    /// @notice Mints a new token, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted token\\n    /// @param id The token id to mint\\n    /// @param amount The amount to be minted\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external onlyRole(MINTER_ROLE) onlyValidId(id) {\\n        _mint(to, id, amount, \\\"\\\");\\n    }\\n\\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted tokens\\n    /// @param ids The token ids to mint\\n    /// @param amounts The amounts to be minted per token id\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(MINTER_ROLE) {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(ids[i] > 0 && ids[i] <= highestTierIndex, \\\"Catalyst: invalid catalyst id\\\");\\n        }\\n        _mintBatch(to, ids, amounts, \\\"\\\");\\n    }\\n\\n    /// @notice Burns a specified amount of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param id The token id to burn\\n    /// @param amount The amount to be burned\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external onlyRole(BURNER_ROLE) {\\n        _burn(account, id, amount);\\n    }\\n\\n    /// @notice Burns a batch of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param ids The token ids to burn\\n    /// @param amounts The amounts to be burned\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external onlyRole(BURNER_ROLE) {\\n        _burnBatch(account, ids, amounts);\\n    }\\n\\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\\n    /// @param ipfsCID The royalty bps for the catalyst\\n    function addNewCatalystType(string memory ipfsCID) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(ipfsCID).length != 0, \\\"Catalyst: CID can't be empty\\\");\\n        uint256 newCatId = ++highestTierIndex;\\n        ERC1155URIStorageUpgradeable._setURI(newCatId, ipfsCID);\\n        emit NewCatalystTypeAdded(newCatId);\\n    }\\n\\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(trustedForwarder != address(0), \\\"Catalyst: trusted forwarder can't be zero address\\\");\\n        _trustedForwarder = trustedForwarder;\\n        emit TrustedForwarderChanged(trustedForwarder);\\n    }\\n\\n    /// @notice Set a new URI for specific tokenid\\n    /// @param tokenId The token id to set URI for\\n    /// @param metadataHash The new URI\\n    function setMetadataHash(uint256 tokenId, string memory metadataHash)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        onlyValidId(tokenId)\\n    {\\n        require(bytes(metadataHash).length != 0, \\\"Catalyst: metadataHash can't be empty\\\");\\n        _setURI(tokenId, metadataHash);\\n    }\\n\\n    /// @notice Set a new base URI\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string memory baseURI) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(bytes(baseURI).length != 0, \\\"Catalyst: base uri can't be empty\\\");\\n        _setBaseURI(baseURI);\\n    }\\n\\n    /// @notice returns full token URI, including baseURI and token metadata URI\\n    /// @param tokenId The token id to get URI for\\n    /// @return tokenURI the URI of the token\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return ERC1155URIStorageUpgradeable.uri(tokenId);\\n    }\\n\\n    /// @dev Needed for meta transactions (see EIP-2771)\\n    function _msgSender() internal view virtual override(ContextUpgradeable, ERC2771Handler) returns (address) {\\n        return ERC2771Handler._msgSender();\\n    }\\n\\n    /// @dev Needed for meta transactions (see EIP-2771)\\n    function _msgData() internal view virtual override(ContextUpgradeable, ERC2771Handler) returns (bytes calldata) {\\n        return ERC2771Handler._msgData();\\n    }\\n\\n    /// @notice Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call).\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param id the token type transfered.\\n    /// @param value amount of token transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super._safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /// @notice Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call).\\n    /// @dev call data should be optimized to order ids so packedBalance can be used efficiently.\\n    /// @param from address from which tokens are transfered.\\n    /// @param to address to which the token will be transfered.\\n    /// @param ids ids of each token type transfered.\\n    /// @param values amount of each token type transfered.\\n    /// @param data aditional data accompanying the transfer.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super._safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /// @notice Enable or disable approval for `operator` to manage all of the caller's tokens.\\n    /// @param operator address which will be granted rights to transfer all tokens of the caller.\\n    /// @param approved whether to approve or revoke\\n    function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\\n        super._setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param interfaceId the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, AccessControlUpgradeable, RoyaltyDistributor)\\n        returns (bool)\\n    {\\n        return\\n            ERC1155Upgradeable.supportsInterface(interfaceId) ||\\n            AccessControlUpgradeable.supportsInterface(interfaceId) ||\\n            RoyaltyDistributor.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x920c92ecaddb42f2a0fd4fc603cb587ff0452b58850eb2c9ae1af721b86989c0\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.6.0/contracts/metatx/ERC2771Context.sol\\n/// with an initializer for proxies and a mutable forwarder\\n\\nabstract contract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb14f384116bdc60b5fc789de2280bccee214c967416cee1b30fb03e0ce4442d5\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/ICatalyst.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ICatalyst {\\n    enum CatalystType {TSB_EXCLUSIVE, COMMON, UNCOMMON, RARE, EPIC, LEGENDARY, MYTHIC}\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event NewCatalystTypeAdded(uint256 catalystId);\\n    event DefaultRoyaltyChanged(address indexed newDefaultRoyaltyRecipient, uint256 newDefaultRoyaltyAmount);\\n\\n    /// @notice Mints a new token, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted token\\n    /// @param id The token id to mint\\n    /// @param amount The amount to be minted\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Mints a batch of tokens, limited to MINTER_ROLE only\\n    /// @param to The address that will own the minted tokens\\n    /// @param ids The token ids to mint\\n    /// @param amounts The amounts to be minted per token id\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Burns a specified amount of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param id The token id to burn\\n    /// @param amount The amount to be burned\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Burns a batch of tokens from a specific address\\n    /// @param account The address to burn from\\n    /// @param ids The token ids to burn\\n    /// @param amounts The amounts to be burned\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    /// @notice Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only\\n    /// @param ipfsCID The royalty bps for the catalyst\\n    function addNewCatalystType(string memory ipfsCID) external;\\n\\n    /// @notice Set a new URI for specific tokenid\\n    /// @param tokenId The token id to set URI for\\n    /// @param metadataHash The new URI\\n    function setMetadataHash(uint256 tokenId, string memory metadataHash) external;\\n\\n    /// @notice Set a new base URI\\n    /// @param baseURI The new base URI\\n    function setBaseURI(string memory baseURI) external;\\n}\\n\",\"keccak256\":\"0x5490f773ea2894927b789486457e4a25cb19508931846469927eb22e22a6a5f8\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-operator-filter/contracts/OperatorFiltererUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IOperatorFilterRegistry} from \\\"./interfaces/IOperatorFilterRegistry.sol\\\";\\n\\n///@title OperatorFiltererUpgradeable\\n///@author The SandBox\\n///@notice This contract would subscibe or copy or just to the subscription provided or just register to default subscription list. The operator filter registry's addess could be set using a setter which could be implemented in inherting contract\\nabstract contract OperatorFiltererUpgradeable is Initializable {\\n    IOperatorFilterRegistry public operatorFilterRegistry;\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) internal onlyInitializing {\\n        operatorFilterRegistry = IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E); // Address of the operator filterer registry\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        operatorFilterRegistry.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            // Allow spending tokens from addresses with balance\\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n            // from an EOA.\\n            if (from == msg.sender) {\\n                _;\\n                return;\\n            }\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(operatorFilterRegistry).code.length > 0) {\\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\\n                revert(\\\"Operator Not Allowed\\\");\\n            }\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x388dcb899fb3e49bddb5c9fc07db9bdb54584bee4dcf06bf0a6f71bce6f8ea91\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-operator-filter/contracts/interfaces/IOperatorFilterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOperatorFilterRegistry {\\n    /**\\n     * @notice Returns true if operator is not filtered for a given token, either by address or codeHash. Also returns\\n     *         true if supplied registrant address is not registered.\\n     */\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    /**\\n     * @notice Registers an address with the registry. May be called by address itself or by EIP-173 owner.\\n     */\\n    function register(address registrant) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and \\\"subscribes\\\" to another address's filtered operators and codeHashes.\\n     */\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    /**\\n     * @notice Registers an address with the registry and copies the filtered operators and codeHashes from another\\n     *         address without subscribing.\\n     */\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Unregisters an address with the registry and removes its subscription. May be called by address itself or by EIP-173 owner.\\n     *         Note that this does not remove any filtered addresses or codeHashes.\\n     *         Also note that any subscriptions to this registrant will still be active and follow the existing filtered addresses and codehashes.\\n     */\\n    function unregister(address addr) external;\\n\\n    /**\\n     * @notice Update an operator address for a registered address - when filtered is true, the operator is filtered.\\n     */\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update multiple operators for a registered address - when filtered is true, the operators will be filtered. Reverts on duplicates.\\n     */\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update a codeHash for a registered address - when filtered is true, the codeHash is filtered.\\n     */\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Update multiple codeHashes for a registered address - when filtered is true, the codeHashes will be filtered. Reverts on duplicates.\\n     */\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    /**\\n     * @notice Subscribe an address to another registrant's filtered operators and codeHashes. Will remove previous\\n     *         subscription if present.\\n     *         Note that accounts with subscriptions may go on to subscribe to other accounts - in this case,\\n     *         subscriptions will not be forwarded. Instead the former subscription's existing entries will still be\\n     *         used.\\n     */\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    /**\\n     * @notice Unsubscribe an address from its current subscribed registrant, and optionally copy its filtered operators and codeHashes.\\n     */\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    /**\\n     * @notice Get the subscription address of a given registrant, if any.\\n     */\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    /**\\n     * @notice Get the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    /**\\n     * @notice Get the subscriber at a given index in the set of addresses subscribed to a given registrant.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Copy filtered operators and codeHashes from a different registrantToCopy to addr.\\n     */\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    /**\\n     * @notice Returns true if operator is filtered by a given address or its subscription.\\n     */\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if the hash of an address's code is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    /**\\n     * @notice Returns true if a codeHash is filtered by a given address or its subscription.\\n     */\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    /**\\n     * @notice Returns a list of filtered operators for a given address or its subscription.\\n     */\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the set of filtered codeHashes for a given address or its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the filtered operator at the given index of the set of filtered operators for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    /**\\n     * @notice Returns the filtered codeHash at the given index of the list of filtered codeHashes for a given address or\\n     *         its subscription.\\n     *         Note that order is not guaranteed as updates are made.\\n     */\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    /**\\n     * @notice Returns true if an address has registered\\n     */\\n    function isRegistered(address addr) external returns (bool);\\n\\n    /**\\n     * @dev Convenience method to compute the code hash of an arbitrary contract\\n     */\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xbb4f80a4688ec5c4057fcf1e93d1683cee27bbc2eb9ba45fe02664057a4a14c6\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/RoyaltyDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC2981Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {IRoyaltyManager} from \\\"./interfaces/IRoyaltyManager.sol\\\";\\n\\ncontract RoyaltyDistributor is IERC2981Upgradeable {\\n    uint16 internal constant TOTAL_BASIS_POINTS = 10000;\\n    IRoyaltyManager public royaltyManager;\\n\\n    function __RoyaltyDistributor_init(address _royaltyManager) internal {\\n        royaltyManager = IRoyaltyManager(_royaltyManager);\\n    }\\n\\n    /// @notice Returns how much royalty is owed and to whom based on ERC2981\\n    /// @dev tokenId is one of the EIP2981 args for this function can't be removed\\n    /// @param _salePrice the price of token on which the royalty is calculated\\n    /// @return receiver the receiver of royalty\\n    /// @return royaltyAmount the amount of royalty\\n    function royaltyInfo(\\n        uint256, /*_tokenId */\\n        uint256 _salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount) {\\n        uint16 royaltyBps;\\n        (receiver, royaltyBps) = royaltyManager.getRoyaltyInfo();\\n        royaltyAmount = (_salePrice * royaltyBps) / TOTAL_BASIS_POINTS;\\n        return (receiver, royaltyAmount);\\n    }\\n\\n    /// @notice Query if a contract implements interface `id`.\\n    /// @param interfaceId the interface identifier, as specified in ERC-165.\\n    /// @return `true` if the contract implements `id`.\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xb9704440b2f9d4ff07efd69bf924e4bed7ac7e6ea3b803b11beef3911b95ad5a\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-royalty-management/contracts/interfaces/IRoyaltyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Recipient} from \\\"@manifoldxyz/royalty-registry-solidity/contracts/overrides/IRoyaltySplitter.sol\\\";\\n\\ninterface IRoyaltyManager {\\n    event RecipientSet(address commonRecipient);\\n\\n    event SplitSet(uint16 commonSplit);\\n\\n    event RoyaltySet(uint16 royaltyBps, address contractAddress);\\n\\n    function setRecipient(address payable _commonRecipient) external;\\n\\n    function setSplit(uint16 commonSplit) external;\\n\\n    function getCommonRecipient() external view returns (Recipient memory recipient);\\n\\n    function getCreatorSplit() external view returns (uint16);\\n\\n    function getRoyaltyInfo() external view returns (address, uint16);\\n\\n    function deploySplitter(address creator, address payable recipient) external returns (address payable);\\n\\n    function getCreatorRoyaltySplitter(address creator) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0xc8b99b6b99b16710c62981dda1265f9429b423e295b6068f0fb128730a4bbf3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61434e80620000f36000396000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c8063572b6c0511610145578063d5391393116100bd578063e985e9c51161008c578063f242432a11610071578063f242432a146105bd578063f3bdecc1146105d0578063f5298aca146105e357600080fd5b8063e985e9c51461056d578063ee295d62146105a957600080fd5b8063d53913931461050d578063d547741f14610534578063d81d0a1514610547578063da7422281461055a57600080fd5b8063a217fddf11610114578063b0ccc31e116100f9578063b0ccc31e146104af578063bd85b039146104db578063ce1b815f146104fb57600080fd5b8063a217fddf14610494578063a22cb4651461049c57600080fd5b8063572b6c051461041a5780636b20c4541461043d57806371e0276c1461045057806391d148541461045a57600080fd5b8063282c51f3116101d857806336568abe116101a75780634f558e791161018c5780634f558e79146103d2578063512c97e9146103f457806355f804b31461040757600080fd5b806336568abe1461039f5780634e1273f4146103b257600080fd5b8063282c51f3146103205780632a55205a146103475780632eb2c2d6146103795780632f2ff15d1461038c57600080fd5b8063156e29f611610214578063156e29f6146102c35780631a87b277146102d657806320820ec3146102e9578063248a9ca3146102fc57600080fd5b8062fdd58e1461024557806301ffc9a71461026b5780630e89341c1461028e578063124d91e5146102ae575b600080fd5b61025861025336600461369c565b6105f6565b6040519081526020015b60405180910390f35b61027e6102793660046136de565b6106a4565b6040519015158152602001610262565b6102a161029c3660046136fb565b6106f6565b6040516102629190613764565b6102c16102bc366004613777565b610701565b005b6102c16102d1366004613777565b61073c565b6102c16102e4366004613863565b6107e8565b6102c16102f7366004613935565b61089f565b61025861030a3660046136fb565b600090815261012e602052604090206001015490565b6102587f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61035a6103553660046139ab565b6108d4565b604080516001600160a01b039093168352602083019190915201610262565b6102c16103873660046139cd565b61097a565b6102c161039a366004613a7b565b610a85565b6102c16103ad366004613a7b565b610ab0565b6103c56103c0366004613aab565b610b4c565b6040516102629190613ba9565b61027e6103e03660046136fb565b600090815260c96020526040902054151590565b6102c1610402366004613bbc565b610c8a565b6102c1610415366004613863565b610d76565b61027e610428366004613bf9565b61012d546001600160a01b0391821691161490565b6102c161044b366004613935565b610e01565b6102586101625481565b61027e610468366004613a7b565b600091825261012e602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610258600081565b6102c16104aa366004613c24565b610eac565b610160546104c3906001600160a01b031681565b6040516001600160a01b039091168152602001610262565b6102586104e93660046136fb565b600090815260c9602052604090205490565b61012d546001600160a01b03166104c3565b6102587f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102c1610542366004613a7b565b610f94565b6102c1610555366004613935565b610fba565b6102c1610568366004613bf9565b6110af565b61027e61057b366004613c52565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b610161546104c3906001600160a01b031681565b6102c16105cb366004613c80565b61118f565b6102c16105de366004613ce9565b61128d565b6102c16105f1366004613777565b6117b8565b60006001600160a01b0383166106795760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006106af82611863565b806106be57506106be826118fe565b8061069e57507f2a55205a000000000000000000000000000000000000000000000000000000006001600160e01b031983161461069e565b606061069e8261193c565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84861072b81611a1c565b610736848484611a30565b50505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661076681611a1c565b8260008111801561077a5750610162548111155b6107c65760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c7973742069640000006044820152606401610670565b6107e185858560405180602001604052806000815250611c07565b5050505050565b60006107f381611a1c565b81516000036108445760405162461bcd60e51b815260206004820152601c60248201527f436174616c7973743a204349442063616e277420626520656d707479000000006044820152606401610670565b60006101626000815461085690613e3b565b918290555090506108678184611d4a565b6040518181527f0fc221b41b73e1c4f9d65566cf090e650d0246fb5c0434a32e9b313a39636d169060200160405180910390a1505050565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486108c981611a1c565b610736848484611da7565b600080600061016160009054906101000a90046001600160a01b03166001600160a01b031663a86a28d16040518163ffffffff1660e01b81526004016040805180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190613e55565b909350905061271061096661ffff831686613e8b565b6109709190613ea2565b9150509250929050565b6101605485906001600160a01b03163b15610a7057336001600160a01b038216036109b1576109ac8686868686612039565b610a7d565b61016054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a249190613ec4565b610a705760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f7765640000000000000000000000006044820152606401610670565b610a7d8686868686612039565b505050505050565b600082815261012e6020526040902060010154610aa181611a1c565b610aab83836122d6565b505050565b610ab861237b565b6001600160a01b0316816001600160a01b031614610b3e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610670565b610b48828261238a565b5050565b60608151835114610bc55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610670565b6000835167ffffffffffffffff811115610be157610be16137ac565b604051908082528060200260200182016040528015610c0a578160200160208202803683370190505b50905060005b8451811015610c8257610c55858281518110610c2e57610c2e613ee1565b6020026020010151858381518110610c4857610c48613ee1565b60200260200101516105f6565b828281518110610c6757610c67613ee1565b6020908102919091010152610c7b81613e3b565b9050610c10565b509392505050565b6000610c9581611a1c565b82600081118015610ca95750610162548111155b610cf55760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c7973742069640000006044820152606401610670565b8251600003610d6c5760405162461bcd60e51b815260206004820152602560248201527f436174616c7973743a206d65746164617461486173682063616e27742062652060448201527f656d7074790000000000000000000000000000000000000000000000000000006064820152608401610670565b6107368484611d4a565b6000610d8181611a1c565b8151600003610df85760405162461bcd60e51b815260206004820152602160248201527f436174616c7973743a2062617365207572692063616e277420626520656d707460448201527f79000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b610b488261242d565b610e0961237b565b6001600160a01b0316836001600160a01b03161480610e2f5750610e2f8361057b61237b565b610ea15760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610670565b610aab838383611da7565b6101605482906001600160a01b03163b15610f825761016054604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190613ec4565b610f825760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f7765640000000000000000000000006044820152606401610670565b610aab610f8d61237b565b8484612439565b600082815261012e6020526040902060010154610fb081611a1c565b610aab838361238a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610fe481611a1c565b60005b835181101561109357600084828151811061100457611004613ee1565b602002602001015111801561103557506101625484828151811061102a5761102a613ee1565b602002602001015111155b6110815760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c7973742069640000006044820152606401610670565b8061108b81613e3b565b915050610fe7565b506107368484846040518060200160405280600081525061252d565b60006110ba81611a1c565b6001600160a01b0382166111365760405162461bcd60e51b815260206004820152603160248201527f436174616c7973743a207472757374656420666f727761726465722063616e2760448201527f74206265207a65726f20616464726573730000000000000000000000000000006064820152608401610670565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901890600090a25050565b6101605485906001600160a01b03163b1561128057336001600160a01b038216036111c1576109ac868686868661272a565b61016054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190613ec4565b6112805760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f7765640000000000000000000000006044820152606401610670565b610a7d868686868661272a565b600054610100900460ff16158080156112ad5750600054600160ff909116105b806112c75750303b1580156112c7575060005460ff166001145b6113395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610670565b6000805460ff19166001179055801561135c576000805461ff0019166101001790555b87516000036113d35760405162461bcd60e51b815260206004820152602160248201527f436174616c7973743a2062617365207572692063616e277420626520656d707460448201527f79000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b03871661144f5760405162461bcd60e51b815260206004820152602960248201527f436174616c7973743a207472757374656420666f727761726465722063616e2760448201527f74206265207a65726f00000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b0386166114ca5760405162461bcd60e51b8152602060048201526024808201527f436174616c7973743a20737562736372697074696f6e2063616e27742062652060448201527f7a65726f000000000000000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b0385166115205760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a2061646d696e2063616e2774206265207a65726f0000006044820152606401610670565b6001600160a01b0384166115765760405162461bcd60e51b815260206004820152601e60248201527f436174616c7973743a206d696e7465722063616e2774206265207a65726f00006044820152606401610670565b6001600160a01b0382166115f25760405162461bcd60e51b815260206004820152602760248201527f436174616c7973743a20726f79616c7479206d616e616765722063616e27742060448201527f6265207a65726f000000000000000000000000000000000000000000000000006064820152608401610670565b6115fb8861291d565b611603612991565b61160b612991565b611613612991565b61161b6129fe565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905561164f866001612a71565b6116588861242d565b6116636000866122d6565b61168d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6856122d6565b610161805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905560005b8351811015611767578381815181106116d4576116d4613ee1565b60200260200101515160000361172c5760405162461bcd60e51b815260206004820152601c60248201527f436174616c7973743a204349442063616e277420626520656d707479000000006044820152606401610670565b61174f8185838151811061174257611742613ee1565b6020026020010151611d4a565b6101628190558061175f81613e3b565b9150506116b9565b5080156117ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6117c061237b565b6001600160a01b0316836001600160a01b031614806117e657506117e68361057b61237b565b6118585760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610670565b610aab838383611a30565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806118c657506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061069e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461069e565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061069e575061069e82611863565b600081815260fc602052604081208054606092919061195a90613ef7565b80601f016020809104026020016040519081016040528092919081815260200182805461198690613ef7565b80156119d35780601f106119a8576101008083540402835291602001916119d3565b820191906000526020600020905b8154815290600101906020018083116119b657829003601f168201915b5050505050905060008151116119f1576119ec83612ccc565b611a15565b60fb81604051602001611a05929190613f31565b6040516020818303038152906040525b9392505050565b611a2d81611a2861237b565b612d60565b50565b6001600160a01b038316611aac5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610670565b6000611ab661237b565b90506000611ac384612dd6565b90506000611ad084612dd6565b9050611af083876000858560405180602001604052806000815250612e21565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015611b885760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610670565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6001600160a01b038416611c835760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b6000611c8d61237b565b90506000611c9a85612dd6565b90506000611ca785612dd6565b9050611cb883600089858589612e21565b60008681526065602090815260408083206001600160a01b038b16845290915281208054879290611cea908490613fb8565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bfe83600089898989612e2f565b600082815260fc60205260409020611d628282614011565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b611d8e846106f6565b604051611d9b9190613764565b60405180910390a25050565b6001600160a01b038316611e235760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610670565b8051825114611e855760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610670565b6000611e8f61237b565b9050611eaf81856000868660405180602001604052806000815250612e21565b60005b8351811015611fcc576000848281518110611ecf57611ecf613ee1565b602002602001015190506000848381518110611eed57611eed613ee1565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611f935760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610670565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611fc481613e3b565b915050611eb2565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161201d9291906140d1565b60405180910390a4604080516020810190915260009052610736565b815183511461209b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610670565b6001600160a01b0384166121175760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610670565b600061212161237b565b9050612131818787878787612e21565b60005b845181101561227057600085828151811061215157612151613ee1565b60200260200101519050600085838151811061216f5761216f613ee1565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156122165760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610670565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612255908490613fb8565b925050819055505050508061226990613e3b565b9050612134565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122c09291906140d1565b60405180910390a4610a7d81878787878761301b565b600082815261012e602090815260408083206001600160a01b038516845290915290205460ff16610b4857600082815261012e602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561233761237b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061238561315e565b905090565b600082815261012e602090815260408083206001600160a01b038516845290915290205460ff1615610b4857600082815261012e602090815260408083206001600160a01b03851684529091529020805460ff191690556123e961237b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60fb610b488282614011565b816001600160a01b0316836001600160a01b0316036124c05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166125a95760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b815183511461260b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610670565b600061261561237b565b905061262681600087878787612e21565b60005b84518110156126c25783818151811061264457612644613ee1565b60200260200101516065600087848151811061266257612662613ee1565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546126aa9190613fb8565b909155508190506126ba81613e3b565b915050612629565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516127139291906140d1565b60405180910390a46107e18160008787878761301b565b6001600160a01b0384166127a65760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610670565b60006127b061237b565b905060006127bd85612dd6565b905060006127ca85612dd6565b90506127da838989858589612e21565b60008681526065602090815260408083206001600160a01b038c168452909152902054858110156128735760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610670565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906128b2908490613fb8565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612912848a8a8a8a8a612e2f565b505050505050505050565b600054610100900460ff166129885760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b611a2d816131a7565b600054610100900460ff166129fc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b565b600054610100900460ff16612a695760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b6129fc61321b565b600054610100900460ff16612adc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b610160805473ffffffffffffffffffffffffffffffffffffffff19166daaeb6d7670e522a718067333cd4e9081179091553b15610b4857610160546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a547906024016020604051808303816000875af1158015612b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9b9190613ec4565b610b48578015612c2157610160546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b158015612c0d57600080fd5b505af1158015610a7d573d6000803e3d6000fd5b6001600160a01b03821615612c8257610160546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401612bf3565b610160546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401612bf3565b606060678054612cdb90613ef7565b80601f0160208091040260200160405190810160405280929190818152602001828054612d0790613ef7565b8015612d545780601f10612d2957610100808354040283529160200191612d54565b820191906000526020600020905b815481529060010190602001808311612d3757829003601f168201915b50505050509050919050565b600082815261012e602090815260408083206001600160a01b038516845290915290205460ff16610b4857612d94816132a2565b612d9f8360206132b4565b604051602001612db09291906140ff565b60408051601f198184030181529082905262461bcd60e51b825261067091600401613764565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612e1057612e10613ee1565b602090810291909101015292915050565b610a7d8686868686866134dd565b6001600160a01b0384163b15610a7d576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190612e8c9089908990889088908890600401614180565b6020604051808303816000875af1925050508015612ec7575060408051601f3d908101601f19168201909252612ec4918101906141c3565b60015b612f7c57612ed36141e0565b806308c379a003612f0c5750612ee76141fb565b80612ef25750612f0e565b8060405162461bcd60e51b81526004016106709190613764565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610670565b6001600160e01b031981167ff23a6e610000000000000000000000000000000000000000000000000000000014611bfe5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b0384163b15610a7d576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c819061307890899089908890889088906004016142a3565b6020604051808303816000875af19250505080156130b3575060408051601f3d908101601f191682019092526130b0918101906141c3565b60015b6130bf57612ed36141e0565b6001600160e01b031981167fbc197c810000000000000000000000000000000000000000000000000000000014611bfe5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610670565b61012d546000906001600160a01b0316330361319f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b90565b600054610100900460ff166132125760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b611a2d8161366b565b600054610100900460ff166132865760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b60408051602081019091526000815260fb90611a2d9082614011565b606061069e6001600160a01b03831660145b606060006132c3836002613e8b565b6132ce906002613fb8565b67ffffffffffffffff8111156132e6576132e66137ac565b6040519080825280601f01601f191660200182016040528015613310576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061334757613347613ee1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106133aa576133aa613ee1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006133e6846002613e8b565b6133f1906001613fb8565b90505b600181111561348e577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061343257613432613ee1565b1a60f81b82828151811061344857613448613ee1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361348781614301565b90506133f4565b508315611a155760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610670565b6001600160a01b0385166135645760005b83518110156135625782818151811061350957613509613ee1565b602002602001015160c9600086848151811061352757613527613ee1565b60200260200101518152602001908152602001600020600082825461354c9190613fb8565b9091555061355b905081613e3b565b90506134ee565b505b6001600160a01b038416610a7d5760005b8351811015611bfe57600084828151811061359257613592613ee1565b6020026020010151905060008483815181106135b0576135b0613ee1565b60200260200101519050600060c96000848152602001908152602001600020549050818110156136485760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610670565b600092835260c960205260409092209103905561366481613e3b565b9050613575565b6067610b488282614011565b6001600160a01b0381168114611a2d57600080fd5b803561369781613677565b919050565b600080604083850312156136af57600080fd5b82356136ba81613677565b946020939093013593505050565b6001600160e01b031981168114611a2d57600080fd5b6000602082840312156136f057600080fd5b8135611a15816136c8565b60006020828403121561370d57600080fd5b5035919050565b60005b8381101561372f578181015183820152602001613717565b50506000910152565b60008151808452613750816020860160208601613714565b601f01601f19169290920160200192915050565b602081526000611a156020830184613738565b60008060006060848603121561378c57600080fd5b833561379781613677565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156137e8576137e86137ac565b6040525050565b600082601f83011261380057600080fd5b813567ffffffffffffffff81111561381a5761381a6137ac565b6040516138316020601f19601f85011601826137c2565b81815284602083860101111561384657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561387557600080fd5b813567ffffffffffffffff81111561388c57600080fd5b613898848285016137ef565b949350505050565b600067ffffffffffffffff8211156138ba576138ba6137ac565b5060051b60200190565b600082601f8301126138d557600080fd5b813560206138e2826138a0565b6040516138ef82826137c2565b83815260059390931b850182019282810191508684111561390f57600080fd5b8286015b8481101561392a5780358352918301918301613913565b509695505050505050565b60008060006060848603121561394a57600080fd5b833561395581613677565b9250602084013567ffffffffffffffff8082111561397257600080fd5b61397e878388016138c4565b9350604086013591508082111561399457600080fd5b506139a1868287016138c4565b9150509250925092565b600080604083850312156139be57600080fd5b50508035926020909101359150565b600080600080600060a086880312156139e557600080fd5b85356139f081613677565b94506020860135613a0081613677565b9350604086013567ffffffffffffffff80821115613a1d57600080fd5b613a2989838a016138c4565b94506060880135915080821115613a3f57600080fd5b613a4b89838a016138c4565b93506080880135915080821115613a6157600080fd5b50613a6e888289016137ef565b9150509295509295909350565b60008060408385031215613a8e57600080fd5b823591506020830135613aa081613677565b809150509250929050565b60008060408385031215613abe57600080fd5b823567ffffffffffffffff80821115613ad657600080fd5b818501915085601f830112613aea57600080fd5b81356020613af7826138a0565b604051613b0482826137c2565b83815260059390931b8501820192828101915089841115613b2457600080fd5b948201945b83861015613b4b578535613b3c81613677565b82529482019490820190613b29565b96505086013592505080821115613b6157600080fd5b50610970858286016138c4565b600081518084526020808501945080840160005b83811015613b9e57815187529582019590820190600101613b82565b509495945050505050565b602081526000611a156020830184613b6e565b60008060408385031215613bcf57600080fd5b82359150602083013567ffffffffffffffff811115613bed57600080fd5b610970858286016137ef565b600060208284031215613c0b57600080fd5b8135611a1581613677565b8015158114611a2d57600080fd5b60008060408385031215613c3757600080fd5b8235613c4281613677565b91506020830135613aa081613c16565b60008060408385031215613c6557600080fd5b8235613c7081613677565b91506020830135613aa081613677565b600080600080600060a08688031215613c9857600080fd5b8535613ca381613677565b94506020860135613cb381613677565b93506040860135925060608601359150608086013567ffffffffffffffff811115613cdd57600080fd5b613a6e888289016137ef565b600080600080600080600060e0888a031215613d0457600080fd5b67ffffffffffffffff8089351115613d1b57600080fd5b613d288a8a358b016137ef565b97506020890135613d3881613677565b96506040890135613d4881613677565b95506060890135613d5881613677565b94506080890135613d6881613677565b935060a089013581811115613d7c57600080fd5b8901601f81018b13613d8d57600080fd5b8035613d98816138a0565b604051613da582826137c2565b80915082815260208101915060208360051b85010192508d831115613dc957600080fd5b602084015b83811015613e02578581351115613de457600080fd5b613df48f602083358801016137ef565b835260209283019201613dce565b508096505050505050613e1760c0890161368c565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b60006000198203613e4e57613e4e613e25565b5060010190565b60008060408385031215613e6857600080fd5b8251613e7381613677565b602084015190925061ffff81168114613aa057600080fd5b808202811582820484141761069e5761069e613e25565b600082613ebf57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613ed657600080fd5b8151611a1581613c16565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680613f0b57607f821691505b602082108103613f2b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454613f3f81613ef7565b60018281168015613f575760018114613f6c57613f9b565b60ff1984168752821515830287019450613f9b565b8860005260208060002060005b85811015613f925781548a820152908401908201613f79565b50505082870194505b505050508351613faf818360208801613714565b01949350505050565b8082018082111561069e5761069e613e25565b601f821115610aab57600081815260208120601f850160051c81016020861015613ff25750805b601f850160051c820191505b81811015610a7d57828155600101613ffe565b815167ffffffffffffffff81111561402b5761402b6137ac565b61403f816140398454613ef7565b84613fcb565b602080601f831160018114614074576000841561405c5750858301515b600019600386901b1c1916600185901b178555610a7d565b600085815260208120601f198616915b828110156140a357888601518255948401946001909101908401614084565b50858210156140c15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006140e46040830185613b6e565b82810360208401526140f68185613b6e565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614137816017850160208801613714565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614174816028840160208801613714565b01602801949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526141b860a0830184613738565b979650505050505050565b6000602082840312156141d557600080fd5b8151611a15816136c8565b600060033d11156131a45760046000803e5060005160e01c90565b600060443d10156142095790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561425757505050505090565b828501915081518181111561426f5750505050505090565b843d87010160208285010111156142895750505050505090565b614298602082860101876137c2565b509095945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526142cf60a0830186613b6e565b82810360608401526142e18186613b6e565b905082810360808401526142f58185613738565b98975050505050505050565b60008161431057614310613e25565b50600019019056fea2646970667358221220532d072420a26a9e791c4bdcaa40be4e45a24a387b48c4d598c7c0ed5c65ce8c64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102405760003560e01c8063572b6c0511610145578063d5391393116100bd578063e985e9c51161008c578063f242432a11610071578063f242432a146105bd578063f3bdecc1146105d0578063f5298aca146105e357600080fd5b8063e985e9c51461056d578063ee295d62146105a957600080fd5b8063d53913931461050d578063d547741f14610534578063d81d0a1514610547578063da7422281461055a57600080fd5b8063a217fddf11610114578063b0ccc31e116100f9578063b0ccc31e146104af578063bd85b039146104db578063ce1b815f146104fb57600080fd5b8063a217fddf14610494578063a22cb4651461049c57600080fd5b8063572b6c051461041a5780636b20c4541461043d57806371e0276c1461045057806391d148541461045a57600080fd5b8063282c51f3116101d857806336568abe116101a75780634f558e791161018c5780634f558e79146103d2578063512c97e9146103f457806355f804b31461040757600080fd5b806336568abe1461039f5780634e1273f4146103b257600080fd5b8063282c51f3146103205780632a55205a146103475780632eb2c2d6146103795780632f2ff15d1461038c57600080fd5b8063156e29f611610214578063156e29f6146102c35780631a87b277146102d657806320820ec3146102e9578063248a9ca3146102fc57600080fd5b8062fdd58e1461024557806301ffc9a71461026b5780630e89341c1461028e578063124d91e5146102ae575b600080fd5b61025861025336600461369c565b6105f6565b6040519081526020015b60405180910390f35b61027e6102793660046136de565b6106a4565b6040519015158152602001610262565b6102a161029c3660046136fb565b6106f6565b6040516102629190613764565b6102c16102bc366004613777565b610701565b005b6102c16102d1366004613777565b61073c565b6102c16102e4366004613863565b6107e8565b6102c16102f7366004613935565b61089f565b61025861030a3660046136fb565b600090815261012e602052604090206001015490565b6102587f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84881565b61035a6103553660046139ab565b6108d4565b604080516001600160a01b039093168352602083019190915201610262565b6102c16103873660046139cd565b61097a565b6102c161039a366004613a7b565b610a85565b6102c16103ad366004613a7b565b610ab0565b6103c56103c0366004613aab565b610b4c565b6040516102629190613ba9565b61027e6103e03660046136fb565b600090815260c96020526040902054151590565b6102c1610402366004613bbc565b610c8a565b6102c1610415366004613863565b610d76565b61027e610428366004613bf9565b61012d546001600160a01b0391821691161490565b6102c161044b366004613935565b610e01565b6102586101625481565b61027e610468366004613a7b565b600091825261012e602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610258600081565b6102c16104aa366004613c24565b610eac565b610160546104c3906001600160a01b031681565b6040516001600160a01b039091168152602001610262565b6102586104e93660046136fb565b600090815260c9602052604090205490565b61012d546001600160a01b03166104c3565b6102587f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102c1610542366004613a7b565b610f94565b6102c1610555366004613935565b610fba565b6102c1610568366004613bf9565b6110af565b61027e61057b366004613c52565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b610161546104c3906001600160a01b031681565b6102c16105cb366004613c80565b61118f565b6102c16105de366004613ce9565b61128d565b6102c16105f1366004613777565b6117b8565b60006001600160a01b0383166106795760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060008181526065602090815260408083206001600160a01b03861684529091529020545b92915050565b60006106af82611863565b806106be57506106be826118fe565b8061069e57507f2a55205a000000000000000000000000000000000000000000000000000000006001600160e01b031983161461069e565b606061069e8261193c565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a84861072b81611a1c565b610736848484611a30565b50505050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661076681611a1c565b8260008111801561077a5750610162548111155b6107c65760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c7973742069640000006044820152606401610670565b6107e185858560405180602001604052806000815250611c07565b5050505050565b60006107f381611a1c565b81516000036108445760405162461bcd60e51b815260206004820152601c60248201527f436174616c7973743a204349442063616e277420626520656d707479000000006044820152606401610670565b60006101626000815461085690613e3b565b918290555090506108678184611d4a565b6040518181527f0fc221b41b73e1c4f9d65566cf090e650d0246fb5c0434a32e9b313a39636d169060200160405180910390a1505050565b7f3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a8486108c981611a1c565b610736848484611da7565b600080600061016160009054906101000a90046001600160a01b03166001600160a01b031663a86a28d16040518163ffffffff1660e01b81526004016040805180830381865afa15801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190613e55565b909350905061271061096661ffff831686613e8b565b6109709190613ea2565b9150509250929050565b6101605485906001600160a01b03163b15610a7057336001600160a01b038216036109b1576109ac8686868686612039565b610a7d565b61016054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a249190613ec4565b610a705760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f7765640000000000000000000000006044820152606401610670565b610a7d8686868686612039565b505050505050565b600082815261012e6020526040902060010154610aa181611a1c565b610aab83836122d6565b505050565b610ab861237b565b6001600160a01b0316816001600160a01b031614610b3e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610670565b610b48828261238a565b5050565b60608151835114610bc55760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610670565b6000835167ffffffffffffffff811115610be157610be16137ac565b604051908082528060200260200182016040528015610c0a578160200160208202803683370190505b50905060005b8451811015610c8257610c55858281518110610c2e57610c2e613ee1565b6020026020010151858381518110610c4857610c48613ee1565b60200260200101516105f6565b828281518110610c6757610c67613ee1565b6020908102919091010152610c7b81613e3b565b9050610c10565b509392505050565b6000610c9581611a1c565b82600081118015610ca95750610162548111155b610cf55760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c7973742069640000006044820152606401610670565b8251600003610d6c5760405162461bcd60e51b815260206004820152602560248201527f436174616c7973743a206d65746164617461486173682063616e27742062652060448201527f656d7074790000000000000000000000000000000000000000000000000000006064820152608401610670565b6107368484611d4a565b6000610d8181611a1c565b8151600003610df85760405162461bcd60e51b815260206004820152602160248201527f436174616c7973743a2062617365207572692063616e277420626520656d707460448201527f79000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b610b488261242d565b610e0961237b565b6001600160a01b0316836001600160a01b03161480610e2f5750610e2f8361057b61237b565b610ea15760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610670565b610aab838383611da7565b6101605482906001600160a01b03163b15610f825761016054604051633185c44d60e21b81523060048201526001600160a01b0383811660248301529091169063c617113490604401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190613ec4565b610f825760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f7765640000000000000000000000006044820152606401610670565b610aab610f8d61237b565b8484612439565b600082815261012e6020526040902060010154610fb081611a1c565b610aab838361238a565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610fe481611a1c565b60005b835181101561109357600084828151811061100457611004613ee1565b602002602001015111801561103557506101625484828151811061102a5761102a613ee1565b602002602001015111155b6110815760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a20696e76616c696420636174616c7973742069640000006044820152606401610670565b8061108b81613e3b565b915050610fe7565b506107368484846040518060200160405280600081525061252d565b60006110ba81611a1c565b6001600160a01b0382166111365760405162461bcd60e51b815260206004820152603160248201527f436174616c7973743a207472757374656420666f727761726465722063616e2760448201527f74206265207a65726f20616464726573730000000000000000000000000000006064820152608401610670565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517f871264f4293af7d2865ae7eae628b228f4991c57cb45b39c99f0b774ebe2901890600090a25050565b6101605485906001600160a01b03163b1561128057336001600160a01b038216036111c1576109ac868686868661272a565b61016054604051633185c44d60e21b81523060048201523360248201526001600160a01b039091169063c617113490604401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190613ec4565b6112805760405162461bcd60e51b815260206004820152601460248201527f4f70657261746f72204e6f7420416c6c6f7765640000000000000000000000006044820152606401610670565b610a7d868686868661272a565b600054610100900460ff16158080156112ad5750600054600160ff909116105b806112c75750303b1580156112c7575060005460ff166001145b6113395760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610670565b6000805460ff19166001179055801561135c576000805461ff0019166101001790555b87516000036113d35760405162461bcd60e51b815260206004820152602160248201527f436174616c7973743a2062617365207572692063616e277420626520656d707460448201527f79000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b03871661144f5760405162461bcd60e51b815260206004820152602960248201527f436174616c7973743a207472757374656420666f727761726465722063616e2760448201527f74206265207a65726f00000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b0386166114ca5760405162461bcd60e51b8152602060048201526024808201527f436174616c7973743a20737562736372697074696f6e2063616e27742062652060448201527f7a65726f000000000000000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b0385166115205760405162461bcd60e51b815260206004820152601d60248201527f436174616c7973743a2061646d696e2063616e2774206265207a65726f0000006044820152606401610670565b6001600160a01b0384166115765760405162461bcd60e51b815260206004820152601e60248201527f436174616c7973743a206d696e7465722063616e2774206265207a65726f00006044820152606401610670565b6001600160a01b0382166115f25760405162461bcd60e51b815260206004820152602760248201527f436174616c7973743a20726f79616c7479206d616e616765722063616e27742060448201527f6265207a65726f000000000000000000000000000000000000000000000000006064820152608401610670565b6115fb8861291d565b611603612991565b61160b612991565b611613612991565b61161b6129fe565b61012d805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03891617905561164f866001612a71565b6116588861242d565b6116636000866122d6565b61168d7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6856122d6565b610161805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905560005b8351811015611767578381815181106116d4576116d4613ee1565b60200260200101515160000361172c5760405162461bcd60e51b815260206004820152601c60248201527f436174616c7973743a204349442063616e277420626520656d707479000000006044820152606401610670565b61174f8185838151811061174257611742613ee1565b6020026020010151611d4a565b6101628190558061175f81613e3b565b9150506116b9565b5080156117ae576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6117c061237b565b6001600160a01b0316836001600160a01b031614806117e657506117e68361057b61237b565b6118585760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610670565b610aab838383611a30565b60006001600160e01b031982167fd9b67a260000000000000000000000000000000000000000000000000000000014806118c657506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061069e57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461069e565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061069e575061069e82611863565b600081815260fc602052604081208054606092919061195a90613ef7565b80601f016020809104026020016040519081016040528092919081815260200182805461198690613ef7565b80156119d35780601f106119a8576101008083540402835291602001916119d3565b820191906000526020600020905b8154815290600101906020018083116119b657829003601f168201915b5050505050905060008151116119f1576119ec83612ccc565b611a15565b60fb81604051602001611a05929190613f31565b6040516020818303038152906040525b9392505050565b611a2d81611a2861237b565b612d60565b50565b6001600160a01b038316611aac5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610670565b6000611ab661237b565b90506000611ac384612dd6565b90506000611ad084612dd6565b9050611af083876000858560405180602001604052806000815250612e21565b60008581526065602090815260408083206001600160a01b038a16845290915290205484811015611b885760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610670565b60008681526065602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b6001600160a01b038416611c835760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b6000611c8d61237b565b90506000611c9a85612dd6565b90506000611ca785612dd6565b9050611cb883600089858589612e21565b60008681526065602090815260408083206001600160a01b038b16845290915281208054879290611cea908490613fb8565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bfe83600089898989612e2f565b600082815260fc60205260409020611d628282614011565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b611d8e846106f6565b604051611d9b9190613764565b60405180910390a25050565b6001600160a01b038316611e235760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610670565b8051825114611e855760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610670565b6000611e8f61237b565b9050611eaf81856000868660405180602001604052806000815250612e21565b60005b8351811015611fcc576000848281518110611ecf57611ecf613ee1565b602002602001015190506000848381518110611eed57611eed613ee1565b60209081029190910181015160008481526065835260408082206001600160a01b038c168352909352919091205490915081811015611f935760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610670565b60009283526065602090815260408085206001600160a01b038b1686529091529092209103905580611fc481613e3b565b915050611eb2565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161201d9291906140d1565b60405180910390a4604080516020810190915260009052610736565b815183511461209b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610670565b6001600160a01b0384166121175760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610670565b600061212161237b565b9050612131818787878787612e21565b60005b845181101561227057600085828151811061215157612151613ee1565b60200260200101519050600085838151811061216f5761216f613ee1565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156122165760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610670565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612255908490613fb8565b925050819055505050508061226990613e3b565b9050612134565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516122c09291906140d1565b60405180910390a4610a7d81878787878761301b565b600082815261012e602090815260408083206001600160a01b038516845290915290205460ff16610b4857600082815261012e602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561233761237b565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600061238561315e565b905090565b600082815261012e602090815260408083206001600160a01b038516845290915290205460ff1615610b4857600082815261012e602090815260408083206001600160a01b03851684529091529020805460ff191690556123e961237b565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60fb610b488282614011565b816001600160a01b0316836001600160a01b0316036124c05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166125a95760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610670565b815183511461260b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610670565b600061261561237b565b905061262681600087878787612e21565b60005b84518110156126c25783818151811061264457612644613ee1565b60200260200101516065600087848151811061266257612662613ee1565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546126aa9190613fb8565b909155508190506126ba81613e3b565b915050612629565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516127139291906140d1565b60405180910390a46107e18160008787878761301b565b6001600160a01b0384166127a65760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610670565b60006127b061237b565b905060006127bd85612dd6565b905060006127ca85612dd6565b90506127da838989858589612e21565b60008681526065602090815260408083206001600160a01b038c168452909152902054858110156128735760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610670565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906128b2908490613fb8565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612912848a8a8a8a8a612e2f565b505050505050505050565b600054610100900460ff166129885760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b611a2d816131a7565b600054610100900460ff166129fc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b565b600054610100900460ff16612a695760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b6129fc61321b565b600054610100900460ff16612adc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b610160805473ffffffffffffffffffffffffffffffffffffffff19166daaeb6d7670e522a718067333cd4e9081179091553b15610b4857610160546040517fc3c5a5470000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b039091169063c3c5a547906024016020604051808303816000875af1158015612b77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9b9190613ec4565b610b48578015612c2157610160546040517f7d3e3dbe0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015290911690637d3e3dbe906044015b600060405180830381600087803b158015612c0d57600080fd5b505af1158015610a7d573d6000803e3d6000fd5b6001600160a01b03821615612c8257610160546040517fa0af29030000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0384811660248301529091169063a0af290390604401612bf3565b610160546040517f4420e4860000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0390911690634420e48690602401612bf3565b606060678054612cdb90613ef7565b80601f0160208091040260200160405190810160405280929190818152602001828054612d0790613ef7565b8015612d545780601f10612d2957610100808354040283529160200191612d54565b820191906000526020600020905b815481529060010190602001808311612d3757829003601f168201915b50505050509050919050565b600082815261012e602090815260408083206001600160a01b038516845290915290205460ff16610b4857612d94816132a2565b612d9f8360206132b4565b604051602001612db09291906140ff565b60408051601f198184030181529082905262461bcd60e51b825261067091600401613764565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110612e1057612e10613ee1565b602090810291909101015292915050565b610a7d8686868686866134dd565b6001600160a01b0384163b15610a7d576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190612e8c9089908990889088908890600401614180565b6020604051808303816000875af1925050508015612ec7575060408051601f3d908101601f19168201909252612ec4918101906141c3565b60015b612f7c57612ed36141e0565b806308c379a003612f0c5750612ee76141fb565b80612ef25750612f0e565b8060405162461bcd60e51b81526004016106709190613764565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610670565b6001600160e01b031981167ff23a6e610000000000000000000000000000000000000000000000000000000014611bfe5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610670565b6001600160a01b0384163b15610a7d576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c819061307890899089908890889088906004016142a3565b6020604051808303816000875af19250505080156130b3575060408051601f3d908101601f191682019092526130b0918101906141c3565b60015b6130bf57612ed36141e0565b6001600160e01b031981167fbc197c810000000000000000000000000000000000000000000000000000000014611bfe5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a6563746560448201527f6420746f6b656e730000000000000000000000000000000000000000000000006064820152608401610670565b61012d546000906001600160a01b0316330361319f57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b90565b600054610100900460ff166132125760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b611a2d8161366b565b600054610100900460ff166132865760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610670565b60408051602081019091526000815260fb90611a2d9082614011565b606061069e6001600160a01b03831660145b606060006132c3836002613e8b565b6132ce906002613fb8565b67ffffffffffffffff8111156132e6576132e66137ac565b6040519080825280601f01601f191660200182016040528015613310576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061334757613347613ee1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106133aa576133aa613ee1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006133e6846002613e8b565b6133f1906001613fb8565b90505b600181111561348e577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061343257613432613ee1565b1a60f81b82828151811061344857613448613ee1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361348781614301565b90506133f4565b508315611a155760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610670565b6001600160a01b0385166135645760005b83518110156135625782818151811061350957613509613ee1565b602002602001015160c9600086848151811061352757613527613ee1565b60200260200101518152602001908152602001600020600082825461354c9190613fb8565b9091555061355b905081613e3b565b90506134ee565b505b6001600160a01b038416610a7d5760005b8351811015611bfe57600084828151811061359257613592613ee1565b6020026020010151905060008483815181106135b0576135b0613ee1565b60200260200101519050600060c96000848152602001908152602001600020549050818110156136485760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610670565b600092835260c960205260409092209103905561366481613e3b565b9050613575565b6067610b488282614011565b6001600160a01b0381168114611a2d57600080fd5b803561369781613677565b919050565b600080604083850312156136af57600080fd5b82356136ba81613677565b946020939093013593505050565b6001600160e01b031981168114611a2d57600080fd5b6000602082840312156136f057600080fd5b8135611a15816136c8565b60006020828403121561370d57600080fd5b5035919050565b60005b8381101561372f578181015183820152602001613717565b50506000910152565b60008151808452613750816020860160208601613714565b601f01601f19169290920160200192915050565b602081526000611a156020830184613738565b60008060006060848603121561378c57600080fd5b833561379781613677565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156137e8576137e86137ac565b6040525050565b600082601f83011261380057600080fd5b813567ffffffffffffffff81111561381a5761381a6137ac565b6040516138316020601f19601f85011601826137c2565b81815284602083860101111561384657600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561387557600080fd5b813567ffffffffffffffff81111561388c57600080fd5b613898848285016137ef565b949350505050565b600067ffffffffffffffff8211156138ba576138ba6137ac565b5060051b60200190565b600082601f8301126138d557600080fd5b813560206138e2826138a0565b6040516138ef82826137c2565b83815260059390931b850182019282810191508684111561390f57600080fd5b8286015b8481101561392a5780358352918301918301613913565b509695505050505050565b60008060006060848603121561394a57600080fd5b833561395581613677565b9250602084013567ffffffffffffffff8082111561397257600080fd5b61397e878388016138c4565b9350604086013591508082111561399457600080fd5b506139a1868287016138c4565b9150509250925092565b600080604083850312156139be57600080fd5b50508035926020909101359150565b600080600080600060a086880312156139e557600080fd5b85356139f081613677565b94506020860135613a0081613677565b9350604086013567ffffffffffffffff80821115613a1d57600080fd5b613a2989838a016138c4565b94506060880135915080821115613a3f57600080fd5b613a4b89838a016138c4565b93506080880135915080821115613a6157600080fd5b50613a6e888289016137ef565b9150509295509295909350565b60008060408385031215613a8e57600080fd5b823591506020830135613aa081613677565b809150509250929050565b60008060408385031215613abe57600080fd5b823567ffffffffffffffff80821115613ad657600080fd5b818501915085601f830112613aea57600080fd5b81356020613af7826138a0565b604051613b0482826137c2565b83815260059390931b8501820192828101915089841115613b2457600080fd5b948201945b83861015613b4b578535613b3c81613677565b82529482019490820190613b29565b96505086013592505080821115613b6157600080fd5b50610970858286016138c4565b600081518084526020808501945080840160005b83811015613b9e57815187529582019590820190600101613b82565b509495945050505050565b602081526000611a156020830184613b6e565b60008060408385031215613bcf57600080fd5b82359150602083013567ffffffffffffffff811115613bed57600080fd5b610970858286016137ef565b600060208284031215613c0b57600080fd5b8135611a1581613677565b8015158114611a2d57600080fd5b60008060408385031215613c3757600080fd5b8235613c4281613677565b91506020830135613aa081613c16565b60008060408385031215613c6557600080fd5b8235613c7081613677565b91506020830135613aa081613677565b600080600080600060a08688031215613c9857600080fd5b8535613ca381613677565b94506020860135613cb381613677565b93506040860135925060608601359150608086013567ffffffffffffffff811115613cdd57600080fd5b613a6e888289016137ef565b600080600080600080600060e0888a031215613d0457600080fd5b67ffffffffffffffff8089351115613d1b57600080fd5b613d288a8a358b016137ef565b97506020890135613d3881613677565b96506040890135613d4881613677565b95506060890135613d5881613677565b94506080890135613d6881613677565b935060a089013581811115613d7c57600080fd5b8901601f81018b13613d8d57600080fd5b8035613d98816138a0565b604051613da582826137c2565b80915082815260208101915060208360051b85010192508d831115613dc957600080fd5b602084015b83811015613e02578581351115613de457600080fd5b613df48f602083358801016137ef565b835260209283019201613dce565b508096505050505050613e1760c0890161368c565b905092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b60006000198203613e4e57613e4e613e25565b5060010190565b60008060408385031215613e6857600080fd5b8251613e7381613677565b602084015190925061ffff81168114613aa057600080fd5b808202811582820484141761069e5761069e613e25565b600082613ebf57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613ed657600080fd5b8151611a1581613c16565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680613f0b57607f821691505b602082108103613f2b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454613f3f81613ef7565b60018281168015613f575760018114613f6c57613f9b565b60ff1984168752821515830287019450613f9b565b8860005260208060002060005b85811015613f925781548a820152908401908201613f79565b50505082870194505b505050508351613faf818360208801613714565b01949350505050565b8082018082111561069e5761069e613e25565b601f821115610aab57600081815260208120601f850160051c81016020861015613ff25750805b601f850160051c820191505b81811015610a7d57828155600101613ffe565b815167ffffffffffffffff81111561402b5761402b6137ac565b61403f816140398454613ef7565b84613fcb565b602080601f831160018114614074576000841561405c5750858301515b600019600386901b1c1916600185901b178555610a7d565b600085815260208120601f198616915b828110156140a357888601518255948401946001909101908401614084565b50858210156140c15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006140e46040830185613b6e565b82810360208401526140f68185613b6e565b95945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614137816017850160208801613714565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351614174816028840160208801613714565b01602801949350505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526141b860a0830184613738565b979650505050505050565b6000602082840312156141d557600080fd5b8151611a15816136c8565b600060033d11156131a45760046000803e5060005160e01c90565b600060443d10156142095790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561425757505050505090565b828501915081518181111561426f5750505050505090565b843d87010160208285010111156142895750505050505090565b614298602082860101876137c2565b509095945050505050565b60006001600160a01b03808816835280871660208401525060a060408301526142cf60a0830186613b6e565b82810360608401526142e18186613b6e565b905082810360808401526142f58185613738565b98975050505050505050565b60008161431057614310613e25565b50600019019056fea2646970667358221220532d072420a26a9e791c4bdcaa40be4e45a24a387b48c4d598c7c0ed5c65ce8c64736f6c63430008120033",
  "devdoc": {
    "author": "The Sandbox",
    "details": "An ERC1155 contract that manages catalysts, extends multiple OpenZeppelin contracts to provide a variety of features including, AccessControl, URIStorage, Burnable and more. The contract includes support for meta transactions.",
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "addNewCatalystType(string)": {
        "params": {
          "ipfsCID": "The royalty bps for the catalyst"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "burnBatchFrom(address,uint256[],uint256[])": {
        "params": {
          "account": "The address to burn from",
          "amounts": "The amounts to be burned",
          "ids": "The token ids to burn"
        }
      },
      "burnFrom(address,uint256,uint256)": {
        "params": {
          "account": "The address to burn from",
          "amount": "The amount to be burned",
          "id": "The token id to burn"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,address,address,address,address,string[],address)": {
        "params": {
          "_baseUri": "The base URI for the token metadata, most likely set to ipfs://.",
          "_catalystIpfsCID": "The IPFS content identifiers for each catalyst.",
          "_defaultAdmin": "The default admin address.",
          "_defaultMinter": "The default minter address.",
          "_royaltyManager": ", the address of the Manager contract for common royalty recipient",
          "_subscription": "The subscription address.",
          "_trustedForwarder": "The trusted forwarder for meta transactions."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mint(address,uint256,uint256)": {
        "params": {
          "amount": "The amount to be minted",
          "id": "The token id to mint",
          "to": "The address that will own the minted token"
        }
      },
      "mintBatch(address,uint256[],uint256[])": {
        "params": {
          "amounts": "The amounts to be minted per token id",
          "ids": "The token ids to mint",
          "to": "The address that will own the minted tokens"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "tokenId is one of the EIP2981 args for this function can't be removed",
        "params": {
          "_salePrice": "the price of token on which the royalty is calculated"
        },
        "returns": {
          "receiver": "the receiver of royalty",
          "royaltyAmount": "the amount of royalty"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "call data should be optimized to order ids so packedBalance can be used efficiently.",
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "ids": "ids of each token type transfered.",
          "to": "address to which the token will be transfered.",
          "values": "amount of each token type transfered."
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "data": "aditional data accompanying the transfer.",
          "from": "address from which tokens are transfered.",
          "id": "the token type transfered.",
          "to": "address to which the token will be transfered.",
          "value": "amount of token transfered."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "whether to approve or revoke",
          "operator": "address which will be granted rights to transfer all tokens of the caller."
        }
      },
      "setBaseURI(string)": {
        "params": {
          "baseURI": "The new base URI"
        }
      },
      "setMetadataHash(uint256,string)": {
        "params": {
          "metadataHash": "The new URI",
          "tokenId": "The token id to set URI for"
        }
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "the interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `id`."
        }
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "uri(uint256)": {
        "params": {
          "tokenId": "The token id to get URI for"
        },
        "returns": {
          "_0": "tokenURI the URI of the token"
        }
      }
    },
    "title": "Catalyst",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNewCatalystType(string)": {
        "notice": "Add a new catalyst type, limited to DEFAULT_ADMIN_ROLE only"
      },
      "burnBatchFrom(address,uint256[],uint256[])": {
        "notice": "Burns a batch of tokens from a specific address"
      },
      "burnFrom(address,uint256,uint256)": {
        "notice": "Burns a specified amount of tokens from a specific address"
      },
      "initialize(string,address,address,address,address,string[],address)": {
        "notice": "Initialize the contract, setting up initial values for various features."
      },
      "mint(address,uint256,uint256)": {
        "notice": "Mints a new token, limited to MINTER_ROLE only"
      },
      "mintBatch(address,uint256[],uint256[])": {
        "notice": "Mints a batch of tokens, limited to MINTER_ROLE only"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Returns how much royalty is owed and to whom based on ERC2981"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "Transfers `values` tokens of type `ids` from  `from` to `to` (with safety call)."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "Transfers `value` tokens of type `id` from  `from` to `to`  (with safety call)."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for `operator` to manage all of the caller's tokens."
      },
      "setBaseURI(string)": {
        "notice": "Set a new base URI"
      },
      "setMetadataHash(uint256,string)": {
        "notice": "Set a new URI for specific tokenid"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements interface `id`."
      },
      "uri(uint256)": {
        "notice": "returns full token URI, including baseURI and token metadata URI"
      }
    },
    "notice": "THis contract manages catalysts which are used to mint new assets.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 486,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 489,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3040,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3963,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 677,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 683,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 685,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1892,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 2144,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2170,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2321,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2356,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_baseURI",
        "offset": 0,
        "slot": "251",
        "type": "t_string_storage"
      },
      {
        "astId": 2360,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2435,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 8434,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 66,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "_roles",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)61_storage)"
      },
      {
        "astId": 361,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "__gap",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9105,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "operatorFilterRegistry",
        "offset": 0,
        "slot": "352",
        "type": "t_contract(IOperatorFilterRegistry)9473"
      },
      {
        "astId": 9487,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "royaltyManager",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(IRoyaltyManager)9617"
      },
      {
        "astId": 7815,
        "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
        "label": "highestTierIndex",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IOperatorFilterRegistry)9473": {
        "encoding": "inplace",
        "label": "contract IOperatorFilterRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyManager)9617": {
        "encoding": "inplace",
        "label": "contract IRoyaltyManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)61_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)61_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)61_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 58,
            "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 60,
            "contract": "@sandbox-smart-contracts/asset/contracts/Catalyst.sol:Catalyst",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}