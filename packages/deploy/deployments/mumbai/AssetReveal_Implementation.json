{
  "address": "0x97AfC3CDf0CA007DC9f131d1D46d51Fa8eA92c9F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "revealer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "unrevealedTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "AssetRevealBatchBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "unrevealedTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "amounts",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "newTokenIds",
          "type": "uint256[][]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[][]",
          "name": "revealHashes",
          "type": "bytes32[][]"
        }
      ],
      "name": "AssetRevealBatchMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "revealer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unrevealedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetRevealBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unrevealedTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "newTokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "revealHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "AssetRevealMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarderAddress",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTrustedForwarder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "TrustedForwarderSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_REVEAL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INSTANT_REVEAL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVEAL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "prevTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "revealHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "burnAndReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthValidator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_assetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authValidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "revealBatchBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "prevTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "amounts",
          "type": "uint256[][]"
        },
        {
          "internalType": "string[][]",
          "name": "metadataHashes",
          "type": "string[][]"
        },
        {
          "internalType": "bytes32[][]",
          "name": "revealHashes",
          "type": "bytes32[][]"
        }
      ],
      "name": "revealBatchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "revealBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "revealHash",
          "type": "bytes32"
        }
      ],
      "name": "revealHashUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "prevTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "metadataHashes",
          "type": "string[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "revealHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "revealMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb9487bbc38d9b641e31142f638fb33972abb02bae483528d4e166ed28e8096e",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x97AfC3CDf0CA007DC9f131d1D46d51Fa8eA92c9F",
    "transactionIndex": 3,
    "gasUsed": "3240145",
    "logsBloom": "0x
    "blockHash": "0x4b0de452685f89b43c910894408e2328aa1a800d52a1682aadf9390612d48366",
    "transactionHash": "0xdb9487bbc38d9b641e31142f638fb33972abb02bae483528d4e166ed28e8096e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 38730827,
        "transactionHash": "0xdb9487bbc38d9b641e31142f638fb33972abb02bae483528d4e166ed28e8096e",
        "address": "0x97AfC3CDf0CA007DC9f131d1D46d51Fa8eA92c9F",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 8,
        "blockHash": "0x4b0de452685f89b43c910894408e2328aa1a800d52a1682aadf9390612d48366"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38730827,
        "transactionHash": "0xdb9487bbc38d9b641e31142f638fb33972abb02bae483528d4e166ed28e8096e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001705ca177dd40000000000000000000000000000000000000000000000001170ec6dc169cdef430000000000000000000000000000000000000000000033a6d5f87d6971f111df00000000000000000000000000000000000000000000001170d567f752501b430000000000000000000000000000000000000000000033a6d60f8333896ee5df",
        "logIndex": 9,
        "blockHash": "0x4b0de452685f89b43c910894408e2328aa1a800d52a1682aadf9390612d48366"
      }
    ],
    "blockNumber": 38730827,
    "cumulativeGasUsed": "3366311",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f473f7e77d584cdbb9fe0c91f28e82a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revealer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unrevealedTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AssetRevealBatchBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unrevealedTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"newTokenIds\",\"type\":\"uint256[][]\"},{\"indexed\":false,\"internalType\":\"bytes32[][]\",\"name\":\"revealHashes\",\"type\":\"bytes32[][]\"}],\"name\":\"AssetRevealBatchMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revealer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unrevealedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetRevealBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unrevealedTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"revealHashes\",\"type\":\"bytes32[]\"}],\"name\":\"AssetRevealMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarderAddress\",\"type\":\"address\"}],\"name\":\"TrustedForwarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTrustedForwarder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_REVEAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INSTANT_REVEAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVEAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"prevTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"revealHashes\",\"type\":\"bytes32[]\"}],\"name\":\"burnAndReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authValidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"revealBatchBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"prevTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"amounts\",\"type\":\"uint256[][]\"},{\"internalType\":\"string[][]\",\"name\":\"metadataHashes\",\"type\":\"string[][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"revealHashes\",\"type\":\"bytes32[][]\"}],\"name\":\"revealBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"revealBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"revealHash\",\"type\":\"bytes32\"}],\"name\":\"revealHashUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"prevTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"metadataHashes\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"revealHashes\",\"type\":\"bytes32[]\"}],\"name\":\"revealMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"The Sandbox\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"TrustedForwarderSet(address,address,address)\":{\"params\":{\"newTrustedForwarder\":\"new trusted forwarder\",\"oldTrustedForwarder\":\"old trusted forwarder\",\"operator\":\"the sender of the transaction\"}}},\"kind\":\"dev\",\"methods\":{\"burnAndReveal(bytes,uint256,uint256,uint256[],string[],bytes32[])\":{\"details\":\"Should be used where it is not required to keep the metadata secret, e.g. mythical assets where users select their desired abilities and enhancements\",\"params\":{\"amounts\":\"The amount of assets to reveal (sum must be equal to the burnAmount)\",\"burnAmount\":\"The amount of assets to burn\",\"metadataHashes\":\"The array of hashes for asset metadata\",\"prevTokenId\":\"The tokenId of the unrevealed asset\",\"revealHashes\":\"A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId\",\"signature\":\"Signature created on the TSB backend containing INSTANT_REVEAL_TYPEHASH and associated data, must be signed by authorized signer\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getAssetContract()\":{\"returns\":{\"_0\":\"The asset contract address\"}},\"getAuthValidator()\":{\"returns\":{\"_0\":\"The auth validator address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"return the address of the trusted forwarder\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(string,string,address,address,address,address)\":{\"params\":{\"_assetContract\":\"The address of the asset contract\",\"_authValidator\":\"The address of the AuthSuperValidator contract\",\"_forwarder\":\"The address of the forwarder contract\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"trusted forwarder address to check\"},\"returns\":{\"_0\":\"true if the address is the same as the trusted forwarder\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revealBatchBurn(uint256[],uint256[])\":{\"details\":\"Can be used to burn multiple copies of the same token id, each copy will be revealed separately\",\"params\":{\"amounts\":\"the amounts of the assets to burn\",\"tokenIds\":\"the tokenIds of the assets to burn\"}},\"revealBatchMint(bytes,uint256[],uint256[][],string[][],bytes32[][])\":{\"details\":\"Can be used to reveal multiple copies of the same token id\",\"params\":{\"amounts\":\"The amount of assets to reveal (must be equal to the length of revealHashes)\",\"metadataHashes\":\"The array of hashes for asset metadata\",\"prevTokenIds\":\"The tokenId of the unrevealed asset\",\"revealHashes\":\"Array of revealHash arrays providing random bytes32 generated by the TSB backend for each new tokenId\",\"signature\":\"Signatures created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer\"}},\"revealBurn(uint256,uint256)\":{\"details\":\"the reveal mechanism works through burning the asset and minting a new one with updated tokenId\",\"params\":{\"amount\":\"the amount of tokens to reveal\",\"tokenId\":\"the tokenId of id idasset to reveal\"}},\"revealHashUsed(bytes32)\":{\"returns\":{\"_0\":\"Whether it has been used\"}},\"revealMint(bytes,uint256,uint256[],string[],bytes32[])\":{\"details\":\"Can be used to reveal multiple copies of the same token id\",\"params\":{\"amounts\":\"The amount of assets to reveal (length reflects the number of types of reveal tokens and must be equal to the length of revealHashes)\",\"metadataHashes\":\"The array of hashes for revealed asset metadata\",\"prevTokenId\":\"The tokenId of the unrevealed asset\",\"revealHashes\":\"A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId\",\"signature\":\"Signature created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setTrustedForwarder(address)\":{\"details\":\"Change the address of the trusted forwarder for meta-TX\",\"params\":{\"trustedForwarder\":\"The new trustedForwarder\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"AssetReveal\",\"version\":1},\"userdoc\":{\"events\":{\"TrustedForwarderSet(address,address,address)\":{\"notice\":\"Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\"}},\"kind\":\"user\",\"methods\":{\"burnAndReveal(bytes,uint256,uint256,uint256[],string[],bytes32[])\":{\"notice\":\"Reveal assets to view their abilities and enhancements and mint them in a single transaction\"},\"getAssetContract()\":{\"notice\":\"Get the asset contract address\"},\"getAuthValidator()\":{\"notice\":\"Get the auth validator address\"},\"getTrustedForwarder()\":{\"notice\":\"return the address of the trusted forwarder\"},\"initialize(string,string,address,address,address,address)\":{\"notice\":\"Initialize the contract\"},\"isTrustedForwarder(address)\":{\"notice\":\"return true if the forwarder is the trusted forwarder\"},\"revealBatchBurn(uint256[],uint256[])\":{\"notice\":\"Burn multiple assets to be able to reveal them later\"},\"revealBatchMint(bytes,uint256[],uint256[][],string[][],bytes32[][])\":{\"notice\":\"Mint multiple assets with revealed abilities and enhancements\"},\"revealBurn(uint256,uint256)\":{\"notice\":\"Reveal an asset to view its abilities and enhancements\"},\"revealHashUsed(bytes32)\":{\"notice\":\"Get the status of a revealHash\"},\"revealMint(bytes,uint256,uint256[],string[],bytes32[])\":{\"notice\":\"Reveal assets to view their abilities and enhancements\"},\"setTrustedForwarder(address)\":{\"notice\":\"Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\"}},\"notice\":\"Contract for burning and revealing assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@sandbox-smart-contracts/asset/contracts/AssetReveal.sol\":\"AssetReveal\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267Upgradeable {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xe562dab443278837fa50faddb76743399e942181881db8dccaea3bd1712994db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC5267Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:oz-renamed-from _HASHED_NAME\\n    bytes32 private _hashedName;\\n    /// @custom:oz-renamed-from _HASHED_VERSION\\n    bytes32 private _hashedVersion;\\n\\n    string private _name;\\n    string private _version;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        _name = name;\\n        _version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        _hashedName = 0;\\n        _hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require(_hashedName == 0 && _hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal virtual view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal virtual view returns (string memory) {\\n        return _version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = _hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = _hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xeb8d6be406a373771724922eb41b5d593bc8e2dc705daa22cd1145cfc8f5a3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/AssetReveal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {\\n    AccessControlUpgradeable,\\n    ContextUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {TokenIdUtils} from \\\"./libraries/TokenIdUtils.sol\\\";\\nimport {AuthSuperValidator} from \\\"./AuthSuperValidator.sol\\\";\\nimport {\\n    ERC2771HandlerUpgradeable,\\n    ERC2771HandlerAbstract\\n} from \\\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\\\";\\nimport {IAsset} from \\\"./interfaces/IAsset.sol\\\";\\nimport {IAssetReveal} from \\\"./interfaces/IAssetReveal.sol\\\";\\n\\n/// @title AssetReveal\\n/// @author The Sandbox\\n/// @notice Contract for burning and revealing assets\\ncontract AssetReveal is\\n    IAssetReveal,\\n    Initializable,\\n    AccessControlUpgradeable,\\n    ERC2771HandlerUpgradeable,\\n    EIP712Upgradeable\\n{\\n    using TokenIdUtils for uint256;\\n    IAsset private assetContract;\\n    AuthSuperValidator private authValidator;\\n\\n    // mapping of creator to asset id to asset's reveal nonce\\n    mapping(address => mapping(uint256 => uint16)) internal revealIds;\\n\\n    // mapping for showing whether a revealHash has been used\\n    // revealHashes are generated by the TSB backend from reveal burn events and are used for reveal minting\\n    mapping(bytes32 => bool) internal revealHashesUsed;\\n\\n    bytes32 public constant REVEAL_TYPEHASH =\\n        keccak256(\\n            \\\"Reveal(address recipient,uint256 prevTokenId,uint256[] amounts,string[] metadataHashes,bytes32[] revealHashes)\\\"\\n        );\\n    bytes32 public constant BATCH_REVEAL_TYPEHASH =\\n        keccak256(\\n            \\\"BatchReveal(address recipient,uint256[] prevTokenIds,uint256[][] amounts,string[][] metadataHashes,bytes32[][] revealHashes)\\\"\\n        );\\n    bytes32 public constant INSTANT_REVEAL_TYPEHASH =\\n        keccak256(\\n            \\\"InstantReveal(address recipient,uint256 prevTokenId,uint256[] amounts,string[] metadataHashes,bytes32[] revealHashes)\\\"\\n        );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Initialize the contract\\n    /// @param _assetContract The address of the asset contract\\n    /// @param _authValidator The address of the AuthSuperValidator contract\\n    /// @param _forwarder The address of the forwarder contract\\n    function initialize(\\n        string memory _name,\\n        string memory _version,\\n        address _assetContract,\\n        address _authValidator,\\n        address _forwarder,\\n        address _defaultAdmin\\n    ) public initializer {\\n        assetContract = IAsset(_assetContract);\\n        authValidator = AuthSuperValidator(_authValidator);\\n        __ERC2771Handler_init(_forwarder);\\n        __EIP712_init(_name, _version);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n    }\\n\\n    /// @notice Reveal an asset to view its abilities and enhancements\\n    /// @dev the reveal mechanism works through burning the asset and minting a new one with updated tokenId\\n    /// @param tokenId the tokenId of id idasset to reveal\\n    /// @param amount the amount of tokens to reveal\\n    function revealBurn(uint256 tokenId, uint256 amount) external {\\n        _burnAsset(tokenId, amount);\\n        emit AssetRevealBurn(_msgSender(), tokenId, amount);\\n    }\\n\\n    /// @notice Burn multiple assets to be able to reveal them later\\n    /// @dev Can be used to burn multiple copies of the same token id, each copy will be revealed separately\\n    /// @param tokenIds the tokenIds of the assets to burn\\n    /// @param amounts the amounts of the assets to burn\\n    function revealBatchBurn(uint256[] calldata tokenIds, uint256[] calldata amounts) external {\\n        _burnAssetBatch(tokenIds, amounts);\\n        emit AssetRevealBatchBurn(_msgSender(), tokenIds, amounts);\\n    }\\n\\n    /// @notice Reveal assets to view their abilities and enhancements\\n    /// @dev Can be used to reveal multiple copies of the same token id\\n    /// @param signature Signature created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer\\n    /// @param prevTokenId The tokenId of the unrevealed asset\\n    /// @param amounts The amount of assets to reveal (length reflects the number of types of reveal tokens and must be equal to the length of revealHashes)\\n    /// @param metadataHashes The array of hashes for revealed asset metadata\\n    /// @param revealHashes A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId\\n    function revealMint(\\n        bytes memory signature,\\n        uint256 prevTokenId,\\n        uint256[] calldata amounts,\\n        string[] calldata metadataHashes,\\n        bytes32[] calldata revealHashes\\n    ) external {\\n        require(amounts.length == metadataHashes.length, \\\"AssetReveal: Invalid amounts length\\\");\\n        require(amounts.length == revealHashes.length, \\\"AssetReveal: Invalid revealHashes length\\\");\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashReveal(_msgSender(), prevTokenId, amounts, metadataHashes, revealHashes)\\n            ),\\n            \\\"AssetReveal: Invalid revealMint signature\\\"\\n        );\\n        uint256[] memory newTokenIds = _revealAsset(prevTokenId, metadataHashes, amounts, revealHashes);\\n        emit AssetRevealMint(_msgSender(), prevTokenId, amounts, newTokenIds, revealHashes);\\n    }\\n\\n    /// @notice Mint multiple assets with revealed abilities and enhancements\\n    /// @dev Can be used to reveal multiple copies of the same token id\\n    /// @param signature Signatures created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer\\n    /// @param prevTokenIds The tokenId of the unrevealed asset\\n    /// @param amounts The amount of assets to reveal (must be equal to the length of revealHashes)\\n    /// @param metadataHashes The array of hashes for asset metadata\\n    /// @param revealHashes Array of revealHash arrays providing random bytes32 generated by the TSB backend for each new tokenId\\n    function revealBatchMint(\\n        bytes calldata signature,\\n        uint256[] calldata prevTokenIds,\\n        uint256[][] calldata amounts,\\n        string[][] calldata metadataHashes,\\n        bytes32[][] calldata revealHashes\\n    ) external {\\n        require(prevTokenIds.length == amounts.length, \\\"AssetReveal: Invalid amounts length\\\");\\n        require(amounts.length == metadataHashes.length, \\\"AssetReveal: Invalid metadataHashes length\\\");\\n        require(prevTokenIds.length == revealHashes.length, \\\"AssetReveal: Invalid revealHashes length\\\");\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashBatchReveal(_msgSender(), prevTokenIds, amounts, metadataHashes, revealHashes)\\n            ),\\n            \\\"AssetReveal: Invalid revealBatchMint signature\\\"\\n        );\\n        uint256[][] memory newTokenIds = new uint256[][](prevTokenIds.length);\\n        for (uint256 i = 0; i < prevTokenIds.length; i++) {\\n            newTokenIds[i] = _revealAsset(prevTokenIds[i], metadataHashes[i], amounts[i], revealHashes[i]);\\n        }\\n        emit AssetRevealBatchMint(_msgSender(), prevTokenIds, amounts, newTokenIds, revealHashes);\\n    }\\n\\n    /// @notice Reveal assets to view their abilities and enhancements and mint them in a single transaction\\n    /// @dev Should be used where it is not required to keep the metadata secret, e.g. mythical assets where users select their desired abilities and enhancements\\n    /// @param signature Signature created on the TSB backend containing INSTANT_REVEAL_TYPEHASH and associated data, must be signed by authorized signer\\n    /// @param prevTokenId The tokenId of the unrevealed asset\\n    /// @param burnAmount The amount of assets to burn\\n    /// @param amounts The amount of assets to reveal (sum must be equal to the burnAmount)\\n    /// @param metadataHashes The array of hashes for asset metadata\\n    /// @param revealHashes A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId\\n    function burnAndReveal(\\n        bytes memory signature,\\n        uint256 prevTokenId,\\n        uint256 burnAmount,\\n        uint256[] calldata amounts,\\n        string[] calldata metadataHashes,\\n        bytes32[] calldata revealHashes\\n    ) external {\\n        require(amounts.length == metadataHashes.length, \\\"AssetReveal: Invalid amounts length\\\");\\n        require(amounts.length == revealHashes.length, \\\"AssetReveal: Invalid revealHashes length\\\");\\n        require(\\n            authValidator.verify(\\n                signature,\\n                _hashInstantReveal(_msgSender(), prevTokenId, amounts, metadataHashes, revealHashes)\\n            ),\\n            \\\"AssetReveal: Invalid burnAndReveal signature\\\"\\n        );\\n        _burnAsset(prevTokenId, burnAmount);\\n        uint256[] memory newTokenIds = _revealAsset(prevTokenId, metadataHashes, amounts, revealHashes);\\n        emit AssetRevealMint(_msgSender(), prevTokenId, amounts, newTokenIds, revealHashes);\\n    }\\n\\n    /// @notice Generate new tokenIds for revealed assets and mint them\\n    /// @param prevTokenId The tokenId of the unrevealed asset\\n    /// @param metadataHashes The array of hashes for asset metadata\\n    /// @param amounts The array of amounts to mint\\n    function _revealAsset(\\n        uint256 prevTokenId,\\n        string[] calldata metadataHashes,\\n        uint256[] calldata amounts,\\n        bytes32[] calldata revealHashes\\n    ) internal returns (uint256[] memory) {\\n        uint256[] memory newTokenIds = getRevealedTokenIds(metadataHashes, prevTokenId);\\n        for (uint256 i = 0; i < revealHashes.length; i++) {\\n            require(revealHashesUsed[revealHashes[i]] == false, \\\"AssetReveal: RevealHash already used\\\");\\n            revealHashesUsed[revealHashes[i]] = true;\\n        }\\n        if (newTokenIds.length == 1) {\\n            assetContract.mint(_msgSender(), newTokenIds[0], amounts[0], metadataHashes[0]);\\n        } else {\\n            assetContract.mintBatch(_msgSender(), newTokenIds, amounts, metadataHashes);\\n        }\\n        return newTokenIds;\\n    }\\n\\n    /// @notice Burns an asset to be able to reveal it later\\n    /// @param tokenId the tokenId of the asset to burn\\n    /// @param amount the amount of the asset to burn\\n    function _burnAsset(uint256 tokenId, uint256 amount) internal {\\n        _verifyBurnData(tokenId, amount);\\n        assetContract.burnFrom(_msgSender(), tokenId, amount);\\n    }\\n\\n    function _burnAssetBatch(uint256[] calldata tokenIds, uint256[] calldata amounts) internal {\\n        require(tokenIds.length == amounts.length, \\\"AssetReveal: Invalid input\\\");\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _verifyBurnData(tokenIds[i], amounts[i]);\\n        }\\n        assetContract.burnBatchFrom(_msgSender(), tokenIds, amounts);\\n    }\\n\\n    function _verifyBurnData(uint256 tokenId, uint256 amount) internal pure {\\n        IAsset.AssetData memory data = tokenId.getData();\\n        require(!data.revealed, \\\"AssetReveal: Asset is already revealed\\\");\\n        require(amount > 0, \\\"AssetReveal: Burn amount should be greater than 0\\\");\\n    }\\n\\n    /// @notice Creates a hash of the reveal data\\n    /// @param recipient The address of the recipient\\n    /// @param prevTokenId The unrevealed token id\\n    /// @param amounts The amount of tokens to mint\\n    /// @param metadataHashes The array of hashes for new asset metadata\\n    /// @param revealHashes The revealHashes used for revealing this particular prevTokenId (length corresponds to the new tokenIds)\\n    /// @return digest The hash of the reveal data\\n    function _hashInstantReveal(\\n        address recipient,\\n        uint256 prevTokenId,\\n        uint256[] calldata amounts,\\n        string[] calldata metadataHashes,\\n        bytes32[] calldata revealHashes\\n    ) internal view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    INSTANT_REVEAL_TYPEHASH,\\n                    recipient,\\n                    prevTokenId,\\n                    keccak256(abi.encodePacked(amounts)),\\n                    _encodeHashes(metadataHashes),\\n                    keccak256(abi.encodePacked(revealHashes))\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Creates a hash of the reveal data\\n    /// @param recipient The intended recipient of the revealed token\\n    /// @param prevTokenId The previous token id\\n    /// @param amounts The amount of tokens to mint\\n    /// @param metadataHashes The array of hashes for new asset metadata\\n    /// @param revealHashes The revealHashes used for revealing this particular prevTokenId (length corresponds to the new tokenIds)\\n    /// @return digest The hash of the reveal data\\n    function _hashReveal(\\n        address recipient,\\n        uint256 prevTokenId,\\n        uint256[] calldata amounts,\\n        string[] calldata metadataHashes,\\n        bytes32[] calldata revealHashes\\n    ) internal view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    REVEAL_TYPEHASH,\\n                    recipient,\\n                    prevTokenId,\\n                    keccak256(abi.encodePacked(amounts)),\\n                    _encodeHashes(metadataHashes),\\n                    keccak256(abi.encodePacked(revealHashes))\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Creates a hash of the reveal data\\n    /// @param recipient The intended recipient of the revealed tokens\\n    /// @param prevTokenIds The previous token id\\n    /// @param amounts The amounts of tokens to mint\\n    /// @param metadataHashes The arrays of hashes for new asset metadata\\n    /// @param revealHashes The revealHashes used for these prevTokenIds, (lengths corresponds to the new tokenIds)\\n    /// @return digest The hash of the reveal data\\n    function _hashBatchReveal(\\n        address recipient,\\n        uint256[] calldata prevTokenIds,\\n        uint256[][] calldata amounts,\\n        string[][] calldata metadataHashes,\\n        bytes32[][] calldata revealHashes\\n    ) internal view returns (bytes32 digest) {\\n        digest = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    BATCH_REVEAL_TYPEHASH,\\n                    recipient,\\n                    keccak256(abi.encodePacked(prevTokenIds)),\\n                    _encodeBatchAmounts(amounts),\\n                    _encodeBatchHashes(metadataHashes),\\n                    _encodeBatchRevealHashes(revealHashes)\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @notice Encodes the hashes of the metadata for signature verification\\n    /// @param metadataHashes The hashes of the metadata\\n    /// @return encodedHashes The encoded hashes of the metadata\\n    function _encodeHashes(string[] memory metadataHashes) internal pure returns (bytes32) {\\n        bytes32[] memory encodedHashes = new bytes32[](metadataHashes.length);\\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\\n            encodedHashes[i] = keccak256((abi.encodePacked(metadataHashes[i])));\\n        }\\n        return keccak256(abi.encodePacked(encodedHashes));\\n    }\\n\\n    /// @notice Encodes the hashes of the metadata for signature verification\\n    /// @param metadataHashes The hashes of the metadata\\n    /// @return encodedHashes The encoded hashes of the metadata\\n    function _encodeBatchHashes(string[][] memory metadataHashes) internal pure returns (bytes32) {\\n        bytes32[] memory encodedHashes = new bytes32[](metadataHashes.length);\\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\\n            encodedHashes[i] = _encodeHashes(metadataHashes[i]);\\n        }\\n        return keccak256(abi.encodePacked(encodedHashes));\\n    }\\n\\n    /// @notice Encodes the hashes of the metadata for signature verification\\n    /// @param revealHashes The revealHashes\\n    /// @return encodedRevealHashes The encoded hashes of the metadata\\n    function _encodeBatchRevealHashes(bytes32[][] memory revealHashes) internal pure returns (bytes32) {\\n        bytes32[] memory encodedHashes = new bytes32[](revealHashes.length);\\n        for (uint256 i = 0; i < revealHashes.length; i++) {\\n            encodedHashes[i] = keccak256(abi.encodePacked(revealHashes[i]));\\n        }\\n        return keccak256(abi.encodePacked(encodedHashes));\\n    }\\n\\n    /// @notice Encodes the amounts of the tokens for signature verification\\n    /// @param amounts The amounts of the tokens\\n    /// @return encodedAmounts The encoded amounts of the tokens\\n    function _encodeBatchAmounts(uint256[][] memory amounts) internal pure returns (bytes32) {\\n        bytes32[] memory encodedAmounts = new bytes32[](amounts.length);\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            encodedAmounts[i] = keccak256(abi.encodePacked(amounts[i]));\\n        }\\n        return keccak256(abi.encodePacked(encodedAmounts));\\n    }\\n\\n    /// @notice Checks if each metadatahash has been used before to either get the tokenId that was already created for it or generate a new one if it hasn't\\n    /// @dev This function also validates that we're not trying to reveal a tokenId that has already been revealed\\n    /// @param metadataHashes The hashes of the metadata\\n    /// @param prevTokenId The previous token id from which the assets are revealed\\n    /// @return tokenIdArray The array of tokenIds to mint\\n    function getRevealedTokenIds(string[] calldata metadataHashes, uint256 prevTokenId)\\n        internal\\n        returns (uint256[] memory)\\n    {\\n        IAsset.AssetData memory data = prevTokenId.getData();\\n        require(!data.revealed, \\\"AssetReveal: already revealed\\\");\\n        uint256[] memory tokenIdArray = new uint256[](metadataHashes.length);\\n        for (uint256 i = 0; i < metadataHashes.length; i++) {\\n            uint256 tokenId = assetContract.getTokenIdByMetadataHash(metadataHashes[i]);\\n            if (tokenId == 0) {\\n                uint16 revealNonce = ++revealIds[data.creator][prevTokenId];\\n                tokenId = TokenIdUtils.generateTokenId(\\n                    data.creator,\\n                    data.tier,\\n                    data.creatorNonce,\\n                    revealNonce,\\n                    data.bridged\\n                );\\n            }\\n            tokenIdArray[i] = tokenId;\\n        }\\n        return tokenIdArray;\\n    }\\n\\n    /// @notice Get the status of a revealHash\\n    /// @return Whether it has been used\\n    function revealHashUsed(bytes32 revealHash) external view returns (bool) {\\n        return revealHashesUsed[revealHash];\\n    }\\n\\n    /// @notice Get the asset contract address\\n    /// @return The asset contract address\\n    function getAssetContract() external view returns (address) {\\n        return address(assetContract);\\n    }\\n\\n    /// @notice Get the auth validator address\\n    /// @return The auth validator address\\n    function getAuthValidator() external view returns (address) {\\n        return address(authValidator);\\n    }\\n\\n    /// @notice Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only\\n    /// @dev Change the address of the trusted forwarder for meta-TX\\n    /// @param trustedForwarder The new trustedForwarder\\n    function setTrustedForwarder(address trustedForwarder) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(trustedForwarder != address(0), \\\"AssetReveal: trusted forwarder can't be zero address\\\");\\n        _setTrustedForwarder(trustedForwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerAbstract)\\n        returns (address sender)\\n    {\\n        return ERC2771HandlerAbstract._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        virtual\\n        override(ContextUpgradeable, ERC2771HandlerAbstract)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771HandlerAbstract._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xa69df5abf7c2e13cba5074cd5a159439c1ef85ea2540ece222a4f869dd5e0741\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/AuthSuperValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title AuthSuperValidator\\n/// @author The Sandbox\\n/// @notice This contract is used to validate the signatures of the backend, each contract can have a separate signer assigned\\ncontract AuthSuperValidator is AccessControl {\\n    mapping(address => address) private _signers;\\n\\n    /// @dev Constructor\\n    /// @param admin Address of the admin that will be able to grant roles\\n    constructor(address admin) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n\\n    /// @notice Sets the signer for a contract\\n    /// @dev Only the admin can call this function\\n    /// @param contractAddress Address of the contract to set the signer for\\n    /// @param signer Address of the signer\\n    function setSigner(address contractAddress, address signer) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _signers[contractAddress] = signer;\\n    }\\n\\n    /// @notice Gets the signer for a contract\\n    /// @param contractAddress Address of the contract to get the signer for\\n    /// @return address of the signer\\n    function getSigner(address contractAddress) public view returns (address) {\\n        return _signers[contractAddress];\\n    }\\n\\n    /// @notice Takes the signature and the digest and returns if the signer has a backend signer role assigned\\n    /// @dev Multipurpose function that can be used to verify signatures with different digests\\n    /// @param signature Signature hash\\n    /// @param digest Digest hash\\n    /// @return bool\\n    function verify(bytes memory signature, bytes32 digest) public view returns (bool) {\\n        address signer = _signers[_msgSender()];\\n        require(signer != address(0), \\\"AuthSuperValidator: signer not set\\\");\\n        address recoveredSigner = ECDSA.recover(digest, signature);\\n        return recoveredSigner == signer;\\n    }\\n}\\n\",\"keccak256\":\"0x990d27552ffce0f248fadbf539bbc904134ca14d392931bdfab0f02740103be3\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IAsset.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IAsset {\\n    // AssetData reflects the asset tokenId structure\\n    // Refer to TokenIdUtils.sol\\n    struct AssetData {\\n        uint256 tokenId;\\n        address creator;\\n        uint256 amount;\\n        uint8 tier;\\n        uint16 creatorNonce;\\n        bool revealed;\\n        string metadataHash;\\n        bool bridged;\\n    }\\n\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n\\n    // Functions\\n    function mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        string memory metadataHash\\n    ) external;\\n\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        string[] memory metadataHashes\\n    ) external;\\n\\n    function burnFrom(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n\\n    function burnBatchFrom(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external;\\n\\n    function getTokenIdByMetadataHash(string memory metadataHash) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2abd2e550ced35090c988e432215f990bf8f192cc346ffac6778fde0025a8206\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/interfaces/IAssetReveal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IAssetReveal {\\n    event TrustedForwarderChanged(address indexed newTrustedForwarderAddress);\\n    event AssetRevealBurn(address revealer, uint256 unrevealedTokenId, uint256 amount);\\n    event AssetRevealBatchBurn(address revealer, uint256[] unrevealedTokenIds, uint256[] amounts);\\n    event AssetRevealMint(\\n        address recipient,\\n        uint256 unrevealedTokenId,\\n        uint256[] amounts,\\n        uint256[] newTokenIds,\\n        bytes32[] revealHashes\\n    );\\n    event AssetRevealBatchMint(\\n        address recipient,\\n        uint256[] unrevealedTokenIds,\\n        uint256[][] amounts,\\n        uint256[][] newTokenIds,\\n        bytes32[][] revealHashes\\n    );\\n}\\n\",\"keccak256\":\"0x5c02c65ea3861d0fff04eec7c28017a17434d924c9474cf95806a16ff33b4731\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/asset/contracts/libraries/TokenIdUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAsset} from \\\"../interfaces/IAsset.sol\\\";\\n\\nlibrary TokenIdUtils {\\n    // Layer masks\\n    uint256 public constant TIER_MASK = 0xFF;\\n    uint256 public constant NONCE_MASK = 0xFFFF;\\n    uint256 public constant REVEAL_NONCE_MASK = 0xFFFF;\\n    uint256 public constant BRIDGED_MASK = 0x1;\\n\\n    // Bit shifts\\n    uint256 public constant CREATOR_SHIFT = 0;\\n    uint256 public constant TIER_SHIFT = 160;\\n    uint256 public constant NONCE_SHIFT = 168;\\n    uint256 public constant REVEAL_NONCE_SHIFT = 184;\\n    uint256 public constant BRIDGED_SHIFT = 200;\\n\\n    /// @notice Generates a token id for a given asset\\n    /// @dev The token id is generated by concatenating the following fields:\\n    /// @dev creator address, chain index, tier, asset nonce, reveal nonce and bridged boolean\\n    /// @dev The first 160 bits are the creator address\\n    /// @dev The next 8 bits are the chain index\\n    /// @dev The next 8 bits are the tier\\n    /// @dev The next 16 bits are the asset nonce\\n    /// @dev The next 16 bits are assets reveal nonce.\\n    /// @param creator The address of the creator of the asset\\n    /// @param tier The tier of the asset determined by the catalyst used to create it\\n    /// @param creatorNonce The nonce of the asset creator\\n    /// @param revealNonce The reveal nonce of the asset\\n    /// @param bridged Whether the asset is bridged or not\\n    /// @return tokenId The generated token id\\n    function generateTokenId(\\n        address creator,\\n        uint8 tier,\\n        uint16 creatorNonce,\\n        uint16 revealNonce,\\n        bool bridged\\n    ) internal pure returns (uint256 tokenId) {\\n        uint160 creatorAddress = uint160(creator);\\n\\n        tokenId = tokenId =\\n            uint256(creatorAddress) |\\n            (uint256(tier) << TIER_SHIFT) |\\n            (uint256(creatorNonce) << NONCE_SHIFT) |\\n            (uint256(revealNonce) << REVEAL_NONCE_SHIFT) |\\n            (uint256(bridged ? 1 : 0) << BRIDGED_SHIFT);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Extracts the creator address from a given token id\\n    /// @param tokenId The token id to extract the creator address from\\n    /// @return creator The asset creator address\\n    function getCreatorAddress(uint256 tokenId) internal pure returns (address creator) {\\n        creator = address(uint160(tokenId));\\n        return creator;\\n    }\\n\\n    /// @notice Extracts the tier from a given token id\\n    /// @param tokenId The token id to extract the tier from\\n    /// @return tier The asset tier, determined by the catalyst used to create it\\n    function getTier(uint256 tokenId) internal pure returns (uint8 tier) {\\n        tier = uint8((tokenId >> TIER_SHIFT) & TIER_MASK);\\n        return tier;\\n    }\\n\\n    /// @notice Extracts the revealed flag from a given token id\\n    /// @param tokenId The token id to extract the revealed flag from\\n    /// @return isRevealed Whether the asset is revealed or not\\n    function isRevealed(uint256 tokenId) internal pure returns (bool) {\\n        uint16 revealNonce = getRevealNonce(tokenId);\\n        return revealNonce != 0;\\n    }\\n\\n    /// @notice Extracts the asset nonce from a given token id\\n    /// @param tokenId The token id to extract the asset nonce from\\n    /// @return creatorNonce The asset creator nonce\\n    function getCreatorNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 creatorNonce = uint16((tokenId >> NONCE_SHIFT) & NONCE_MASK);\\n        return creatorNonce;\\n    }\\n\\n    /// @notice Extracts the abilities and enhancements hash from a given token id\\n    /// @param tokenId The token id to extract reveal nonce from\\n    /// @return revealNonce The reveal nonce of the asset\\n    function getRevealNonce(uint256 tokenId) internal pure returns (uint16) {\\n        uint16 revealNonce = uint16((tokenId >> REVEAL_NONCE_SHIFT) & REVEAL_NONCE_MASK);\\n        return revealNonce;\\n    }\\n\\n    /// @notice Extracts the bridged flag from a given token id\\n    /// @param tokenId The token id to extract the bridged flag from\\n    /// @return bridged Whether the asset is bridged or not\\n    function isBridged(uint256 tokenId) internal pure returns (bool) {\\n        bool bridged = ((tokenId >> BRIDGED_SHIFT) & BRIDGED_MASK) == 1;\\n        return bridged;\\n    }\\n\\n    /// @notice Extracts the asset data from a given token id\\n    /// @dev Created to limit the number of functions that need to be called when revealing an asset\\n    /// @param tokenId The token id to extract the asset data from\\n    function getData(uint256 tokenId) internal pure returns (IAsset.AssetData memory data) {\\n        data.creator = getCreatorAddress(tokenId);\\n        data.tier = getTier(tokenId);\\n        data.revealed = isRevealed(tokenId);\\n        data.creatorNonce = getCreatorNonce(tokenId);\\n        data.bridged = isBridged(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x82f6bb065e85497d5486bcecb162c30df83941262ff5ac3fd8e283e946250839\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\nabstract contract ERC2771HandlerAbstract {\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function isTrustedForwarder(address forwarder) external view returns (bool) {\\n        return _isTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is extracted from calldata, msg.sender otherwise\\n    /// @return sender the calculated address of the sender\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            sender = msg.sender;\\n        }\\n    }\\n\\n    /// @notice if the call is from the trusted forwarder the sender is removed from calldata\\n    /// @return the calldata without the sender\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (_isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    /// @dev this function must be IMPLEMENTED\\n    function _isTrustedForwarder(address forwarder) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xc4f349865ea7146f51b69f1edacdef60e0a2a7cf4dab538a5ae53ee9a0036231\",\"license\":\"MIT\"},\"@sandbox-smart-contracts/dependency-metatx/contracts/ERC2771HandlerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC2771HandlerAbstract} from \\\"./ERC2771HandlerAbstract.sol\\\";\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\ncontract ERC2771HandlerUpgradeable is Initializable, ERC2771HandlerAbstract {\\n    address private _trustedForwarder;\\n\\n    /// @notice Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`\\n    /// @param oldTrustedForwarder old trusted forwarder\\n    /// @param newTrustedForwarder new trusted forwarder\\n    /// @param operator the sender of the transaction\\n    event TrustedForwarderSet(\\n        address indexed oldTrustedForwarder,\\n        address indexed newTrustedForwarder,\\n        address indexed operator\\n    );\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init(address forwarder) internal onlyInitializing {\\n        __ERC2771Handler_init_unchained(forwarder);\\n    }\\n\\n    /// @notice initialize the trusted forwarder address\\n    /// @param forwarder trusted forwarder address or zero to disable it\\n    function __ERC2771Handler_init_unchained(address forwarder) internal onlyInitializing {\\n        _setTrustedForwarder(forwarder);\\n    }\\n\\n    /// @notice return the address of the trusted forwarder\\n    /// @return return the address of the trusted forwarder\\n    function getTrustedForwarder() external view returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /// @notice set the address of the trusted forwarder\\n    /// @param newForwarder the address of the new forwarder.\\n    function _setTrustedForwarder(address newForwarder) internal virtual {\\n        require(newForwarder != _trustedForwarder, \\\"ERC2771HandlerUpgradeable: forwarder already set\\\");\\n        emit TrustedForwarderSet(_trustedForwarder, newForwarder, _msgSender());\\n        _trustedForwarder = newForwarder;\\n    }\\n\\n    /// @notice return true if the forwarder is the trusted forwarder\\n    /// @param forwarder trusted forwarder address to check\\n    /// @return true if the address is the same as the trusted forwarder\\n    function _isTrustedForwarder(address forwarder) internal view virtual override returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x63e53ca5ec229e51d866b0b8e3c8f36056598d9fbf960bb57b4b9731917af16f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61394b80620000f36000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806384b0196e116100e3578063d547741f1161008c578063e56f2fe411610066578063e56f2fe4146103ad578063ecc0382a146103c0578063f30553d5146103d357600080fd5b8063d547741f14610376578063d5f2077c14610389578063da7422281461039a57600080fd5b8063b21c2cdc116100bd578063b21c2cdc1461031a578063bd2cc82a14610341578063ce1b815f1461036557600080fd5b806384b0196e146102be57806391d14854146102d9578063a217fddf1461031257600080fd5b806336568abe11610145578063572b6c051161011f578063572b6c051461027357806359c191e4146102865780635aaa24bf146102ab57600080fd5b806336568abe146102265780633a2cf31a14610239578063439ff3ce1461026057600080fd5b806310da53931161017657806310da5393146101cf578063248a9ca3146101e25780632f2ff15d1461021357600080fd5b806301ffc9a7146101925780630c85fbb3146101ba575b600080fd5b6101a56101a03660046127a3565b6103fa565b60405190151581526020015b60405180910390f35b6101cd6101c8366004612831565b610493565b005b6101cd6101dd366004612954565b6104eb565b6102056101f0366004612a1c565b60009081526065602052604090206001015490565b6040519081526020016101b1565b6101cd610221366004612a51565b61070c565b6101cd610234366004612a51565b610736565b6102057f1d2951170e2f5d8eb8a7a48a737f5f1680469c14594abd27536867bfb559f88f81565b6101cd61026e366004612abf565b6107d2565b6101a5610281366004612bb0565b610b71565b60fd546001600160a01b03165b6040516001600160a01b0390911681526020016101b1565b6101cd6102b9366004612bcb565b610b8b565b6102c6610bea565b6040516101b19796959493929190612c78565b6101a56102e7366004612a51565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610205600081565b6102057f45cf7a9b20b47d492887b813085b48aa1988f1f482fe79948578452b4b4cbedd81565b6101a561034f366004612a1c565b6000908152610100602052604090205460ff1690565b6097546001600160a01b0316610293565b6101cd610384366004612a51565b610cac565b60fe546001600160a01b0316610293565b6101cd6103a8366004612bb0565b610cd1565b6101cd6103bb366004612cf4565b610d61565b6101cd6103ce366004612d99565b610ee5565b6102057f30ed1d13f34eab3b4d1a3291d48db1d77bbc98ec9480b9131e4360220fd46fb081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061048d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61049f8484848461110c565b7f25601c42b4517e81abacb7c77cd6d6697ea55465121e953721d60becc43b88e26104c8611228565b858585856040516104dd959493929190612eb8565b60405180910390a150505050565b84831461054b5760405162461bcd60e51b815260206004820152602360248201527f417373657452657665616c3a20496e76616c696420616d6f756e7473206c656e6044820152620cee8d60eb1b60648201526084015b60405180910390fd5b8481146105ab5760405162461bcd60e51b815260206004820152602860248201527f417373657452657665616c3a20496e76616c69642072657665616c48617368656044820152670e640d8cadccee8d60c31b6064820152608401610542565b60fe546001600160a01b0316636b406341896105d46105c8611228565b8b8b8b8b8b8b8b611237565b6040518363ffffffff1660e01b81526004016105f1929190612eee565b602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190612f10565b6106a45760405162461bcd60e51b815260206004820152602960248201527f417373657452657665616c3a20496e76616c69642072657665616c4d696e742060448201527f7369676e617475726500000000000000000000000000000000000000000000006064820152608401610542565b60006106b58886868a8a8888611326565b90507fd19ae26d53e6e3446633338937b673d431c042f61b32854f821bc2b2b025b2c46106e0611228565b8989898588886040516106f99796959493929190612f32565b60405180910390a1505050505050505050565b60008281526065602052604090206001015461072781611592565b61073183836115a6565b505050565b61073e611228565b6001600160a01b0316816001600160a01b0316146107c45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610542565b6107ce8282611649565b5050565b86851461082d5760405162461bcd60e51b815260206004820152602360248201527f417373657452657665616c3a20496e76616c696420616d6f756e7473206c656e6044820152620cee8d60eb1b6064820152608401610542565b8483146108a25760405162461bcd60e51b815260206004820152602a60248201527f417373657452657665616c3a20496e76616c6964206d6574616461746148617360448201527f686573206c656e677468000000000000000000000000000000000000000000006064820152608401610542565b8681146109025760405162461bcd60e51b815260206004820152602860248201527f417373657452657665616c3a20496e76616c69642072657665616c48617368656044820152670e640d8cadccee8d60c31b6064820152608401610542565b60fe546001600160a01b0316636b4063418b8b61092d610920611228565b8d8d8d8d8d8d8d8d6116ea565b6040518463ffffffff1660e01b815260040161094b93929190612fad565b602060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190612f10565b6109fe5760405162461bcd60e51b815260206004820152602e60248201527f417373657452657665616c3a20496e76616c69642072657665616c426174636860448201527f4d696e74207369676e61747572650000000000000000000000000000000000006064820152608401610542565b60008767ffffffffffffffff811115610a1957610a1961289d565b604051908082528060200260200182016040528015610a4c57816020015b6060815260200190600190039081610a375790505b50905060005b88811015610b1757610ae78a8a83818110610a6f57610a6f612fd1565b90506020020135878784818110610a8857610a88612fd1565b9050602002810190610a9a9190612fe7565b8b8b86818110610aac57610aac612fd1565b9050602002810190610abe9190612fe7565b898988818110610ad057610ad0612fd1565b9050602002810190610ae29190612fe7565b611326565b828281518110610af957610af9612fd1565b60200260200101819052508080610b0f90613047565b915050610a52565b507f9327e7d8f5446a92ddcaf7ccd64ad67693773944fe2db95200e2d4db20054359610b41611228565b8a8a8a8a868989604051610b5c98979695949392919061314f565b60405180910390a15050505050505050505050565b600061048d826097546001600160a01b0391821691161490565b610b9582826117bd565b7f529140d9ae57da9c5515c8fe288c3865d4cbb81cb143062f99a466cb4bb6fa95610bbe611228565b604080516001600160a01b03909216825260208201859052810183905260600160405180910390a15050565b60006060806000806000606060c9546000801b148015610c0a575060ca54155b610c565760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610542565b610c5e611863565b610c666118f5565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600082815260656020526040902060010154610cc781611592565b6107318383611649565b6000610cdc81611592565b6001600160a01b038216610d585760405162461bcd60e51b815260206004820152603460248201527f417373657452657665616c3a207472757374656420666f72776172646572206360448201527f616e2774206265207a65726f20616464726573730000000000000000000000006064820152608401610542565b6107ce82611904565b600054610100900460ff1615808015610d815750600054600160ff909116105b80610d9b5750303b158015610d9b575060005460ff166001145b610e0d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610542565b6000805460ff191660011790558015610e30576000805461ff0019166101001790555b60fd80546001600160a01b038088167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560fe805492871692909116919091179055610e8183611a08565b610e8b8787611a7c565b610e966000836115a6565b8015610edc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b848314610f405760405162461bcd60e51b815260206004820152602360248201527f417373657452657665616c3a20496e76616c696420616d6f756e7473206c656e6044820152620cee8d60eb1b6064820152608401610542565b848114610fa05760405162461bcd60e51b815260206004820152602860248201527f417373657452657665616c3a20496e76616c69642072657665616c48617368656044820152670e640d8cadccee8d60c31b6064820152608401610542565b60fe546001600160a01b0316636b4063418a610fc9610fbd611228565b8c8b8b8b8b8b8b611af1565b6040518363ffffffff1660e01b8152600401610fe6929190612eee565b602060405180830381865afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612f10565b6110995760405162461bcd60e51b815260206004820152602c60248201527f417373657452657665616c3a20496e76616c6964206275726e416e645265766560448201527f616c207369676e617475726500000000000000000000000000000000000000006064820152608401610542565b6110a388886117bd565b60006110b48986868a8a8888611326565b90507fd19ae26d53e6e3446633338937b673d431c042f61b32854f821bc2b2b025b2c46110df611228565b8a89898588886040516110f89796959493929190612f32565b60405180910390a150505050505050505050565b82811461115b5760405162461bcd60e51b815260206004820152601a60248201527f417373657452657665616c3a20496e76616c696420696e7075740000000000006044820152606401610542565b60005b838110156111b2576111a085858381811061117b5761117b612fd1565b9050602002013584848481811061119457611194612fd1565b90506020020135611b2c565b806111aa81613047565b91505061115e565b5060fd546001600160a01b03166320820ec36111cc611228565b868686866040518663ffffffff1660e01b81526004016111f0959493929190612eb8565b600060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b5050505050505050565b6000611232611c27565b905090565b60006113197f1d2951170e2f5d8eb8a7a48a737f5f1680469c14594abd27536867bfb559f88f8a8a8a8a604051602001611272929190613245565b60408051601f19818403018152919052805160209091012061129c6112978a8c6132f7565b611c7a565b88886040516020016112af929190613245565b60408051601f198184030181528282528051602091820120908301979097526001600160a01b03909516948101949094526060840192909252608083015260a082015260c081019190915260e0015b60405160208183030381529060405280519060200120611d6e565b9998505050505050505050565b6060600061133588888b611db6565b905060005b8381101561144057610100600086868481811061135957611359612fd1565b602090810292909201358352508101919091526040016000205460ff16156113e85760405162461bcd60e51b8152602060048201526024808201527f417373657452657665616c3a2052657665616c4861736820616c72656164792060448201527f75736564000000000000000000000000000000000000000000000000000000006064820152608401610542565b6001610100600087878581811061140157611401612fd1565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061143890613047565b91505061133a565b5080516001036115145760fd546001600160a01b031663bb7fde71611463611228565b8360008151811061147657611476612fd1565b60200260200101518989600081811061149157611491612fd1565b905060200201358c8c60008181106114ab576114ab612fd1565b90506020028101906114bd9190613304565b6040518663ffffffff1660e01b81526004016114dd95949392919061334b565b600060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b50505050611586565b60fd546001600160a01b031663a55784ef61152d611228565b8389898d8d6040518763ffffffff1660e01b815260040161155396959493929190613385565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050505b98975050505050505050565b6115a38161159e611228565b611fb7565b50565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166107ce5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611605611228565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156107ce5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556116a6611228565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006117af7f30ed1d13f34eab3b4d1a3291d48db1d77bbc98ec9480b9131e4360220fd46fb08b8b8b604051602001611724929190613245565b60408051601f19818403018152919052805160209091012061174e6117498b8d613459565b61202c565b61176061175b8a8c61351f565b6120f0565b61177261176d898b6135a7565b612196565b6040805160208101979097526001600160a01b03909516948601949094526060850192909252608084015260a083015260c082015260e0016112fe565b9a9950505050505050505050565b6117c78282611b2c565b60fd546001600160a01b031663124d91e56117e0611228565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526024810185905260448101849052606401600060405180830381600087803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b505050505050565b606060cb805461187290613660565b80601f016020809104026020016040519081016040528092919081815260200182805461189e90613660565b80156118eb5780601f106118c0576101008083540402835291602001916118eb565b820191906000526020600020905b8154815290600101906020018083116118ce57829003601f168201915b5050505050905090565b606060cc805461187290613660565b6097546001600160a01b03908116908216036119885760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c726561647920736574000000000000000000000000000000006064820152608401610542565b611990611228565b6097546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a4609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff16611a735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b6115a38161225a565b600054610100900460ff16611ae75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b6107ce82826122ce565b60006113197f45cf7a9b20b47d492887b813085b48aa1988f1f482fe79948578452b4b4cbedd8a8a8a8a604051602001611272929190613245565b6000611b3783612361565b90508060a0015115611bb15760405162461bcd60e51b815260206004820152602660248201527f417373657452657665616c3a20417373657420697320616c726561647920726560448201527f7665616c656400000000000000000000000000000000000000000000000000006064820152608401610542565b600082116107315760405162461bcd60e51b815260206004820152603160248201527f417373657452657665616c3a204275726e20616d6f756e742073686f756c642060448201527f62652067726561746572207468616e20300000000000000000000000000000006064820152608401610542565b6097546000906001600160a01b031633148015611c45575060143610155b15611c7557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b600080825167ffffffffffffffff811115611c9757611c9761289d565b604051908082528060200260200182016040528015611cc0578160200160208202803683370190505b50905060005b8351811015611d3e57838181518110611ce157611ce1612fd1565b6020026020010151604051602001611cf9919061369a565b60405160208183030381529060405280519060200120828281518110611d2157611d21612fd1565b602090810291909101015280611d3681613047565b915050611cc6565b5080604051602001611d5091906136b6565b60405160208183030381529060405280519060200120915050919050565b600061048d611d7b6123ee565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60606000611dc383612361565b90508060a0015115611e175760405162461bcd60e51b815260206004820152601d60248201527f417373657452657665616c3a20616c72656164792072657665616c65640000006044820152606401610542565b60008467ffffffffffffffff811115611e3257611e3261289d565b604051908082528060200260200182016040528015611e5b578160200160208202803683370190505b50905060005b85811015611fad5760fd546000906001600160a01b031663fdda1d0e898985818110611e8f57611e8f612fd1565b9050602002810190611ea19190613304565b6040518363ffffffff1660e01b8152600401611ebe9291906136ec565b602060405180830381865afa158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190613700565b905080600003611f7c576020808501516001600160a01b0316600090815260ff8252604080822089835290925290812080548290611f409061ffff16613719565b91906101000a81548161ffff021916908361ffff16021790559050611f78856020015186606001518760800151848960e001516123f8565b9150505b80838381518110611f8f57611f8f612fd1565b60209081029190910101525080611fa581613047565b915050611e61565b5095945050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166107ce57611fea81612445565b611ff5836020612457565b60405160200161200692919061373a565b60408051601f198184030181529082905262461bcd60e51b8252610542916004016137bb565b600080825167ffffffffffffffff8111156120495761204961289d565b604051908082528060200260200182016040528015612072578160200160208202803683370190505b50905060005b8351811015611d3e5783818151811061209357612093612fd1565b60200260200101516040516020016120ab91906136b6565b604051602081830303815290604052805190602001208282815181106120d3576120d3612fd1565b6020908102919091010152806120e881613047565b915050612078565b600080825167ffffffffffffffff81111561210d5761210d61289d565b604051908082528060200260200182016040528015612136578160200160208202803683370190505b50905060005b8351811015611d3e5761216784828151811061215a5761215a612fd1565b6020026020010151611c7a565b82828151811061217957612179612fd1565b60209081029190910101528061218e81613047565b91505061213c565b600080825167ffffffffffffffff8111156121b3576121b361289d565b6040519080825280602002602001820160405280156121dc578160200160208202803683370190505b50905060005b8351811015611d3e578381815181106121fd576121fd612fd1565b602002602001015160405160200161221591906136b6565b6040516020818303038152906040528051906020012082828151811061223d5761223d612fd1565b60209081029190910101528061225281613047565b9150506121e2565b600054610100900460ff166122c55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b6115a381611904565b600054610100900460ff166123395760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b60cb6123458382613814565b5060cc6123528282613814565b5050600060c981905560ca5550565b604080516101008101825260008082529181018290526080810182905260a0808201839052606060c0830181905260e08301939093526001600160a01b038416602083015283901c60ff16918101919091526123bc82612687565b151560a08201526123d18260a81c61ffff1690565b61ffff16608082015260c89190911c60019081161460e082015290565b60006112326126a5565b60008560c88361240957600061240c565b60015b60ff16901b60b88561ffff16901b60a88761ffff16901b60a08960ff16901b846001600160a01b03161717171791505095945050505050565b606061048d6001600160a01b03831660145b606060006124668360026138d4565b6124719060026138eb565b67ffffffffffffffff8111156124895761248961289d565b6040519080825280601f01601f1916602001820160405280156124b3576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106124ea576124ea612fd1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061254d5761254d612fd1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006125898460026138d4565b6125949060016138eb565b90505b6001811115612631577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106125d5576125d5612fd1565b1a60f81b8282815181106125eb576125eb612fd1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361262a816138fe565b9050612597565b5083156126805760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610542565b9392505050565b6000806126988360b81c61ffff1690565b61ffff1615159392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6126d0612719565b6126d8612772565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600080612724611863565b80519091501561273b578051602090910120919050565b60c954801561274a5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b60008061277d6118f5565b805190915015612794578051602090910120919050565b60ca54801561274a5792915050565b6000602082840312156127b557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461268057600080fd5b60008083601f8401126127f757600080fd5b50813567ffffffffffffffff81111561280f57600080fd5b6020830191508360208260051b850101111561282a57600080fd5b9250929050565b6000806000806040858703121561284757600080fd5b843567ffffffffffffffff8082111561285f57600080fd5b61286b888389016127e5565b9096509450602087013591508082111561288457600080fd5b50612891878288016127e5565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128dc576128dc61289d565b604052919050565b600082601f8301126128f557600080fd5b813567ffffffffffffffff81111561290f5761290f61289d565b6129226020601f19601f840116016128b3565b81815284602083860101111561293757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060a0898b03121561297057600080fd5b883567ffffffffffffffff8082111561298857600080fd5b6129948c838d016128e4565b995060208b0135985060408b01359150808211156129b157600080fd5b6129bd8c838d016127e5565b909850965060608b01359150808211156129d657600080fd5b6129e28c838d016127e5565b909650945060808b01359150808211156129fb57600080fd5b50612a088b828c016127e5565b999c989b5096995094979396929594505050565b600060208284031215612a2e57600080fd5b5035919050565b80356001600160a01b0381168114612a4c57600080fd5b919050565b60008060408385031215612a6457600080fd5b82359150612a7460208401612a35565b90509250929050565b60008083601f840112612a8f57600080fd5b50813567ffffffffffffffff811115612aa757600080fd5b60208301915083602082850101111561282a57600080fd5b60008060008060008060008060008060a08b8d031215612ade57600080fd5b8a3567ffffffffffffffff80821115612af657600080fd5b612b028e838f01612a7d565b909c509a5060208d0135915080821115612b1b57600080fd5b612b278e838f016127e5565b909a50985060408d0135915080821115612b4057600080fd5b612b4c8e838f016127e5565b909850965060608d0135915080821115612b6557600080fd5b612b718e838f016127e5565b909650945060808d0135915080821115612b8a57600080fd5b50612b978d828e016127e5565b915080935050809150509295989b9194979a5092959850565b600060208284031215612bc257600080fd5b61268082612a35565b60008060408385031215612bde57600080fd5b50508035926020909101359150565b60005b83811015612c08578181015183820152602001612bf0565b50506000910152565b60008151808452612c29816020860160208601612bed565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015612c6d57815187529582019590820190600101612c51565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201526000612cb360e0830189612c11565b8281036040840152612cc58189612c11565b90508660608401526001600160a01b03861660808401528460a084015282810360c08401526117af8185612c3d565b60008060008060008060c08789031215612d0d57600080fd5b863567ffffffffffffffff80821115612d2557600080fd5b612d318a838b016128e4565b97506020890135915080821115612d4757600080fd5b50612d5489828a016128e4565b955050612d6360408801612a35565b9350612d7160608801612a35565b9250612d7f60808801612a35565b9150612d8d60a08801612a35565b90509295509295509295565b600080600080600080600080600060c08a8c031215612db757600080fd5b893567ffffffffffffffff80821115612dcf57600080fd5b612ddb8d838e016128e4565b9a5060208c0135995060408c0135985060608c0135915080821115612dff57600080fd5b612e0b8d838e016127e5565b909850965060808c0135915080821115612e2457600080fd5b612e308d838e016127e5565b909650945060a08c0135915080821115612e4957600080fd5b50612e568c828d016127e5565b915080935050809150509295985092959850929598565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612e9f57600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0386168152606060208201526000612edb606083018688612e6d565b8281036040840152611586818587612e6d565b604081526000612f016040830185612c11565b90508260208301529392505050565b600060208284031215612f2257600080fd5b8151801515811461268057600080fd5b6001600160a01b038816815286602082015260a060408201526000612f5b60a083018789612e6d565b8281036060840152612f6d8187612c3d565b905082810360808401526117af818587612e6d565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b604081526000612fc1604083018587612f82565b9050826020830152949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612ffe57600080fd5b83018035915067ffffffffffffffff82111561301957600080fd5b6020019150600581901b360382131561282a57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361305a5761305a613031565b5060010190565b6000808335601e1984360301811261307857600080fd5b830160208101925035905067ffffffffffffffff81111561309857600080fd5b8060051b360382131561282a57600080fd5b600081518084526020808501808196508360051b8101915082860160005b858110156130f25782840389526130e0848351612c3d565b988501989350908401906001016130c8565b5091979650505050505050565b81835260006020808501808196508560051b810191508460005b878110156130f25782840389526131308288613061565b61313b868284612e6d565b9a87019a9550505090840190600101613119565b6001600160a01b03891681526000602060a08184015261317360a084018a8c612e6d565b8381036040850152878152818101600589901b820183018a60005b8b8110156131c857601f198584030184526131a9828e613061565b6131b4858284612e6d565b95880195945050509085019060010161318e565b505085810360608701526131dc818a6130aa565b935050505082810360808401526131f48185876130ff565b9b9a5050505050505050505050565b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561323257600080fd5b8260051b80838637939093019392505050565b6000613252828486613203565b949350505050565b600067ffffffffffffffff8211156132745761327461289d565b5060051b60200190565b600061329161328c8461325a565b6128b3565b8381529050602080820190600585901b8401868111156132b057600080fd5b845b818110156132ec57803567ffffffffffffffff8111156132d25760008081fd5b6132de898289016128e4565b8552509282019282016132b2565b505050509392505050565b600061268036848461327e565b6000808335601e1984360301811261331b57600080fd5b83018035915067ffffffffffffffff82111561333657600080fd5b60200191503681900382131561282a57600080fd5b6001600160a01b038616815284602082015283604082015260806060820152600061337a608083018486612f82565b979650505050505050565b6001600160a01b0387168152600060206080818401526133a86080840189612c3d565b83810360408501526133bb81888a612e6d565b84810360608601528581529050818101600586901b820183018760005b8881101561344757601f198584030184528135601e198b36030181126133fd57600080fd5b8a01868101903567ffffffffffffffff81111561341957600080fd5b80360382131561342857600080fd5b613433858284612f82565b9588019594505050908501906001016133d8565b50909c9b505050505050505050505050565b600061346761328c8461325a565b83815260208082019190600586811b86013681111561348557600080fd5b865b8181101561351257803567ffffffffffffffff8111156134a75760008081fd5b880136601f8201126134b95760008081fd5b80356134c761328c8261325a565b81815290851b820186019086810190368311156134e45760008081fd5b928701925b82841015613502578335825292870192908701906134e9565b8952505050948301948301613487565b5092979650505050505050565b600061352d61328c8461325a565b80848252602080830192508560051b85013681111561354b57600080fd5b855b8181101561359b57803567ffffffffffffffff81111561356d5760008081fd5b870136601f82011261357f5760008081fd5b61358d36823586840161327e565b86525093820193820161354d565b50919695505050505050565b60006135b561328c8461325a565b83815260208082019190600586811b8601368111156135d357600080fd5b865b8181101561351257803567ffffffffffffffff8111156135f55760008081fd5b880136601f8201126136075760008081fd5b803561361561328c8261325a565b81815290851b820186019086810190368311156136325760008081fd5b928701925b8284101561365057833582529287019290870190613637565b89525050509483019483016135d5565b600181811c9082168061367457607f821691505b60208210810361369457634e487b7160e01b600052602260045260246000fd5b50919050565b600082516136ac818460208701612bed565b9190910192915050565b815160009082906020808601845b838110156136e0578151855293820193908201906001016136c4565b50929695505050505050565b602081526000613252602083018486612f82565b60006020828403121561371257600080fd5b5051919050565b600061ffff80831681810361373057613730613031565b6001019392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613772816017850160208801612bed565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516137af816028840160208801612bed565b01602801949350505050565b6020815260006126806020830184612c11565b601f82111561073157600081815260208120601f850160051c810160208610156137f55750805b601f850160051c820191505b8181101561185b57828155600101613801565b815167ffffffffffffffff81111561382e5761382e61289d565b6138428161383c8454613660565b846137ce565b602080601f831160018114613877576000841561385f5750858301515b600019600386901b1c1916600185901b17855561185b565b600085815260208120601f198616915b828110156138a657888601518255948401946001909101908401613887565b50858210156138c45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761048d5761048d613031565b8082018082111561048d5761048d613031565b60008161390d5761390d613031565b50600019019056fea264697066735822122009be43805209f4688576eda21887af3be6f6c62b94b789da9e5ddebf12a3a9ce64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c806384b0196e116100e3578063d547741f1161008c578063e56f2fe411610066578063e56f2fe4146103ad578063ecc0382a146103c0578063f30553d5146103d357600080fd5b8063d547741f14610376578063d5f2077c14610389578063da7422281461039a57600080fd5b8063b21c2cdc116100bd578063b21c2cdc1461031a578063bd2cc82a14610341578063ce1b815f1461036557600080fd5b806384b0196e146102be57806391d14854146102d9578063a217fddf1461031257600080fd5b806336568abe11610145578063572b6c051161011f578063572b6c051461027357806359c191e4146102865780635aaa24bf146102ab57600080fd5b806336568abe146102265780633a2cf31a14610239578063439ff3ce1461026057600080fd5b806310da53931161017657806310da5393146101cf578063248a9ca3146101e25780632f2ff15d1461021357600080fd5b806301ffc9a7146101925780630c85fbb3146101ba575b600080fd5b6101a56101a03660046127a3565b6103fa565b60405190151581526020015b60405180910390f35b6101cd6101c8366004612831565b610493565b005b6101cd6101dd366004612954565b6104eb565b6102056101f0366004612a1c565b60009081526065602052604090206001015490565b6040519081526020016101b1565b6101cd610221366004612a51565b61070c565b6101cd610234366004612a51565b610736565b6102057f1d2951170e2f5d8eb8a7a48a737f5f1680469c14594abd27536867bfb559f88f81565b6101cd61026e366004612abf565b6107d2565b6101a5610281366004612bb0565b610b71565b60fd546001600160a01b03165b6040516001600160a01b0390911681526020016101b1565b6101cd6102b9366004612bcb565b610b8b565b6102c6610bea565b6040516101b19796959493929190612c78565b6101a56102e7366004612a51565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610205600081565b6102057f45cf7a9b20b47d492887b813085b48aa1988f1f482fe79948578452b4b4cbedd81565b6101a561034f366004612a1c565b6000908152610100602052604090205460ff1690565b6097546001600160a01b0316610293565b6101cd610384366004612a51565b610cac565b60fe546001600160a01b0316610293565b6101cd6103a8366004612bb0565b610cd1565b6101cd6103bb366004612cf4565b610d61565b6101cd6103ce366004612d99565b610ee5565b6102057f30ed1d13f34eab3b4d1a3291d48db1d77bbc98ec9480b9131e4360220fd46fb081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061048d57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b61049f8484848461110c565b7f25601c42b4517e81abacb7c77cd6d6697ea55465121e953721d60becc43b88e26104c8611228565b858585856040516104dd959493929190612eb8565b60405180910390a150505050565b84831461054b5760405162461bcd60e51b815260206004820152602360248201527f417373657452657665616c3a20496e76616c696420616d6f756e7473206c656e6044820152620cee8d60eb1b60648201526084015b60405180910390fd5b8481146105ab5760405162461bcd60e51b815260206004820152602860248201527f417373657452657665616c3a20496e76616c69642072657665616c48617368656044820152670e640d8cadccee8d60c31b6064820152608401610542565b60fe546001600160a01b0316636b406341896105d46105c8611228565b8b8b8b8b8b8b8b611237565b6040518363ffffffff1660e01b81526004016105f1929190612eee565b602060405180830381865afa15801561060e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106329190612f10565b6106a45760405162461bcd60e51b815260206004820152602960248201527f417373657452657665616c3a20496e76616c69642072657665616c4d696e742060448201527f7369676e617475726500000000000000000000000000000000000000000000006064820152608401610542565b60006106b58886868a8a8888611326565b90507fd19ae26d53e6e3446633338937b673d431c042f61b32854f821bc2b2b025b2c46106e0611228565b8989898588886040516106f99796959493929190612f32565b60405180910390a1505050505050505050565b60008281526065602052604090206001015461072781611592565b61073183836115a6565b505050565b61073e611228565b6001600160a01b0316816001600160a01b0316146107c45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610542565b6107ce8282611649565b5050565b86851461082d5760405162461bcd60e51b815260206004820152602360248201527f417373657452657665616c3a20496e76616c696420616d6f756e7473206c656e6044820152620cee8d60eb1b6064820152608401610542565b8483146108a25760405162461bcd60e51b815260206004820152602a60248201527f417373657452657665616c3a20496e76616c6964206d6574616461746148617360448201527f686573206c656e677468000000000000000000000000000000000000000000006064820152608401610542565b8681146109025760405162461bcd60e51b815260206004820152602860248201527f417373657452657665616c3a20496e76616c69642072657665616c48617368656044820152670e640d8cadccee8d60c31b6064820152608401610542565b60fe546001600160a01b0316636b4063418b8b61092d610920611228565b8d8d8d8d8d8d8d8d6116ea565b6040518463ffffffff1660e01b815260040161094b93929190612fad565b602060405180830381865afa158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c9190612f10565b6109fe5760405162461bcd60e51b815260206004820152602e60248201527f417373657452657665616c3a20496e76616c69642072657665616c426174636860448201527f4d696e74207369676e61747572650000000000000000000000000000000000006064820152608401610542565b60008767ffffffffffffffff811115610a1957610a1961289d565b604051908082528060200260200182016040528015610a4c57816020015b6060815260200190600190039081610a375790505b50905060005b88811015610b1757610ae78a8a83818110610a6f57610a6f612fd1565b90506020020135878784818110610a8857610a88612fd1565b9050602002810190610a9a9190612fe7565b8b8b86818110610aac57610aac612fd1565b9050602002810190610abe9190612fe7565b898988818110610ad057610ad0612fd1565b9050602002810190610ae29190612fe7565b611326565b828281518110610af957610af9612fd1565b60200260200101819052508080610b0f90613047565b915050610a52565b507f9327e7d8f5446a92ddcaf7ccd64ad67693773944fe2db95200e2d4db20054359610b41611228565b8a8a8a8a868989604051610b5c98979695949392919061314f565b60405180910390a15050505050505050505050565b600061048d826097546001600160a01b0391821691161490565b610b9582826117bd565b7f529140d9ae57da9c5515c8fe288c3865d4cbb81cb143062f99a466cb4bb6fa95610bbe611228565b604080516001600160a01b03909216825260208201859052810183905260600160405180910390a15050565b60006060806000806000606060c9546000801b148015610c0a575060ca54155b610c565760405162461bcd60e51b815260206004820152601560248201527f4549503731323a20556e696e697469616c697a656400000000000000000000006044820152606401610542565b610c5e611863565b610c666118f5565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b600082815260656020526040902060010154610cc781611592565b6107318383611649565b6000610cdc81611592565b6001600160a01b038216610d585760405162461bcd60e51b815260206004820152603460248201527f417373657452657665616c3a207472757374656420666f72776172646572206360448201527f616e2774206265207a65726f20616464726573730000000000000000000000006064820152608401610542565b6107ce82611904565b600054610100900460ff1615808015610d815750600054600160ff909116105b80610d9b5750303b158015610d9b575060005460ff166001145b610e0d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610542565b6000805460ff191660011790558015610e30576000805461ff0019166101001790555b60fd80546001600160a01b038088167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560fe805492871692909116919091179055610e8183611a08565b610e8b8787611a7c565b610e966000836115a6565b8015610edc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b848314610f405760405162461bcd60e51b815260206004820152602360248201527f417373657452657665616c3a20496e76616c696420616d6f756e7473206c656e6044820152620cee8d60eb1b6064820152608401610542565b848114610fa05760405162461bcd60e51b815260206004820152602860248201527f417373657452657665616c3a20496e76616c69642072657665616c48617368656044820152670e640d8cadccee8d60c31b6064820152608401610542565b60fe546001600160a01b0316636b4063418a610fc9610fbd611228565b8c8b8b8b8b8b8b611af1565b6040518363ffffffff1660e01b8152600401610fe6929190612eee565b602060405180830381865afa158015611003573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110279190612f10565b6110995760405162461bcd60e51b815260206004820152602c60248201527f417373657452657665616c3a20496e76616c6964206275726e416e645265766560448201527f616c207369676e617475726500000000000000000000000000000000000000006064820152608401610542565b6110a388886117bd565b60006110b48986868a8a8888611326565b90507fd19ae26d53e6e3446633338937b673d431c042f61b32854f821bc2b2b025b2c46110df611228565b8a89898588886040516110f89796959493929190612f32565b60405180910390a150505050505050505050565b82811461115b5760405162461bcd60e51b815260206004820152601a60248201527f417373657452657665616c3a20496e76616c696420696e7075740000000000006044820152606401610542565b60005b838110156111b2576111a085858381811061117b5761117b612fd1565b9050602002013584848481811061119457611194612fd1565b90506020020135611b2c565b806111aa81613047565b91505061115e565b5060fd546001600160a01b03166320820ec36111cc611228565b868686866040518663ffffffff1660e01b81526004016111f0959493929190612eb8565b600060405180830381600087803b15801561120a57600080fd5b505af115801561121e573d6000803e3d6000fd5b5050505050505050565b6000611232611c27565b905090565b60006113197f1d2951170e2f5d8eb8a7a48a737f5f1680469c14594abd27536867bfb559f88f8a8a8a8a604051602001611272929190613245565b60408051601f19818403018152919052805160209091012061129c6112978a8c6132f7565b611c7a565b88886040516020016112af929190613245565b60408051601f198184030181528282528051602091820120908301979097526001600160a01b03909516948101949094526060840192909252608083015260a082015260c081019190915260e0015b60405160208183030381529060405280519060200120611d6e565b9998505050505050505050565b6060600061133588888b611db6565b905060005b8381101561144057610100600086868481811061135957611359612fd1565b602090810292909201358352508101919091526040016000205460ff16156113e85760405162461bcd60e51b8152602060048201526024808201527f417373657452657665616c3a2052657665616c4861736820616c72656164792060448201527f75736564000000000000000000000000000000000000000000000000000000006064820152608401610542565b6001610100600087878581811061140157611401612fd1565b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550808061143890613047565b91505061133a565b5080516001036115145760fd546001600160a01b031663bb7fde71611463611228565b8360008151811061147657611476612fd1565b60200260200101518989600081811061149157611491612fd1565b905060200201358c8c60008181106114ab576114ab612fd1565b90506020028101906114bd9190613304565b6040518663ffffffff1660e01b81526004016114dd95949392919061334b565b600060405180830381600087803b1580156114f757600080fd5b505af115801561150b573d6000803e3d6000fd5b50505050611586565b60fd546001600160a01b031663a55784ef61152d611228565b8389898d8d6040518763ffffffff1660e01b815260040161155396959493929190613385565b600060405180830381600087803b15801561156d57600080fd5b505af1158015611581573d6000803e3d6000fd5b505050505b98975050505050505050565b6115a38161159e611228565b611fb7565b50565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166107ce5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611605611228565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156107ce5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191690556116a6611228565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b60006117af7f30ed1d13f34eab3b4d1a3291d48db1d77bbc98ec9480b9131e4360220fd46fb08b8b8b604051602001611724929190613245565b60408051601f19818403018152919052805160209091012061174e6117498b8d613459565b61202c565b61176061175b8a8c61351f565b6120f0565b61177261176d898b6135a7565b612196565b6040805160208101979097526001600160a01b03909516948601949094526060850192909252608084015260a083015260c082015260e0016112fe565b9a9950505050505050505050565b6117c78282611b2c565b60fd546001600160a01b031663124d91e56117e0611228565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526024810185905260448101849052606401600060405180830381600087803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b505050505050565b606060cb805461187290613660565b80601f016020809104026020016040519081016040528092919081815260200182805461189e90613660565b80156118eb5780601f106118c0576101008083540402835291602001916118eb565b820191906000526020600020905b8154815290600101906020018083116118ce57829003601f168201915b5050505050905090565b606060cc805461187290613660565b6097546001600160a01b03908116908216036119885760405162461bcd60e51b815260206004820152603060248201527f4552433237373148616e646c65725570677261646561626c653a20666f72776160448201527f7264657220616c726561647920736574000000000000000000000000000000006064820152608401610542565b611990611228565b6097546040516001600160a01b03928316928481169216907f8ca022029d8ff7ad974913f8970aeed6c5e0e7eaf494a0c5b262249f6b5759e590600090a4609780547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600054610100900460ff16611a735760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b6115a38161225a565b600054610100900460ff16611ae75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b6107ce82826122ce565b60006113197f45cf7a9b20b47d492887b813085b48aa1988f1f482fe79948578452b4b4cbedd8a8a8a8a604051602001611272929190613245565b6000611b3783612361565b90508060a0015115611bb15760405162461bcd60e51b815260206004820152602660248201527f417373657452657665616c3a20417373657420697320616c726561647920726560448201527f7665616c656400000000000000000000000000000000000000000000000000006064820152608401610542565b600082116107315760405162461bcd60e51b815260206004820152603160248201527f417373657452657665616c3a204275726e20616d6f756e742073686f756c642060448201527f62652067726561746572207468616e20300000000000000000000000000000006064820152608401610542565b6097546000906001600160a01b031633148015611c45575060143610155b15611c7557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c90565b503390565b600080825167ffffffffffffffff811115611c9757611c9761289d565b604051908082528060200260200182016040528015611cc0578160200160208202803683370190505b50905060005b8351811015611d3e57838181518110611ce157611ce1612fd1565b6020026020010151604051602001611cf9919061369a565b60405160208183030381529060405280519060200120828281518110611d2157611d21612fd1565b602090810291909101015280611d3681613047565b915050611cc6565b5080604051602001611d5091906136b6565b60405160208183030381529060405280519060200120915050919050565b600061048d611d7b6123ee565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60606000611dc383612361565b90508060a0015115611e175760405162461bcd60e51b815260206004820152601d60248201527f417373657452657665616c3a20616c72656164792072657665616c65640000006044820152606401610542565b60008467ffffffffffffffff811115611e3257611e3261289d565b604051908082528060200260200182016040528015611e5b578160200160208202803683370190505b50905060005b85811015611fad5760fd546000906001600160a01b031663fdda1d0e898985818110611e8f57611e8f612fd1565b9050602002810190611ea19190613304565b6040518363ffffffff1660e01b8152600401611ebe9291906136ec565b602060405180830381865afa158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190613700565b905080600003611f7c576020808501516001600160a01b0316600090815260ff8252604080822089835290925290812080548290611f409061ffff16613719565b91906101000a81548161ffff021916908361ffff16021790559050611f78856020015186606001518760800151848960e001516123f8565b9150505b80838381518110611f8f57611f8f612fd1565b60209081029190910101525080611fa581613047565b915050611e61565b5095945050505050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166107ce57611fea81612445565b611ff5836020612457565b60405160200161200692919061373a565b60408051601f198184030181529082905262461bcd60e51b8252610542916004016137bb565b600080825167ffffffffffffffff8111156120495761204961289d565b604051908082528060200260200182016040528015612072578160200160208202803683370190505b50905060005b8351811015611d3e5783818151811061209357612093612fd1565b60200260200101516040516020016120ab91906136b6565b604051602081830303815290604052805190602001208282815181106120d3576120d3612fd1565b6020908102919091010152806120e881613047565b915050612078565b600080825167ffffffffffffffff81111561210d5761210d61289d565b604051908082528060200260200182016040528015612136578160200160208202803683370190505b50905060005b8351811015611d3e5761216784828151811061215a5761215a612fd1565b6020026020010151611c7a565b82828151811061217957612179612fd1565b60209081029190910101528061218e81613047565b91505061213c565b600080825167ffffffffffffffff8111156121b3576121b361289d565b6040519080825280602002602001820160405280156121dc578160200160208202803683370190505b50905060005b8351811015611d3e578381815181106121fd576121fd612fd1565b602002602001015160405160200161221591906136b6565b6040516020818303038152906040528051906020012082828151811061223d5761223d612fd1565b60209081029190910101528061225281613047565b9150506121e2565b600054610100900460ff166122c55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b6115a381611904565b600054610100900460ff166123395760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610542565b60cb6123458382613814565b5060cc6123528282613814565b5050600060c981905560ca5550565b604080516101008101825260008082529181018290526080810182905260a0808201839052606060c0830181905260e08301939093526001600160a01b038416602083015283901c60ff16918101919091526123bc82612687565b151560a08201526123d18260a81c61ffff1690565b61ffff16608082015260c89190911c60019081161460e082015290565b60006112326126a5565b60008560c88361240957600061240c565b60015b60ff16901b60b88561ffff16901b60a88761ffff16901b60a08960ff16901b846001600160a01b03161717171791505095945050505050565b606061048d6001600160a01b03831660145b606060006124668360026138d4565b6124719060026138eb565b67ffffffffffffffff8111156124895761248961289d565b6040519080825280601f01601f1916602001820160405280156124b3576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106124ea576124ea612fd1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061254d5761254d612fd1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006125898460026138d4565b6125949060016138eb565b90505b6001811115612631577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106125d5576125d5612fd1565b1a60f81b8282815181106125eb576125eb612fd1565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c9361262a816138fe565b9050612597565b5083156126805760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610542565b9392505050565b6000806126988360b81c61ffff1690565b61ffff1615159392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6126d0612719565b6126d8612772565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600080612724611863565b80519091501561273b578051602090910120919050565b60c954801561274a5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b60008061277d6118f5565b805190915015612794578051602090910120919050565b60ca54801561274a5792915050565b6000602082840312156127b557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461268057600080fd5b60008083601f8401126127f757600080fd5b50813567ffffffffffffffff81111561280f57600080fd5b6020830191508360208260051b850101111561282a57600080fd5b9250929050565b6000806000806040858703121561284757600080fd5b843567ffffffffffffffff8082111561285f57600080fd5b61286b888389016127e5565b9096509450602087013591508082111561288457600080fd5b50612891878288016127e5565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128dc576128dc61289d565b604052919050565b600082601f8301126128f557600080fd5b813567ffffffffffffffff81111561290f5761290f61289d565b6129226020601f19601f840116016128b3565b81815284602083860101111561293757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060008060a0898b03121561297057600080fd5b883567ffffffffffffffff8082111561298857600080fd5b6129948c838d016128e4565b995060208b0135985060408b01359150808211156129b157600080fd5b6129bd8c838d016127e5565b909850965060608b01359150808211156129d657600080fd5b6129e28c838d016127e5565b909650945060808b01359150808211156129fb57600080fd5b50612a088b828c016127e5565b999c989b5096995094979396929594505050565b600060208284031215612a2e57600080fd5b5035919050565b80356001600160a01b0381168114612a4c57600080fd5b919050565b60008060408385031215612a6457600080fd5b82359150612a7460208401612a35565b90509250929050565b60008083601f840112612a8f57600080fd5b50813567ffffffffffffffff811115612aa757600080fd5b60208301915083602082850101111561282a57600080fd5b60008060008060008060008060008060a08b8d031215612ade57600080fd5b8a3567ffffffffffffffff80821115612af657600080fd5b612b028e838f01612a7d565b909c509a5060208d0135915080821115612b1b57600080fd5b612b278e838f016127e5565b909a50985060408d0135915080821115612b4057600080fd5b612b4c8e838f016127e5565b909850965060608d0135915080821115612b6557600080fd5b612b718e838f016127e5565b909650945060808d0135915080821115612b8a57600080fd5b50612b978d828e016127e5565b915080935050809150509295989b9194979a5092959850565b600060208284031215612bc257600080fd5b61268082612a35565b60008060408385031215612bde57600080fd5b50508035926020909101359150565b60005b83811015612c08578181015183820152602001612bf0565b50506000910152565b60008151808452612c29816020860160208601612bed565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015612c6d57815187529582019590820190600101612c51565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201526000612cb360e0830189612c11565b8281036040840152612cc58189612c11565b90508660608401526001600160a01b03861660808401528460a084015282810360c08401526117af8185612c3d565b60008060008060008060c08789031215612d0d57600080fd5b863567ffffffffffffffff80821115612d2557600080fd5b612d318a838b016128e4565b97506020890135915080821115612d4757600080fd5b50612d5489828a016128e4565b955050612d6360408801612a35565b9350612d7160608801612a35565b9250612d7f60808801612a35565b9150612d8d60a08801612a35565b90509295509295509295565b600080600080600080600080600060c08a8c031215612db757600080fd5b893567ffffffffffffffff80821115612dcf57600080fd5b612ddb8d838e016128e4565b9a5060208c0135995060408c0135985060608c0135915080821115612dff57600080fd5b612e0b8d838e016127e5565b909850965060808c0135915080821115612e2457600080fd5b612e308d838e016127e5565b909650945060a08c0135915080821115612e4957600080fd5b50612e568c828d016127e5565b915080935050809150509295985092959850929598565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612e9f57600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b0386168152606060208201526000612edb606083018688612e6d565b8281036040840152611586818587612e6d565b604081526000612f016040830185612c11565b90508260208301529392505050565b600060208284031215612f2257600080fd5b8151801515811461268057600080fd5b6001600160a01b038816815286602082015260a060408201526000612f5b60a083018789612e6d565b8281036060840152612f6d8187612c3d565b905082810360808401526117af818587612e6d565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b604081526000612fc1604083018587612f82565b9050826020830152949350505050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612ffe57600080fd5b83018035915067ffffffffffffffff82111561301957600080fd5b6020019150600581901b360382131561282a57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361305a5761305a613031565b5060010190565b6000808335601e1984360301811261307857600080fd5b830160208101925035905067ffffffffffffffff81111561309857600080fd5b8060051b360382131561282a57600080fd5b600081518084526020808501808196508360051b8101915082860160005b858110156130f25782840389526130e0848351612c3d565b988501989350908401906001016130c8565b5091979650505050505050565b81835260006020808501808196508560051b810191508460005b878110156130f25782840389526131308288613061565b61313b868284612e6d565b9a87019a9550505090840190600101613119565b6001600160a01b03891681526000602060a08184015261317360a084018a8c612e6d565b8381036040850152878152818101600589901b820183018a60005b8b8110156131c857601f198584030184526131a9828e613061565b6131b4858284612e6d565b95880195945050509085019060010161318e565b505085810360608701526131dc818a6130aa565b935050505082810360808401526131f48185876130ff565b9b9a5050505050505050505050565b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561323257600080fd5b8260051b80838637939093019392505050565b6000613252828486613203565b949350505050565b600067ffffffffffffffff8211156132745761327461289d565b5060051b60200190565b600061329161328c8461325a565b6128b3565b8381529050602080820190600585901b8401868111156132b057600080fd5b845b818110156132ec57803567ffffffffffffffff8111156132d25760008081fd5b6132de898289016128e4565b8552509282019282016132b2565b505050509392505050565b600061268036848461327e565b6000808335601e1984360301811261331b57600080fd5b83018035915067ffffffffffffffff82111561333657600080fd5b60200191503681900382131561282a57600080fd5b6001600160a01b038616815284602082015283604082015260806060820152600061337a608083018486612f82565b979650505050505050565b6001600160a01b0387168152600060206080818401526133a86080840189612c3d565b83810360408501526133bb81888a612e6d565b84810360608601528581529050818101600586901b820183018760005b8881101561344757601f198584030184528135601e198b36030181126133fd57600080fd5b8a01868101903567ffffffffffffffff81111561341957600080fd5b80360382131561342857600080fd5b613433858284612f82565b9588019594505050908501906001016133d8565b50909c9b505050505050505050505050565b600061346761328c8461325a565b83815260208082019190600586811b86013681111561348557600080fd5b865b8181101561351257803567ffffffffffffffff8111156134a75760008081fd5b880136601f8201126134b95760008081fd5b80356134c761328c8261325a565b81815290851b820186019086810190368311156134e45760008081fd5b928701925b82841015613502578335825292870192908701906134e9565b8952505050948301948301613487565b5092979650505050505050565b600061352d61328c8461325a565b80848252602080830192508560051b85013681111561354b57600080fd5b855b8181101561359b57803567ffffffffffffffff81111561356d5760008081fd5b870136601f82011261357f5760008081fd5b61358d36823586840161327e565b86525093820193820161354d565b50919695505050505050565b60006135b561328c8461325a565b83815260208082019190600586811b8601368111156135d357600080fd5b865b8181101561351257803567ffffffffffffffff8111156135f55760008081fd5b880136601f8201126136075760008081fd5b803561361561328c8261325a565b81815290851b820186019086810190368311156136325760008081fd5b928701925b8284101561365057833582529287019290870190613637565b89525050509483019483016135d5565b600181811c9082168061367457607f821691505b60208210810361369457634e487b7160e01b600052602260045260246000fd5b50919050565b600082516136ac818460208701612bed565b9190910192915050565b815160009082906020808601845b838110156136e0578151855293820193908201906001016136c4565b50929695505050505050565b602081526000613252602083018486612f82565b60006020828403121561371257600080fd5b5051919050565b600061ffff80831681810361373057613730613031565b6001019392505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613772816017850160208801612bed565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516137af816028840160208801612bed565b01602801949350505050565b6020815260006126806020830184612c11565b601f82111561073157600081815260208120601f850160051c810160208610156137f55750805b601f850160051c820191505b8181101561185b57828155600101613801565b815167ffffffffffffffff81111561382e5761382e61289d565b6138428161383c8454613660565b846137ce565b602080601f831160018114613877576000841561385f5750858301515b600019600386901b1c1916600185901b17855561185b565b600085815260208120601f198616915b828110156138a657888601518255948401946001909101908401613887565b50858210156138c45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761048d5761048d613031565b8082018082111561048d5761048d613031565b60008161390d5761390d613031565b50600019019056fea264697066735822122009be43805209f4688576eda21887af3be6f6c62b94b789da9e5ddebf12a3a9ce64736f6c63430008120033",
  "devdoc": {
    "author": "The Sandbox",
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "TrustedForwarderSet(address,address,address)": {
        "params": {
          "newTrustedForwarder": "new trusted forwarder",
          "oldTrustedForwarder": "old trusted forwarder",
          "operator": "the sender of the transaction"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "burnAndReveal(bytes,uint256,uint256,uint256[],string[],bytes32[])": {
        "details": "Should be used where it is not required to keep the metadata secret, e.g. mythical assets where users select their desired abilities and enhancements",
        "params": {
          "amounts": "The amount of assets to reveal (sum must be equal to the burnAmount)",
          "burnAmount": "The amount of assets to burn",
          "metadataHashes": "The array of hashes for asset metadata",
          "prevTokenId": "The tokenId of the unrevealed asset",
          "revealHashes": "A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId",
          "signature": "Signature created on the TSB backend containing INSTANT_REVEAL_TYPEHASH and associated data, must be signed by authorized signer"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getAssetContract()": {
        "returns": {
          "_0": "The asset contract address"
        }
      },
      "getAuthValidator()": {
        "returns": {
          "_0": "The auth validator address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "return the address of the trusted forwarder"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(string,string,address,address,address,address)": {
        "params": {
          "_assetContract": "The address of the asset contract",
          "_authValidator": "The address of the AuthSuperValidator contract",
          "_forwarder": "The address of the forwarder contract"
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "trusted forwarder address to check"
        },
        "returns": {
          "_0": "true if the address is the same as the trusted forwarder"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revealBatchBurn(uint256[],uint256[])": {
        "details": "Can be used to burn multiple copies of the same token id, each copy will be revealed separately",
        "params": {
          "amounts": "the amounts of the assets to burn",
          "tokenIds": "the tokenIds of the assets to burn"
        }
      },
      "revealBatchMint(bytes,uint256[],uint256[][],string[][],bytes32[][])": {
        "details": "Can be used to reveal multiple copies of the same token id",
        "params": {
          "amounts": "The amount of assets to reveal (must be equal to the length of revealHashes)",
          "metadataHashes": "The array of hashes for asset metadata",
          "prevTokenIds": "The tokenId of the unrevealed asset",
          "revealHashes": "Array of revealHash arrays providing random bytes32 generated by the TSB backend for each new tokenId",
          "signature": "Signatures created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer"
        }
      },
      "revealBurn(uint256,uint256)": {
        "details": "the reveal mechanism works through burning the asset and minting a new one with updated tokenId",
        "params": {
          "amount": "the amount of tokens to reveal",
          "tokenId": "the tokenId of id idasset to reveal"
        }
      },
      "revealHashUsed(bytes32)": {
        "returns": {
          "_0": "Whether it has been used"
        }
      },
      "revealMint(bytes,uint256,uint256[],string[],bytes32[])": {
        "details": "Can be used to reveal multiple copies of the same token id",
        "params": {
          "amounts": "The amount of assets to reveal (length reflects the number of types of reveal tokens and must be equal to the length of revealHashes)",
          "metadataHashes": "The array of hashes for revealed asset metadata",
          "prevTokenId": "The tokenId of the unrevealed asset",
          "revealHashes": "A revealHash array providing a random bytes32 generated by the TSB backend for each new tokenId",
          "signature": "Signature created on the TSB backend containing REVEAL_TYPEHASH and associated data, must be signed by authorized signer"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setTrustedForwarder(address)": {
        "details": "Change the address of the trusted forwarder for meta-TX",
        "params": {
          "trustedForwarder": "The new trustedForwarder"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "AssetReveal",
    "version": 1
  },
  "userdoc": {
    "events": {
      "TrustedForwarderSet(address,address,address)": {
        "notice": "Emitted when a `newTrustedForwarder` is set, replacing the `oldTrustedForwarder`"
      }
    },
    "kind": "user",
    "methods": {
      "burnAndReveal(bytes,uint256,uint256,uint256[],string[],bytes32[])": {
        "notice": "Reveal assets to view their abilities and enhancements and mint them in a single transaction"
      },
      "getAssetContract()": {
        "notice": "Get the asset contract address"
      },
      "getAuthValidator()": {
        "notice": "Get the auth validator address"
      },
      "getTrustedForwarder()": {
        "notice": "return the address of the trusted forwarder"
      },
      "initialize(string,string,address,address,address,address)": {
        "notice": "Initialize the contract"
      },
      "isTrustedForwarder(address)": {
        "notice": "return true if the forwarder is the trusted forwarder"
      },
      "revealBatchBurn(uint256[],uint256[])": {
        "notice": "Burn multiple assets to be able to reveal them later"
      },
      "revealBatchMint(bytes,uint256[],uint256[][],string[][],bytes32[][])": {
        "notice": "Mint multiple assets with revealed abilities and enhancements"
      },
      "revealBurn(uint256,uint256)": {
        "notice": "Reveal an asset to view its abilities and enhancements"
      },
      "revealHashUsed(bytes32)": {
        "notice": "Get the status of a revealHash"
      },
      "revealMint(bytes,uint256,uint256[],string[],bytes32[])": {
        "notice": "Reveal assets to view their abilities and enhancements"
      },
      "setTrustedForwarder(address)": {
        "notice": "Set a new trusted forwarder address, limited to DEFAULT_ADMIN_ROLE only"
      }
    },
    "notice": "Contract for burning and revealing assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3599,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3602,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6153,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7076,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3044,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3039_storage)"
      },
      {
        "astId": 3339,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17227,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 17314,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6767,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_hashedName",
        "offset": 0,
        "slot": "201",
        "type": "t_bytes32"
      },
      {
        "astId": 6770,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_hashedVersion",
        "offset": 0,
        "slot": "202",
        "type": "t_bytes32"
      },
      {
        "astId": 6772,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_name",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 6774,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "_version",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 7032,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 14033,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "assetContract",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(IAsset)16079"
      },
      {
        "astId": 14036,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "authValidator",
        "offset": 0,
        "slot": "254",
        "type": "t_contract(AuthSuperValidator)15285"
      },
      {
        "astId": 14042,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "revealIds",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint16))"
      },
      {
        "astId": 14046,
        "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
        "label": "revealHashesUsed",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AuthSuperValidator)15285": {
        "encoding": "inplace",
        "label": "contract AuthSuperValidator",
        "numberOfBytes": "20"
      },
      "t_contract(IAsset)16079": {
        "encoding": "inplace",
        "label": "contract IAsset",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint16))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint16))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint16)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3039_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3039_storage"
      },
      "t_mapping(t_uint256,t_uint16)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)3039_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 3036,
            "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3038,
            "contract": "@sandbox-smart-contracts/asset/contracts/AssetReveal.sol:AssetReveal",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}